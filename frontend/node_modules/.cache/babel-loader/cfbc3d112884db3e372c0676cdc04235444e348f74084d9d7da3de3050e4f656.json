{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getCompositionsCount, getEnsembleAlbums, getTopSellingAlbums, createEnsemble, getAllEnsembles } from '../services/ensembleService';\nexport const fetchCompositionsCount = createAsyncThunk('ensembles/fetchCompositionsCount', async ensembleId => {\n  return await getCompositionsCount(ensembleId);\n});\nexport const fetchEnsembleAlbums = createAsyncThunk('ensembles/fetchEnsembleAlbums', async ensembleId => {\n  return await getEnsembleAlbums(ensembleId);\n});\nexport const fetchTopSellingAlbums = createAsyncThunk('ensembles/fetchTopSelling', async () => {\n  return await getTopSellingAlbums();\n});\nexport const addNewEnsemble = createAsyncThunk('ensembles/addNew', async ensembleData => {\n  return await createEnsemble(ensembleData);\n});\nexport const fetchAllEnsembles = createAsyncThunk('ensembles/fetchAll', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    return await getAllEnsembles();\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  }\n});\nconst ensembleSlice = createSlice({\n  name: 'ensembles',\n  initialState: {\n    compositionsCount: null,\n    albums: [],\n    topSelling: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCompositionsCount.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchCompositionsCount.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.compositionsCount = action.payload.count;\n    }).addCase(fetchCompositionsCount.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchEnsembleAlbums.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchEnsembleAlbums.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.albums = action.payload;\n    }).addCase(fetchEnsembleAlbums.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTopSellingAlbums.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTopSellingAlbums.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.topSelling = action.payload;\n    }).addCase(fetchTopSellingAlbums.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewEnsemble.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Optionally add new ensemble to state\n    }).addCase(addNewEnsemble.pending, state => {\n      state.status = 'loading';\n    }).addCase(addNewEnsemble.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default ensembleSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getCompositionsCount","getEnsembleAlbums","getTopSellingAlbums","createEnsemble","getAllEnsembles","fetchCompositionsCount","ensembleId","fetchEnsembleAlbums","fetchTopSellingAlbums","addNewEnsemble","ensembleData","fetchAllEnsembles","_","rejectWithValue","error","_error$response","response","data","message","ensembleSlice","name","initialState","compositionsCount","albums","topSelling","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","count","rejected","reducer"],"sources":["/Users/mak/musicShop/frontend/src/features/ensembleSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { \n  getCompositionsCount, \n  getEnsembleAlbums, \n  getTopSellingAlbums,\n  createEnsemble,\n  getAllEnsembles\n} from '../services/ensembleService';\n\nexport const fetchCompositionsCount = createAsyncThunk(\n  'ensembles/fetchCompositionsCount',\n  async (ensembleId) => {\n    return await getCompositionsCount(ensembleId);\n  }\n);\n\nexport const fetchEnsembleAlbums = createAsyncThunk(\n  'ensembles/fetchEnsembleAlbums',\n  async (ensembleId) => {\n    return await getEnsembleAlbums(ensembleId);\n  }\n);\n\nexport const fetchTopSellingAlbums = createAsyncThunk(\n  'ensembles/fetchTopSelling',\n  async () => {\n    return await getTopSellingAlbums();\n  }\n);\n\nexport const addNewEnsemble = createAsyncThunk(\n  'ensembles/addNew',\n  async (ensembleData) => {\n    return await createEnsemble(ensembleData);\n  }\n);\n\nexport const fetchAllEnsembles = createAsyncThunk(\n  'ensembles/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      return await getAllEnsembles();\n    } catch (error) {\n      return rejectWithValue(error.response?.data || error.message);\n    }\n  }\n);\n\nconst ensembleSlice = createSlice({\n  name: 'ensembles',\n  initialState: {\n    compositionsCount: null,\n    albums: [],\n    topSelling: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompositionsCount.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchCompositionsCount.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.compositionsCount = action.payload.count;\n      })\n      .addCase(fetchCompositionsCount.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchEnsembleAlbums.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchEnsembleAlbums.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.albums = action.payload;\n      })\n      .addCase(fetchEnsembleAlbums.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTopSellingAlbums.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchTopSellingAlbums.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.topSelling = action.payload;\n      })\n      .addCase(fetchTopSellingAlbums.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addNewEnsemble.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Optionally add new ensemble to state\n      })\n      .addCase(addNewEnsemble.pending, (state) => {\n        state.status = 'loading';\n        })\n      .addCase(addNewEnsemble.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n        });\n      \n  }\n});\n\nexport default ensembleSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}