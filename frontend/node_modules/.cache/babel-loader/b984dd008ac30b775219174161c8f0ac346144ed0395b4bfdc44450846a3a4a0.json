{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport api from '../api';\nexport const fetchCompositions = createAsyncThunk('compositions/fetchAll', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.get('/compositions');\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message);\n  }\n});\nexport const addNewComposition = createAsyncThunk('compositions/addNew', async (compositionData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await api.post('/compositions', compositionData);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message);\n  }\n});\nconst compositionSlice = createSlice({\n  name: 'compositions',\n  initialState: {\n    list: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCompositions.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchCompositions.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload;\n    }).addCase(fetchCompositions.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    }).addCase(addNewComposition.fulfilled, (state, action) => {\n      state.list.push(action.payload);\n    });\n  }\n});\nexport default compositionSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","api","fetchCompositions","_","rejectWithValue","response","get","data","error","_error$response","_error$response$data","message","addNewComposition","compositionData","post","_error$response2","_error$response2$data","compositionSlice","name","initialState","list","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","reducer"],"sources":["/Users/mak/musicShop/frontend/src/features/compositionSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport api from '../api';\n\nexport const fetchCompositions = createAsyncThunk(\n  'compositions/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await api.get('/compositions');\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || error.message);\n    }\n  }\n);\n\nexport const addNewComposition = createAsyncThunk(\n  'compositions/addNew',\n  async (compositionData, { rejectWithValue }) => {\n    try {\n      const response = await api.post('/compositions', compositionData);\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || error.message);\n    }\n  }\n);\n\nconst compositionSlice = createSlice({\n  name: 'compositions',\n  initialState: {\n    list: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompositions.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchCompositions.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.list = action.payload;\n      })\n      .addCase(fetchCompositions.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload;\n      })\n      .addCase(addNewComposition.fulfilled, (state, action) => {\n        state.list.push(action.payload);\n      });\n  }\n});\n\nexport default compositionSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,QAAQ;AAExB,OAAO,MAAMC,iBAAiB,GAAGH,gBAAgB,CAC/C,uBAAuB,EACvB,OAAOI,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,eAAe,CAAC;IAC/C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACd,OAAON,eAAe,CAAC,EAAAK,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAIA,KAAK,CAACG,OAAO,CAAC;EACtE;AACF,CACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGb,gBAAgB,CAC/C,qBAAqB,EACrB,OAAOc,eAAe,EAAE;EAAET;AAAgB,CAAC,KAAK;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACa,IAAI,CAAC,eAAe,EAAED,eAAe,CAAC;IACjE,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACd,OAAOZ,eAAe,CAAC,EAAAW,gBAAA,GAAAP,KAAK,CAACH,QAAQ,cAAAU,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBR,KAAK,KAAIA,KAAK,CAACG,OAAO,CAAC;EACtE;AACF,CACF,CAAC;AAED,MAAMM,gBAAgB,GAAGjB,WAAW,CAAC;EACnCkB,IAAI,EAAE,cAAc;EACpBC,YAAY,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,MAAM;IACdb,KAAK,EAAE;EACT,CAAC;EACDc,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,iBAAiB,CAACwB,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACvB,iBAAiB,CAAC0B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1BM,KAAK,CAACP,IAAI,GAAGS,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDL,OAAO,CAACvB,iBAAiB,CAAC6B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACnB,KAAK,GAAGqB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACb,iBAAiB,CAACgB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACP,IAAI,CAACY,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACjC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeb,gBAAgB,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}