{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as musicianService from '../services/musicianService';\nexport const fetchMusicians = createAsyncThunk('musicians/fetchAll', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    return await musicianService.getAllMusicians();\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message);\n  }\n});\n\n// Остальной код остается без изменений\n\n// Остальной код остается без изменений\n\nexport const fetchMusicianDetails = createAsyncThunk('musicians/fetchDetails', async id => {\n  const response = await api.get(`/musicians/${id}`);\n  return response.data;\n});\nexport const addNewMusician = createAsyncThunk('musicians/addNew', async musicianData => {\n  const response = await api.post('/musicians', musicianData);\n  return response.data;\n});\nexport const modifyMusician = createAsyncThunk('musicians/update', async ({\n  id,\n  data\n}) => {\n  const response = await api.put(`/musicians/${id}`, data);\n  return response.data;\n});\nexport const searchMusicianCatalog = createAsyncThunk('musicians/search', async query => {\n  const response = await api.get('/musicians/search', {\n    params: {\n      name: query\n    }\n  });\n  return response.data;\n});\n\n// Slice\nconst musicianSlice = createSlice({\n  name: 'musicians',\n  initialState: {\n    list: [],\n    currentMusician: null,\n    searchResults: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    clearCurrentMusician: state => {\n      state.currentMusician = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMusicians.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchMusicians.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload;\n    }).addCase(fetchMusicianDetails.fulfilled, (state, action) => {\n      state.currentMusician = action.payload;\n    }).addCase(addNewMusician.fulfilled, (state, action) => {\n      state.list.push(action.payload);\n    }).addCase(modifyMusician.fulfilled, (state, action) => {\n      var _state$currentMusicia;\n      const index = state.list.findIndex(m => m.id === action.payload.id);\n      if (index !== -1) {\n        state.list[index] = action.payload;\n      }\n      if (((_state$currentMusicia = state.currentMusician) === null || _state$currentMusicia === void 0 ? void 0 : _state$currentMusicia.id) === action.payload.id) {\n        state.currentMusician = action.payload;\n      }\n    }).addCase(searchMusicianCatalog.fulfilled, (state, action) => {\n      state.searchResults = action.payload;\n    }).addMatcher(action => action.type.endsWith('/rejected'), (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  clearCurrentMusician\n} = musicianSlice.actions;\nexport default musicianSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","musicianService","fetchMusicians","_","rejectWithValue","getAllMusicians","error","_error$response","_error$response$data","response","data","message","fetchMusicianDetails","id","api","get","addNewMusician","musicianData","post","modifyMusician","put","searchMusicianCatalog","query","params","name","musicianSlice","initialState","list","currentMusician","searchResults","status","reducers","clearCurrentMusician","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","push","_state$currentMusicia","index","findIndex","m","addMatcher","type","endsWith","actions","reducer"],"sources":["/Users/mak/musicShop/frontend/src/features/musicianSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport * as musicianService from '../services/musicianService';\n\nexport const fetchMusicians = createAsyncThunk(\n  'musicians/fetchAll',\n  async (_, { rejectWithValue }) => {\n    try {\n      return await musicianService.getAllMusicians();\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.error || error.message);\n    }\n  }\n);\n\n// Остальной код остается без изменений\n\n// Остальной код остается без изменений\n\nexport const fetchMusicianDetails = createAsyncThunk(\n  'musicians/fetchDetails',\n  async (id) => {\n    const response = await api.get(`/musicians/${id}`);\n    return response.data;\n  }\n);\n\nexport const addNewMusician = createAsyncThunk(\n  'musicians/addNew',\n  async (musicianData) => {\n    const response = await api.post('/musicians', musicianData);\n    return response.data;\n  }\n);\n\nexport const modifyMusician = createAsyncThunk(\n  'musicians/update',\n  async ({ id, data }) => {\n    const response = await api.put(`/musicians/${id}`, data);\n    return response.data;\n  }\n);\n\nexport const searchMusicianCatalog = createAsyncThunk(\n  'musicians/search',\n  async (query) => {\n    const response = await api.get('/musicians/search', {\n      params: { name: query }\n    });\n    return response.data;\n  }\n);\n\n// Slice\nconst musicianSlice = createSlice({\n  name: 'musicians',\n  initialState: {\n    list: [],\n    currentMusician: null,\n    searchResults: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    clearCurrentMusician: (state) => {\n      state.currentMusician = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMusicians.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchMusicians.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.list = action.payload;\n      })\n      .addCase(fetchMusicianDetails.fulfilled, (state, action) => {\n        state.currentMusician = action.payload;\n      })\n      .addCase(addNewMusician.fulfilled, (state, action) => {\n        state.list.push(action.payload);\n      })\n      .addCase(modifyMusician.fulfilled, (state, action) => {\n        const index = state.list.findIndex(m => m.id === action.payload.id);\n        if (index !== -1) {\n          state.list[index] = action.payload;\n        }\n        if (state.currentMusician?.id === action.payload.id) {\n          state.currentMusician = action.payload;\n        }\n      })\n      .addCase(searchMusicianCatalog.fulfilled, (state, action) => {\n        state.searchResults = action.payload;\n      })\n      .addMatcher(\n        (action) => action.type.endsWith('/rejected'),\n        (state, action) => {\n          state.status = 'failed';\n          state.error = action.error.message;\n        }\n      );\n  }\n});\n\nexport const { clearCurrentMusician } = musicianSlice.actions;\nexport default musicianSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}