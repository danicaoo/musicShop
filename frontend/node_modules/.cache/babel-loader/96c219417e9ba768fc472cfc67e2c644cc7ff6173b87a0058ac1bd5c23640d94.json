{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { getAlbums, getAlbumDetails, createAlbum, updateAlbum, updateInventory, searchAlbums, getTopSellingAlbums } from '../services/albumService';\nexport const fetchAlbums = createAsyncThunk('albums/fetchAll', async (page = 1) => {\n  return await getAlbums(page);\n});\nexport const fetchAlbumDetails = createAsyncThunk('albums/fetchDetails', async id => {\n  return await getAlbumDetails(id);\n});\nexport const addNewAlbum = createAsyncThunk('albums/addNew', async albumData => {\n  return await createAlbum(albumData);\n});\nexport const modifyAlbum = createAsyncThunk('albums/update', async ({\n  id,\n  data\n}) => {\n  return await updateAlbum(id, data);\n});\nexport const modifyInventory = createAsyncThunk('albums/updateInventory', async ({\n  id,\n  data\n}) => {\n  return await updateInventory(id, data);\n});\nexport const searchAlbumCatalog = createAsyncThunk('albums/search', async query => {\n  return await searchAlbums(query);\n});\nexport const fetchTopSellingAlbums = createAsyncThunk('albums/fetchTopSelling', async () => {\n  return await getTopSellingAlbums();\n});\nconst albumSlice = createSlice({\n  name: 'albums',\n  initialState: {\n    list: [],\n    currentAlbum: null,\n    searchResults: [],\n    topSelling: [],\n    status: 'idle',\n    error: null,\n    pagination: {}\n  },\n  reducers: {\n    clearCurrentAlbum: state => {\n      state.currentAlbum = null;\n    },\n    clearSearchResults: state => {\n      state.searchResults = [];\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAlbums.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAlbums.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.list = action.payload.data || [];\n      state.pagination = action.payload.pagination || {};\n    }).addCase(fetchAlbums.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAlbumDetails.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAlbumDetails.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.currentAlbum = action.payload;\n    }).addCase(fetchAlbumDetails.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addNewAlbum.fulfilled, (state, action) => {\n      state.list = [...state.list, action.payload];\n    }).addCase(modifyAlbum.fulfilled, (state, action) => {\n      var _state$currentAlbum;\n      state.status = 'succeeded';\n      const index = state.list.findIndex(a => a.id === action.payload.id);\n      if (index !== -1) {\n        state.list[index] = action.payload;\n      }\n      if (((_state$currentAlbum = state.currentAlbum) === null || _state$currentAlbum === void 0 ? void 0 : _state$currentAlbum.id) === action.payload.id) {\n        state.currentAlbum = action.payload;\n      }\n    }).addCase(modifyInventory.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      if (state.currentAlbum) {\n        state.currentAlbum.inventories = [action.payload];\n      }\n      const albumIndex = state.list.findIndex(a => {\n        var _a$inventories;\n        return (_a$inventories = a.inventories) === null || _a$inventories === void 0 ? void 0 : _a$inventories.some(i => i.id === action.payload.id);\n      });\n      if (albumIndex !== -1) {\n        state.list[albumIndex].inventories = [action.payload];\n      }\n    }).addCase(searchAlbumCatalog.pending, state => {\n      state.status = 'loading';\n    }).addCase(searchAlbumCatalog.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.searchResults = action.payload;\n    }).addCase(searchAlbumCatalog.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTopSellingAlbums.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTopSellingAlbums.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.topSelling = action.payload.map(item => ({\n        id: item.id,\n        albumTitle: item.title,\n        catalogNumber: item.catalogNumber,\n        ensembleName: item.ensemble,\n        currentYearSales: item.sales,\n        retailPrice: item.retailPrice,\n        unsold: item.unsold\n      }));\n    }).addCase(fetchTopSellingAlbums.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  clearCurrentAlbum,\n  clearSearchResults\n} = albumSlice.actions;\nexport default albumSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getAlbums","getAlbumDetails","createAlbum","updateAlbum","updateInventory","searchAlbums","getTopSellingAlbums","fetchAlbums","page","fetchAlbumDetails","id","addNewAlbum","albumData","modifyAlbum","data","modifyInventory","searchAlbumCatalog","query","fetchTopSellingAlbums","albumSlice","name","initialState","list","currentAlbum","searchResults","topSelling","status","error","pagination","reducers","clearCurrentAlbum","state","clearSearchResults","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","_state$currentAlbum","index","findIndex","a","inventories","albumIndex","_a$inventories","some","i","map","item","albumTitle","title","catalogNumber","ensembleName","ensemble","currentYearSales","sales","retailPrice","unsold","actions","reducer"],"sources":["/Users/mak/musicShop/frontend/src/features/albumSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { \n  getAlbums, \n  getAlbumDetails, \n  createAlbum, \n  updateAlbum,\n  updateInventory,\n  searchAlbums,\n  getTopSellingAlbums\n} from '../services/albumService';\n\nexport const fetchAlbums = createAsyncThunk(\n  'albums/fetchAll',\n  async (page = 1) => {\n    return await getAlbums(page);\n  }\n);\n\nexport const fetchAlbumDetails = createAsyncThunk(\n  'albums/fetchDetails',\n  async (id) => {\n    return await getAlbumDetails(id);\n  }\n);\n\nexport const addNewAlbum = createAsyncThunk(\n  'albums/addNew',\n  async (albumData) => {\n    return await createAlbum(albumData);\n  }\n);\n\nexport const modifyAlbum = createAsyncThunk(\n  'albums/update',\n  async ({ id, data }) => {\n    return await updateAlbum(id, data);\n  }\n);\n\nexport const modifyInventory = createAsyncThunk(\n  'albums/updateInventory',\n  async ({ id, data }) => {\n    return await updateInventory(id, data);\n  }\n);\n\nexport const searchAlbumCatalog = createAsyncThunk(\n  'albums/search',\n  async (query) => {\n    return await searchAlbums(query);\n  }\n);\n\nexport const fetchTopSellingAlbums = createAsyncThunk(\n  'albums/fetchTopSelling',\n  async () => {\n    return await getTopSellingAlbums();\n  }\n);\n\nconst albumSlice = createSlice({\n  name: 'albums',\n  initialState: {\n    list: [],\n    currentAlbum: null,\n    searchResults: [],\n    topSelling: [],\n    status: 'idle',\n    error: null,\n    pagination: {}\n  },\n  reducers: {\n    clearCurrentAlbum: (state) => {\n      state.currentAlbum = null;\n    },\n    clearSearchResults: (state) => {\n      state.searchResults = [];\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAlbums.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAlbums.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.list = action.payload.data || [];\n        state.pagination = action.payload.pagination || {};\n      })\n      .addCase(fetchAlbums.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchAlbumDetails.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAlbumDetails.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.currentAlbum = action.payload;\n      })\n      .addCase(fetchAlbumDetails.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addNewAlbum.fulfilled, (state, action) => {\n        state.list = [...state.list, action.payload];\n      })\n      .addCase(modifyAlbum.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        const index = state.list.findIndex(a => a.id === action.payload.id);\n        if (index !== -1) {\n          state.list[index] = action.payload;\n        }\n        if (state.currentAlbum?.id === action.payload.id) {\n          state.currentAlbum = action.payload;\n        }\n      })\n      .addCase(modifyInventory.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        if (state.currentAlbum) {\n          state.currentAlbum.inventories = [action.payload];\n        }\n        const albumIndex = state.list.findIndex(a => \n          a.inventories?.some(i => i.id === action.payload.id)\n        );\n        if (albumIndex !== -1) {\n          state.list[albumIndex].inventories = [action.payload];\n        }\n      })\n      .addCase(searchAlbumCatalog.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(searchAlbumCatalog.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.searchResults = action.payload;\n      })\n      .addCase(searchAlbumCatalog.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTopSellingAlbums.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchTopSellingAlbums.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.topSelling = action.payload.map(item => ({\n          id: item.id,\n          albumTitle: item.title,\n          catalogNumber: item.catalogNumber,\n          ensembleName: item.ensemble,\n          currentYearSales: item.sales,\n          retailPrice: item.retailPrice,\n          unsold: item.unsold\n        }));\n      })\n      .addCase(fetchTopSellingAlbums.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  }\n});\n\nexport const { clearCurrentAlbum, clearSearchResults } = albumSlice.actions;\nexport default albumSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}