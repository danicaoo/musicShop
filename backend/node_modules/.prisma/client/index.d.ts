
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Musician
 * 
 */
export type Musician = $Result.DefaultSelection<Prisma.$MusicianPayload>
/**
 * Model Ensemble
 * 
 */
export type Ensemble = $Result.DefaultSelection<Prisma.$EnsemblePayload>
/**
 * Model EnsembleMember
 * 
 */
export type EnsembleMember = $Result.DefaultSelection<Prisma.$EnsembleMemberPayload>
/**
 * Model Composition
 * 
 */
export type Composition = $Result.DefaultSelection<Prisma.$CompositionPayload>
/**
 * Model Recording
 * 
 */
export type Recording = $Result.DefaultSelection<Prisma.$RecordingPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model Track
 * 
 */
export type Track = $Result.DefaultSelection<Prisma.$TrackPayload>
/**
 * Model Inventory
 * 
 */
export type Inventory = $Result.DefaultSelection<Prisma.$InventoryPayload>
/**
 * Model Sale
 * 
 */
export type Sale = $Result.DefaultSelection<Prisma.$SalePayload>
/**
 * Model PrismaMigrations
 * 
 */
export type PrismaMigrations = $Result.DefaultSelection<Prisma.$PrismaMigrationsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  VOCALIST: 'VOCALIST',
  GUITARIST: 'GUITARIST',
  BASSIST: 'BASSIST',
  DRUMMER: 'DRUMMER',
  KEYBOARDIST: 'KEYBOARDIST',
  COMPOSER: 'COMPOSER',
  CONDUCTOR: 'CONDUCTOR',
  PRODUCER: 'PRODUCER'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Musicians
 * const musicians = await prisma.musician.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Musicians
   * const musicians = await prisma.musician.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.musician`: Exposes CRUD operations for the **Musician** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Musicians
    * const musicians = await prisma.musician.findMany()
    * ```
    */
  get musician(): Prisma.MusicianDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ensemble`: Exposes CRUD operations for the **Ensemble** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ensembles
    * const ensembles = await prisma.ensemble.findMany()
    * ```
    */
  get ensemble(): Prisma.EnsembleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ensembleMember`: Exposes CRUD operations for the **EnsembleMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EnsembleMembers
    * const ensembleMembers = await prisma.ensembleMember.findMany()
    * ```
    */
  get ensembleMember(): Prisma.EnsembleMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.composition`: Exposes CRUD operations for the **Composition** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compositions
    * const compositions = await prisma.composition.findMany()
    * ```
    */
  get composition(): Prisma.CompositionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recording`: Exposes CRUD operations for the **Recording** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recordings
    * const recordings = await prisma.recording.findMany()
    * ```
    */
  get recording(): Prisma.RecordingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.track`: Exposes CRUD operations for the **Track** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tracks
    * const tracks = await prisma.track.findMany()
    * ```
    */
  get track(): Prisma.TrackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **Inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.InventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sale`: Exposes CRUD operations for the **Sale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sales
    * const sales = await prisma.sale.findMany()
    * ```
    */
  get sale(): Prisma.SaleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.prismaMigrations`: Exposes CRUD operations for the **PrismaMigrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrismaMigrations
    * const prismaMigrations = await prisma.prismaMigrations.findMany()
    * ```
    */
  get prismaMigrations(): Prisma.PrismaMigrationsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Musician: 'Musician',
    Ensemble: 'Ensemble',
    EnsembleMember: 'EnsembleMember',
    Composition: 'Composition',
    Recording: 'Recording',
    Album: 'Album',
    Track: 'Track',
    Inventory: 'Inventory',
    Sale: 'Sale',
    PrismaMigrations: 'PrismaMigrations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "musician" | "ensemble" | "ensembleMember" | "composition" | "recording" | "album" | "track" | "inventory" | "sale" | "prismaMigrations"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Musician: {
        payload: Prisma.$MusicianPayload<ExtArgs>
        fields: Prisma.MusicianFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MusicianFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MusicianFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          findFirst: {
            args: Prisma.MusicianFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MusicianFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          findMany: {
            args: Prisma.MusicianFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>[]
          }
          create: {
            args: Prisma.MusicianCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          createMany: {
            args: Prisma.MusicianCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MusicianCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>[]
          }
          delete: {
            args: Prisma.MusicianDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          update: {
            args: Prisma.MusicianUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          deleteMany: {
            args: Prisma.MusicianDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MusicianUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MusicianUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>[]
          }
          upsert: {
            args: Prisma.MusicianUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MusicianPayload>
          }
          aggregate: {
            args: Prisma.MusicianAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMusician>
          }
          groupBy: {
            args: Prisma.MusicianGroupByArgs<ExtArgs>
            result: $Utils.Optional<MusicianGroupByOutputType>[]
          }
          count: {
            args: Prisma.MusicianCountArgs<ExtArgs>
            result: $Utils.Optional<MusicianCountAggregateOutputType> | number
          }
        }
      }
      Ensemble: {
        payload: Prisma.$EnsemblePayload<ExtArgs>
        fields: Prisma.EnsembleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnsembleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnsembleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          findFirst: {
            args: Prisma.EnsembleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnsembleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          findMany: {
            args: Prisma.EnsembleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>[]
          }
          create: {
            args: Prisma.EnsembleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          createMany: {
            args: Prisma.EnsembleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnsembleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>[]
          }
          delete: {
            args: Prisma.EnsembleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          update: {
            args: Prisma.EnsembleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          deleteMany: {
            args: Prisma.EnsembleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnsembleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EnsembleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>[]
          }
          upsert: {
            args: Prisma.EnsembleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsemblePayload>
          }
          aggregate: {
            args: Prisma.EnsembleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnsemble>
          }
          groupBy: {
            args: Prisma.EnsembleGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnsembleGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnsembleCountArgs<ExtArgs>
            result: $Utils.Optional<EnsembleCountAggregateOutputType> | number
          }
        }
      }
      EnsembleMember: {
        payload: Prisma.$EnsembleMemberPayload<ExtArgs>
        fields: Prisma.EnsembleMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnsembleMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnsembleMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          findFirst: {
            args: Prisma.EnsembleMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnsembleMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          findMany: {
            args: Prisma.EnsembleMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>[]
          }
          create: {
            args: Prisma.EnsembleMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          createMany: {
            args: Prisma.EnsembleMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnsembleMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>[]
          }
          delete: {
            args: Prisma.EnsembleMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          update: {
            args: Prisma.EnsembleMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          deleteMany: {
            args: Prisma.EnsembleMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnsembleMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EnsembleMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>[]
          }
          upsert: {
            args: Prisma.EnsembleMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnsembleMemberPayload>
          }
          aggregate: {
            args: Prisma.EnsembleMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnsembleMember>
          }
          groupBy: {
            args: Prisma.EnsembleMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnsembleMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnsembleMemberCountArgs<ExtArgs>
            result: $Utils.Optional<EnsembleMemberCountAggregateOutputType> | number
          }
        }
      }
      Composition: {
        payload: Prisma.$CompositionPayload<ExtArgs>
        fields: Prisma.CompositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          findFirst: {
            args: Prisma.CompositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          findMany: {
            args: Prisma.CompositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>[]
          }
          create: {
            args: Prisma.CompositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          createMany: {
            args: Prisma.CompositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>[]
          }
          delete: {
            args: Prisma.CompositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          update: {
            args: Prisma.CompositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          deleteMany: {
            args: Prisma.CompositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompositionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>[]
          }
          upsert: {
            args: Prisma.CompositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompositionPayload>
          }
          aggregate: {
            args: Prisma.CompositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComposition>
          }
          groupBy: {
            args: Prisma.CompositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompositionCountArgs<ExtArgs>
            result: $Utils.Optional<CompositionCountAggregateOutputType> | number
          }
        }
      }
      Recording: {
        payload: Prisma.$RecordingPayload<ExtArgs>
        fields: Prisma.RecordingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecordingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecordingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          findFirst: {
            args: Prisma.RecordingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecordingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          findMany: {
            args: Prisma.RecordingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>[]
          }
          create: {
            args: Prisma.RecordingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          createMany: {
            args: Prisma.RecordingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecordingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>[]
          }
          delete: {
            args: Prisma.RecordingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          update: {
            args: Prisma.RecordingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          deleteMany: {
            args: Prisma.RecordingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecordingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecordingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>[]
          }
          upsert: {
            args: Prisma.RecordingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecordingPayload>
          }
          aggregate: {
            args: Prisma.RecordingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecording>
          }
          groupBy: {
            args: Prisma.RecordingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecordingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecordingCountArgs<ExtArgs>
            result: $Utils.Optional<RecordingCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlbumUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      Track: {
        payload: Prisma.$TrackPayload<ExtArgs>
        fields: Prisma.TrackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findFirst: {
            args: Prisma.TrackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          findMany: {
            args: Prisma.TrackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          create: {
            args: Prisma.TrackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          createMany: {
            args: Prisma.TrackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          delete: {
            args: Prisma.TrackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          update: {
            args: Prisma.TrackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          deleteMany: {
            args: Prisma.TrackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>[]
          }
          upsert: {
            args: Prisma.TrackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrackPayload>
          }
          aggregate: {
            args: Prisma.TrackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrack>
          }
          groupBy: {
            args: Prisma.TrackGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrackGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrackCountArgs<ExtArgs>
            result: $Utils.Optional<TrackCountAggregateOutputType> | number
          }
        }
      }
      Inventory: {
        payload: Prisma.$InventoryPayload<ExtArgs>
        fields: Prisma.InventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findFirst: {
            args: Prisma.InventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          findMany: {
            args: Prisma.InventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          create: {
            args: Prisma.InventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          createMany: {
            args: Prisma.InventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          delete: {
            args: Prisma.InventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          update: {
            args: Prisma.InventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>[]
          }
          upsert: {
            args: Prisma.InventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.InventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      Sale: {
        payload: Prisma.$SalePayload<ExtArgs>
        fields: Prisma.SaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findFirst: {
            args: Prisma.SaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          findMany: {
            args: Prisma.SaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          create: {
            args: Prisma.SaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          createMany: {
            args: Prisma.SaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          delete: {
            args: Prisma.SaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          update: {
            args: Prisma.SaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          deleteMany: {
            args: Prisma.SaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SaleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>[]
          }
          upsert: {
            args: Prisma.SaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SalePayload>
          }
          aggregate: {
            args: Prisma.SaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSale>
          }
          groupBy: {
            args: Prisma.SaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SaleCountArgs<ExtArgs>
            result: $Utils.Optional<SaleCountAggregateOutputType> | number
          }
        }
      }
      PrismaMigrations: {
        payload: Prisma.$PrismaMigrationsPayload<ExtArgs>
        fields: Prisma.PrismaMigrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrismaMigrationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrismaMigrationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          findFirst: {
            args: Prisma.PrismaMigrationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrismaMigrationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          findMany: {
            args: Prisma.PrismaMigrationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>[]
          }
          create: {
            args: Prisma.PrismaMigrationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          createMany: {
            args: Prisma.PrismaMigrationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrismaMigrationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>[]
          }
          delete: {
            args: Prisma.PrismaMigrationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          update: {
            args: Prisma.PrismaMigrationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          deleteMany: {
            args: Prisma.PrismaMigrationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrismaMigrationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrismaMigrationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>[]
          }
          upsert: {
            args: Prisma.PrismaMigrationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrismaMigrationsPayload>
          }
          aggregate: {
            args: Prisma.PrismaMigrationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrismaMigrations>
          }
          groupBy: {
            args: Prisma.PrismaMigrationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrismaMigrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrismaMigrationsCountArgs<ExtArgs>
            result: $Utils.Optional<PrismaMigrationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    musician?: MusicianOmit
    ensemble?: EnsembleOmit
    ensembleMember?: EnsembleMemberOmit
    composition?: CompositionOmit
    recording?: RecordingOmit
    album?: AlbumOmit
    track?: TrackOmit
    inventory?: InventoryOmit
    sale?: SaleOmit
    prismaMigrations?: PrismaMigrationsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MusicianCountOutputType
   */

  export type MusicianCountOutputType = {
    ensembles: number
    soloAlbums: number
  }

  export type MusicianCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ensembles?: boolean | MusicianCountOutputTypeCountEnsemblesArgs
    soloAlbums?: boolean | MusicianCountOutputTypeCountSoloAlbumsArgs
  }

  // Custom InputTypes
  /**
   * MusicianCountOutputType without action
   */
  export type MusicianCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MusicianCountOutputType
     */
    select?: MusicianCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MusicianCountOutputType without action
   */
  export type MusicianCountOutputTypeCountEnsemblesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnsembleMemberWhereInput
  }

  /**
   * MusicianCountOutputType without action
   */
  export type MusicianCountOutputTypeCountSoloAlbumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
  }


  /**
   * Count Type EnsembleCountOutputType
   */

  export type EnsembleCountOutputType = {
    members: number
    albums: number
  }

  export type EnsembleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | EnsembleCountOutputTypeCountMembersArgs
    albums?: boolean | EnsembleCountOutputTypeCountAlbumsArgs
  }

  // Custom InputTypes
  /**
   * EnsembleCountOutputType without action
   */
  export type EnsembleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleCountOutputType
     */
    select?: EnsembleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EnsembleCountOutputType without action
   */
  export type EnsembleCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnsembleMemberWhereInput
  }

  /**
   * EnsembleCountOutputType without action
   */
  export type EnsembleCountOutputTypeCountAlbumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
  }


  /**
   * Count Type CompositionCountOutputType
   */

  export type CompositionCountOutputType = {
    recordings: number
  }

  export type CompositionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recordings?: boolean | CompositionCountOutputTypeCountRecordingsArgs
  }

  // Custom InputTypes
  /**
   * CompositionCountOutputType without action
   */
  export type CompositionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompositionCountOutputType
     */
    select?: CompositionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompositionCountOutputType without action
   */
  export type CompositionCountOutputTypeCountRecordingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordingWhereInput
  }


  /**
   * Count Type RecordingCountOutputType
   */

  export type RecordingCountOutputType = {
    albums: number
  }

  export type RecordingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    albums?: boolean | RecordingCountOutputTypeCountAlbumsArgs
  }

  // Custom InputTypes
  /**
   * RecordingCountOutputType without action
   */
  export type RecordingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecordingCountOutputType
     */
    select?: RecordingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RecordingCountOutputType without action
   */
  export type RecordingCountOutputTypeCountAlbumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
  }


  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    tracks: number
    inventories: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tracks?: boolean | AlbumCountOutputTypeCountTracksArgs
    inventories?: boolean | AlbumCountOutputTypeCountInventoriesArgs
  }

  // Custom InputTypes
  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountTracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountInventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    sales: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sales?: boolean | InventoryCountOutputTypeCountSalesArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountSalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Musician
   */

  export type AggregateMusician = {
    _count: MusicianCountAggregateOutputType | null
    _avg: MusicianAvgAggregateOutputType | null
    _sum: MusicianSumAggregateOutputType | null
    _min: MusicianMinAggregateOutputType | null
    _max: MusicianMaxAggregateOutputType | null
  }

  export type MusicianAvgAggregateOutputType = {
    id: number | null
  }

  export type MusicianSumAggregateOutputType = {
    id: number | null
  }

  export type MusicianMinAggregateOutputType = {
    id: number | null
    name: string | null
    birthDate: Date | null
    country: string | null
    bio: string | null
  }

  export type MusicianMaxAggregateOutputType = {
    id: number | null
    name: string | null
    birthDate: Date | null
    country: string | null
    bio: string | null
  }

  export type MusicianCountAggregateOutputType = {
    id: number
    name: number
    birthDate: number
    country: number
    bio: number
    roles: number
    _all: number
  }


  export type MusicianAvgAggregateInputType = {
    id?: true
  }

  export type MusicianSumAggregateInputType = {
    id?: true
  }

  export type MusicianMinAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    country?: true
    bio?: true
  }

  export type MusicianMaxAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    country?: true
    bio?: true
  }

  export type MusicianCountAggregateInputType = {
    id?: true
    name?: true
    birthDate?: true
    country?: true
    bio?: true
    roles?: true
    _all?: true
  }

  export type MusicianAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Musician to aggregate.
     */
    where?: MusicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicians to fetch.
     */
    orderBy?: MusicianOrderByWithRelationInput | MusicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MusicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Musicians
    **/
    _count?: true | MusicianCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MusicianAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MusicianSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MusicianMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MusicianMaxAggregateInputType
  }

  export type GetMusicianAggregateType<T extends MusicianAggregateArgs> = {
        [P in keyof T & keyof AggregateMusician]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMusician[P]>
      : GetScalarType<T[P], AggregateMusician[P]>
  }




  export type MusicianGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MusicianWhereInput
    orderBy?: MusicianOrderByWithAggregationInput | MusicianOrderByWithAggregationInput[]
    by: MusicianScalarFieldEnum[] | MusicianScalarFieldEnum
    having?: MusicianScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MusicianCountAggregateInputType | true
    _avg?: MusicianAvgAggregateInputType
    _sum?: MusicianSumAggregateInputType
    _min?: MusicianMinAggregateInputType
    _max?: MusicianMaxAggregateInputType
  }

  export type MusicianGroupByOutputType = {
    id: number
    name: string
    birthDate: Date | null
    country: string | null
    bio: string | null
    roles: $Enums.Role[]
    _count: MusicianCountAggregateOutputType | null
    _avg: MusicianAvgAggregateOutputType | null
    _sum: MusicianSumAggregateOutputType | null
    _min: MusicianMinAggregateOutputType | null
    _max: MusicianMaxAggregateOutputType | null
  }

  type GetMusicianGroupByPayload<T extends MusicianGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MusicianGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MusicianGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MusicianGroupByOutputType[P]>
            : GetScalarType<T[P], MusicianGroupByOutputType[P]>
        }
      >
    >


  export type MusicianSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthDate?: boolean
    country?: boolean
    bio?: boolean
    roles?: boolean
    ensembles?: boolean | Musician$ensemblesArgs<ExtArgs>
    soloAlbums?: boolean | Musician$soloAlbumsArgs<ExtArgs>
    _count?: boolean | MusicianCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["musician"]>

  export type MusicianSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthDate?: boolean
    country?: boolean
    bio?: boolean
    roles?: boolean
  }, ExtArgs["result"]["musician"]>

  export type MusicianSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthDate?: boolean
    country?: boolean
    bio?: boolean
    roles?: boolean
  }, ExtArgs["result"]["musician"]>

  export type MusicianSelectScalar = {
    id?: boolean
    name?: boolean
    birthDate?: boolean
    country?: boolean
    bio?: boolean
    roles?: boolean
  }

  export type MusicianOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "birthDate" | "country" | "bio" | "roles", ExtArgs["result"]["musician"]>
  export type MusicianInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ensembles?: boolean | Musician$ensemblesArgs<ExtArgs>
    soloAlbums?: boolean | Musician$soloAlbumsArgs<ExtArgs>
    _count?: boolean | MusicianCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MusicianIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MusicianIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MusicianPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Musician"
    objects: {
      ensembles: Prisma.$EnsembleMemberPayload<ExtArgs>[]
      soloAlbums: Prisma.$AlbumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      birthDate: Date | null
      country: string | null
      bio: string | null
      roles: $Enums.Role[]
    }, ExtArgs["result"]["musician"]>
    composites: {}
  }

  type MusicianGetPayload<S extends boolean | null | undefined | MusicianDefaultArgs> = $Result.GetResult<Prisma.$MusicianPayload, S>

  type MusicianCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MusicianFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MusicianCountAggregateInputType | true
    }

  export interface MusicianDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Musician'], meta: { name: 'Musician' } }
    /**
     * Find zero or one Musician that matches the filter.
     * @param {MusicianFindUniqueArgs} args - Arguments to find a Musician
     * @example
     * // Get one Musician
     * const musician = await prisma.musician.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MusicianFindUniqueArgs>(args: SelectSubset<T, MusicianFindUniqueArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Musician that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MusicianFindUniqueOrThrowArgs} args - Arguments to find a Musician
     * @example
     * // Get one Musician
     * const musician = await prisma.musician.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MusicianFindUniqueOrThrowArgs>(args: SelectSubset<T, MusicianFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Musician that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianFindFirstArgs} args - Arguments to find a Musician
     * @example
     * // Get one Musician
     * const musician = await prisma.musician.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MusicianFindFirstArgs>(args?: SelectSubset<T, MusicianFindFirstArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Musician that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianFindFirstOrThrowArgs} args - Arguments to find a Musician
     * @example
     * // Get one Musician
     * const musician = await prisma.musician.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MusicianFindFirstOrThrowArgs>(args?: SelectSubset<T, MusicianFindFirstOrThrowArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Musicians that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Musicians
     * const musicians = await prisma.musician.findMany()
     * 
     * // Get first 10 Musicians
     * const musicians = await prisma.musician.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const musicianWithIdOnly = await prisma.musician.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MusicianFindManyArgs>(args?: SelectSubset<T, MusicianFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Musician.
     * @param {MusicianCreateArgs} args - Arguments to create a Musician.
     * @example
     * // Create one Musician
     * const Musician = await prisma.musician.create({
     *   data: {
     *     // ... data to create a Musician
     *   }
     * })
     * 
     */
    create<T extends MusicianCreateArgs>(args: SelectSubset<T, MusicianCreateArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Musicians.
     * @param {MusicianCreateManyArgs} args - Arguments to create many Musicians.
     * @example
     * // Create many Musicians
     * const musician = await prisma.musician.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MusicianCreateManyArgs>(args?: SelectSubset<T, MusicianCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Musicians and returns the data saved in the database.
     * @param {MusicianCreateManyAndReturnArgs} args - Arguments to create many Musicians.
     * @example
     * // Create many Musicians
     * const musician = await prisma.musician.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Musicians and only return the `id`
     * const musicianWithIdOnly = await prisma.musician.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MusicianCreateManyAndReturnArgs>(args?: SelectSubset<T, MusicianCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Musician.
     * @param {MusicianDeleteArgs} args - Arguments to delete one Musician.
     * @example
     * // Delete one Musician
     * const Musician = await prisma.musician.delete({
     *   where: {
     *     // ... filter to delete one Musician
     *   }
     * })
     * 
     */
    delete<T extends MusicianDeleteArgs>(args: SelectSubset<T, MusicianDeleteArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Musician.
     * @param {MusicianUpdateArgs} args - Arguments to update one Musician.
     * @example
     * // Update one Musician
     * const musician = await prisma.musician.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MusicianUpdateArgs>(args: SelectSubset<T, MusicianUpdateArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Musicians.
     * @param {MusicianDeleteManyArgs} args - Arguments to filter Musicians to delete.
     * @example
     * // Delete a few Musicians
     * const { count } = await prisma.musician.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MusicianDeleteManyArgs>(args?: SelectSubset<T, MusicianDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musicians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Musicians
     * const musician = await prisma.musician.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MusicianUpdateManyArgs>(args: SelectSubset<T, MusicianUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Musicians and returns the data updated in the database.
     * @param {MusicianUpdateManyAndReturnArgs} args - Arguments to update many Musicians.
     * @example
     * // Update many Musicians
     * const musician = await prisma.musician.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Musicians and only return the `id`
     * const musicianWithIdOnly = await prisma.musician.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MusicianUpdateManyAndReturnArgs>(args: SelectSubset<T, MusicianUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Musician.
     * @param {MusicianUpsertArgs} args - Arguments to update or create a Musician.
     * @example
     * // Update or create a Musician
     * const musician = await prisma.musician.upsert({
     *   create: {
     *     // ... data to create a Musician
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Musician we want to update
     *   }
     * })
     */
    upsert<T extends MusicianUpsertArgs>(args: SelectSubset<T, MusicianUpsertArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Musicians.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianCountArgs} args - Arguments to filter Musicians to count.
     * @example
     * // Count the number of Musicians
     * const count = await prisma.musician.count({
     *   where: {
     *     // ... the filter for the Musicians we want to count
     *   }
     * })
    **/
    count<T extends MusicianCountArgs>(
      args?: Subset<T, MusicianCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MusicianCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Musician.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MusicianAggregateArgs>(args: Subset<T, MusicianAggregateArgs>): Prisma.PrismaPromise<GetMusicianAggregateType<T>>

    /**
     * Group by Musician.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MusicianGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MusicianGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MusicianGroupByArgs['orderBy'] }
        : { orderBy?: MusicianGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MusicianGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMusicianGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Musician model
   */
  readonly fields: MusicianFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Musician.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MusicianClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ensembles<T extends Musician$ensemblesArgs<ExtArgs> = {}>(args?: Subset<T, Musician$ensemblesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    soloAlbums<T extends Musician$soloAlbumsArgs<ExtArgs> = {}>(args?: Subset<T, Musician$soloAlbumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Musician model
   */
  interface MusicianFieldRefs {
    readonly id: FieldRef<"Musician", 'Int'>
    readonly name: FieldRef<"Musician", 'String'>
    readonly birthDate: FieldRef<"Musician", 'DateTime'>
    readonly country: FieldRef<"Musician", 'String'>
    readonly bio: FieldRef<"Musician", 'String'>
    readonly roles: FieldRef<"Musician", 'Role[]'>
  }
    

  // Custom InputTypes
  /**
   * Musician findUnique
   */
  export type MusicianFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter, which Musician to fetch.
     */
    where: MusicianWhereUniqueInput
  }

  /**
   * Musician findUniqueOrThrow
   */
  export type MusicianFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter, which Musician to fetch.
     */
    where: MusicianWhereUniqueInput
  }

  /**
   * Musician findFirst
   */
  export type MusicianFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter, which Musician to fetch.
     */
    where?: MusicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicians to fetch.
     */
    orderBy?: MusicianOrderByWithRelationInput | MusicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Musicians.
     */
    cursor?: MusicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Musicians.
     */
    distinct?: MusicianScalarFieldEnum | MusicianScalarFieldEnum[]
  }

  /**
   * Musician findFirstOrThrow
   */
  export type MusicianFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter, which Musician to fetch.
     */
    where?: MusicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicians to fetch.
     */
    orderBy?: MusicianOrderByWithRelationInput | MusicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Musicians.
     */
    cursor?: MusicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicians.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Musicians.
     */
    distinct?: MusicianScalarFieldEnum | MusicianScalarFieldEnum[]
  }

  /**
   * Musician findMany
   */
  export type MusicianFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter, which Musicians to fetch.
     */
    where?: MusicianWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Musicians to fetch.
     */
    orderBy?: MusicianOrderByWithRelationInput | MusicianOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Musicians.
     */
    cursor?: MusicianWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Musicians from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Musicians.
     */
    skip?: number
    distinct?: MusicianScalarFieldEnum | MusicianScalarFieldEnum[]
  }

  /**
   * Musician create
   */
  export type MusicianCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * The data needed to create a Musician.
     */
    data: XOR<MusicianCreateInput, MusicianUncheckedCreateInput>
  }

  /**
   * Musician createMany
   */
  export type MusicianCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Musicians.
     */
    data: MusicianCreateManyInput | MusicianCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Musician createManyAndReturn
   */
  export type MusicianCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * The data used to create many Musicians.
     */
    data: MusicianCreateManyInput | MusicianCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Musician update
   */
  export type MusicianUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * The data needed to update a Musician.
     */
    data: XOR<MusicianUpdateInput, MusicianUncheckedUpdateInput>
    /**
     * Choose, which Musician to update.
     */
    where: MusicianWhereUniqueInput
  }

  /**
   * Musician updateMany
   */
  export type MusicianUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Musicians.
     */
    data: XOR<MusicianUpdateManyMutationInput, MusicianUncheckedUpdateManyInput>
    /**
     * Filter which Musicians to update
     */
    where?: MusicianWhereInput
    /**
     * Limit how many Musicians to update.
     */
    limit?: number
  }

  /**
   * Musician updateManyAndReturn
   */
  export type MusicianUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * The data used to update Musicians.
     */
    data: XOR<MusicianUpdateManyMutationInput, MusicianUncheckedUpdateManyInput>
    /**
     * Filter which Musicians to update
     */
    where?: MusicianWhereInput
    /**
     * Limit how many Musicians to update.
     */
    limit?: number
  }

  /**
   * Musician upsert
   */
  export type MusicianUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * The filter to search for the Musician to update in case it exists.
     */
    where: MusicianWhereUniqueInput
    /**
     * In case the Musician found by the `where` argument doesn't exist, create a new Musician with this data.
     */
    create: XOR<MusicianCreateInput, MusicianUncheckedCreateInput>
    /**
     * In case the Musician was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MusicianUpdateInput, MusicianUncheckedUpdateInput>
  }

  /**
   * Musician delete
   */
  export type MusicianDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    /**
     * Filter which Musician to delete.
     */
    where: MusicianWhereUniqueInput
  }

  /**
   * Musician deleteMany
   */
  export type MusicianDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Musicians to delete
     */
    where?: MusicianWhereInput
    /**
     * Limit how many Musicians to delete.
     */
    limit?: number
  }

  /**
   * Musician.ensembles
   */
  export type Musician$ensemblesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    where?: EnsembleMemberWhereInput
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    cursor?: EnsembleMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnsembleMemberScalarFieldEnum | EnsembleMemberScalarFieldEnum[]
  }

  /**
   * Musician.soloAlbums
   */
  export type Musician$soloAlbumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Musician without action
   */
  export type MusicianDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
  }


  /**
   * Model Ensemble
   */

  export type AggregateEnsemble = {
    _count: EnsembleCountAggregateOutputType | null
    _avg: EnsembleAvgAggregateOutputType | null
    _sum: EnsembleSumAggregateOutputType | null
    _min: EnsembleMinAggregateOutputType | null
    _max: EnsembleMaxAggregateOutputType | null
  }

  export type EnsembleAvgAggregateOutputType = {
    id: number | null
  }

  export type EnsembleSumAggregateOutputType = {
    id: number | null
  }

  export type EnsembleMinAggregateOutputType = {
    id: number | null
    name: string | null
    formationDate: Date | null
    dissolutionDate: Date | null
    type: string | null
  }

  export type EnsembleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    formationDate: Date | null
    dissolutionDate: Date | null
    type: string | null
  }

  export type EnsembleCountAggregateOutputType = {
    id: number
    name: number
    formationDate: number
    dissolutionDate: number
    type: number
    _all: number
  }


  export type EnsembleAvgAggregateInputType = {
    id?: true
  }

  export type EnsembleSumAggregateInputType = {
    id?: true
  }

  export type EnsembleMinAggregateInputType = {
    id?: true
    name?: true
    formationDate?: true
    dissolutionDate?: true
    type?: true
  }

  export type EnsembleMaxAggregateInputType = {
    id?: true
    name?: true
    formationDate?: true
    dissolutionDate?: true
    type?: true
  }

  export type EnsembleCountAggregateInputType = {
    id?: true
    name?: true
    formationDate?: true
    dissolutionDate?: true
    type?: true
    _all?: true
  }

  export type EnsembleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ensemble to aggregate.
     */
    where?: EnsembleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ensembles to fetch.
     */
    orderBy?: EnsembleOrderByWithRelationInput | EnsembleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnsembleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ensembles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ensembles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ensembles
    **/
    _count?: true | EnsembleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnsembleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnsembleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnsembleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnsembleMaxAggregateInputType
  }

  export type GetEnsembleAggregateType<T extends EnsembleAggregateArgs> = {
        [P in keyof T & keyof AggregateEnsemble]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnsemble[P]>
      : GetScalarType<T[P], AggregateEnsemble[P]>
  }




  export type EnsembleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnsembleWhereInput
    orderBy?: EnsembleOrderByWithAggregationInput | EnsembleOrderByWithAggregationInput[]
    by: EnsembleScalarFieldEnum[] | EnsembleScalarFieldEnum
    having?: EnsembleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnsembleCountAggregateInputType | true
    _avg?: EnsembleAvgAggregateInputType
    _sum?: EnsembleSumAggregateInputType
    _min?: EnsembleMinAggregateInputType
    _max?: EnsembleMaxAggregateInputType
  }

  export type EnsembleGroupByOutputType = {
    id: number
    name: string
    formationDate: Date
    dissolutionDate: Date | null
    type: string
    _count: EnsembleCountAggregateOutputType | null
    _avg: EnsembleAvgAggregateOutputType | null
    _sum: EnsembleSumAggregateOutputType | null
    _min: EnsembleMinAggregateOutputType | null
    _max: EnsembleMaxAggregateOutputType | null
  }

  type GetEnsembleGroupByPayload<T extends EnsembleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnsembleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnsembleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnsembleGroupByOutputType[P]>
            : GetScalarType<T[P], EnsembleGroupByOutputType[P]>
        }
      >
    >


  export type EnsembleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    formationDate?: boolean
    dissolutionDate?: boolean
    type?: boolean
    members?: boolean | Ensemble$membersArgs<ExtArgs>
    albums?: boolean | Ensemble$albumsArgs<ExtArgs>
    _count?: boolean | EnsembleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ensemble"]>

  export type EnsembleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    formationDate?: boolean
    dissolutionDate?: boolean
    type?: boolean
  }, ExtArgs["result"]["ensemble"]>

  export type EnsembleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    formationDate?: boolean
    dissolutionDate?: boolean
    type?: boolean
  }, ExtArgs["result"]["ensemble"]>

  export type EnsembleSelectScalar = {
    id?: boolean
    name?: boolean
    formationDate?: boolean
    dissolutionDate?: boolean
    type?: boolean
  }

  export type EnsembleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "formationDate" | "dissolutionDate" | "type", ExtArgs["result"]["ensemble"]>
  export type EnsembleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Ensemble$membersArgs<ExtArgs>
    albums?: boolean | Ensemble$albumsArgs<ExtArgs>
    _count?: boolean | EnsembleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EnsembleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EnsembleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EnsemblePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ensemble"
    objects: {
      members: Prisma.$EnsembleMemberPayload<ExtArgs>[]
      albums: Prisma.$AlbumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      formationDate: Date
      dissolutionDate: Date | null
      type: string
    }, ExtArgs["result"]["ensemble"]>
    composites: {}
  }

  type EnsembleGetPayload<S extends boolean | null | undefined | EnsembleDefaultArgs> = $Result.GetResult<Prisma.$EnsemblePayload, S>

  type EnsembleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnsembleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnsembleCountAggregateInputType | true
    }

  export interface EnsembleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ensemble'], meta: { name: 'Ensemble' } }
    /**
     * Find zero or one Ensemble that matches the filter.
     * @param {EnsembleFindUniqueArgs} args - Arguments to find a Ensemble
     * @example
     * // Get one Ensemble
     * const ensemble = await prisma.ensemble.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnsembleFindUniqueArgs>(args: SelectSubset<T, EnsembleFindUniqueArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Ensemble that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnsembleFindUniqueOrThrowArgs} args - Arguments to find a Ensemble
     * @example
     * // Get one Ensemble
     * const ensemble = await prisma.ensemble.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnsembleFindUniqueOrThrowArgs>(args: SelectSubset<T, EnsembleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ensemble that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleFindFirstArgs} args - Arguments to find a Ensemble
     * @example
     * // Get one Ensemble
     * const ensemble = await prisma.ensemble.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnsembleFindFirstArgs>(args?: SelectSubset<T, EnsembleFindFirstArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Ensemble that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleFindFirstOrThrowArgs} args - Arguments to find a Ensemble
     * @example
     * // Get one Ensemble
     * const ensemble = await prisma.ensemble.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnsembleFindFirstOrThrowArgs>(args?: SelectSubset<T, EnsembleFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Ensembles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ensembles
     * const ensembles = await prisma.ensemble.findMany()
     * 
     * // Get first 10 Ensembles
     * const ensembles = await prisma.ensemble.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ensembleWithIdOnly = await prisma.ensemble.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnsembleFindManyArgs>(args?: SelectSubset<T, EnsembleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Ensemble.
     * @param {EnsembleCreateArgs} args - Arguments to create a Ensemble.
     * @example
     * // Create one Ensemble
     * const Ensemble = await prisma.ensemble.create({
     *   data: {
     *     // ... data to create a Ensemble
     *   }
     * })
     * 
     */
    create<T extends EnsembleCreateArgs>(args: SelectSubset<T, EnsembleCreateArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Ensembles.
     * @param {EnsembleCreateManyArgs} args - Arguments to create many Ensembles.
     * @example
     * // Create many Ensembles
     * const ensemble = await prisma.ensemble.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnsembleCreateManyArgs>(args?: SelectSubset<T, EnsembleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ensembles and returns the data saved in the database.
     * @param {EnsembleCreateManyAndReturnArgs} args - Arguments to create many Ensembles.
     * @example
     * // Create many Ensembles
     * const ensemble = await prisma.ensemble.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ensembles and only return the `id`
     * const ensembleWithIdOnly = await prisma.ensemble.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnsembleCreateManyAndReturnArgs>(args?: SelectSubset<T, EnsembleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Ensemble.
     * @param {EnsembleDeleteArgs} args - Arguments to delete one Ensemble.
     * @example
     * // Delete one Ensemble
     * const Ensemble = await prisma.ensemble.delete({
     *   where: {
     *     // ... filter to delete one Ensemble
     *   }
     * })
     * 
     */
    delete<T extends EnsembleDeleteArgs>(args: SelectSubset<T, EnsembleDeleteArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Ensemble.
     * @param {EnsembleUpdateArgs} args - Arguments to update one Ensemble.
     * @example
     * // Update one Ensemble
     * const ensemble = await prisma.ensemble.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnsembleUpdateArgs>(args: SelectSubset<T, EnsembleUpdateArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Ensembles.
     * @param {EnsembleDeleteManyArgs} args - Arguments to filter Ensembles to delete.
     * @example
     * // Delete a few Ensembles
     * const { count } = await prisma.ensemble.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnsembleDeleteManyArgs>(args?: SelectSubset<T, EnsembleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ensembles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ensembles
     * const ensemble = await prisma.ensemble.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnsembleUpdateManyArgs>(args: SelectSubset<T, EnsembleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ensembles and returns the data updated in the database.
     * @param {EnsembleUpdateManyAndReturnArgs} args - Arguments to update many Ensembles.
     * @example
     * // Update many Ensembles
     * const ensemble = await prisma.ensemble.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ensembles and only return the `id`
     * const ensembleWithIdOnly = await prisma.ensemble.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EnsembleUpdateManyAndReturnArgs>(args: SelectSubset<T, EnsembleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Ensemble.
     * @param {EnsembleUpsertArgs} args - Arguments to update or create a Ensemble.
     * @example
     * // Update or create a Ensemble
     * const ensemble = await prisma.ensemble.upsert({
     *   create: {
     *     // ... data to create a Ensemble
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ensemble we want to update
     *   }
     * })
     */
    upsert<T extends EnsembleUpsertArgs>(args: SelectSubset<T, EnsembleUpsertArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Ensembles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleCountArgs} args - Arguments to filter Ensembles to count.
     * @example
     * // Count the number of Ensembles
     * const count = await prisma.ensemble.count({
     *   where: {
     *     // ... the filter for the Ensembles we want to count
     *   }
     * })
    **/
    count<T extends EnsembleCountArgs>(
      args?: Subset<T, EnsembleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnsembleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ensemble.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnsembleAggregateArgs>(args: Subset<T, EnsembleAggregateArgs>): Prisma.PrismaPromise<GetEnsembleAggregateType<T>>

    /**
     * Group by Ensemble.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnsembleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnsembleGroupByArgs['orderBy'] }
        : { orderBy?: EnsembleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnsembleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnsembleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ensemble model
   */
  readonly fields: EnsembleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ensemble.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnsembleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Ensemble$membersArgs<ExtArgs> = {}>(args?: Subset<T, Ensemble$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    albums<T extends Ensemble$albumsArgs<ExtArgs> = {}>(args?: Subset<T, Ensemble$albumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ensemble model
   */
  interface EnsembleFieldRefs {
    readonly id: FieldRef<"Ensemble", 'Int'>
    readonly name: FieldRef<"Ensemble", 'String'>
    readonly formationDate: FieldRef<"Ensemble", 'DateTime'>
    readonly dissolutionDate: FieldRef<"Ensemble", 'DateTime'>
    readonly type: FieldRef<"Ensemble", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ensemble findUnique
   */
  export type EnsembleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter, which Ensemble to fetch.
     */
    where: EnsembleWhereUniqueInput
  }

  /**
   * Ensemble findUniqueOrThrow
   */
  export type EnsembleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter, which Ensemble to fetch.
     */
    where: EnsembleWhereUniqueInput
  }

  /**
   * Ensemble findFirst
   */
  export type EnsembleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter, which Ensemble to fetch.
     */
    where?: EnsembleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ensembles to fetch.
     */
    orderBy?: EnsembleOrderByWithRelationInput | EnsembleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ensembles.
     */
    cursor?: EnsembleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ensembles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ensembles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ensembles.
     */
    distinct?: EnsembleScalarFieldEnum | EnsembleScalarFieldEnum[]
  }

  /**
   * Ensemble findFirstOrThrow
   */
  export type EnsembleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter, which Ensemble to fetch.
     */
    where?: EnsembleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ensembles to fetch.
     */
    orderBy?: EnsembleOrderByWithRelationInput | EnsembleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ensembles.
     */
    cursor?: EnsembleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ensembles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ensembles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ensembles.
     */
    distinct?: EnsembleScalarFieldEnum | EnsembleScalarFieldEnum[]
  }

  /**
   * Ensemble findMany
   */
  export type EnsembleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter, which Ensembles to fetch.
     */
    where?: EnsembleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ensembles to fetch.
     */
    orderBy?: EnsembleOrderByWithRelationInput | EnsembleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ensembles.
     */
    cursor?: EnsembleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ensembles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ensembles.
     */
    skip?: number
    distinct?: EnsembleScalarFieldEnum | EnsembleScalarFieldEnum[]
  }

  /**
   * Ensemble create
   */
  export type EnsembleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * The data needed to create a Ensemble.
     */
    data: XOR<EnsembleCreateInput, EnsembleUncheckedCreateInput>
  }

  /**
   * Ensemble createMany
   */
  export type EnsembleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ensembles.
     */
    data: EnsembleCreateManyInput | EnsembleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ensemble createManyAndReturn
   */
  export type EnsembleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * The data used to create many Ensembles.
     */
    data: EnsembleCreateManyInput | EnsembleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ensemble update
   */
  export type EnsembleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * The data needed to update a Ensemble.
     */
    data: XOR<EnsembleUpdateInput, EnsembleUncheckedUpdateInput>
    /**
     * Choose, which Ensemble to update.
     */
    where: EnsembleWhereUniqueInput
  }

  /**
   * Ensemble updateMany
   */
  export type EnsembleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ensembles.
     */
    data: XOR<EnsembleUpdateManyMutationInput, EnsembleUncheckedUpdateManyInput>
    /**
     * Filter which Ensembles to update
     */
    where?: EnsembleWhereInput
    /**
     * Limit how many Ensembles to update.
     */
    limit?: number
  }

  /**
   * Ensemble updateManyAndReturn
   */
  export type EnsembleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * The data used to update Ensembles.
     */
    data: XOR<EnsembleUpdateManyMutationInput, EnsembleUncheckedUpdateManyInput>
    /**
     * Filter which Ensembles to update
     */
    where?: EnsembleWhereInput
    /**
     * Limit how many Ensembles to update.
     */
    limit?: number
  }

  /**
   * Ensemble upsert
   */
  export type EnsembleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * The filter to search for the Ensemble to update in case it exists.
     */
    where: EnsembleWhereUniqueInput
    /**
     * In case the Ensemble found by the `where` argument doesn't exist, create a new Ensemble with this data.
     */
    create: XOR<EnsembleCreateInput, EnsembleUncheckedCreateInput>
    /**
     * In case the Ensemble was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnsembleUpdateInput, EnsembleUncheckedUpdateInput>
  }

  /**
   * Ensemble delete
   */
  export type EnsembleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    /**
     * Filter which Ensemble to delete.
     */
    where: EnsembleWhereUniqueInput
  }

  /**
   * Ensemble deleteMany
   */
  export type EnsembleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ensembles to delete
     */
    where?: EnsembleWhereInput
    /**
     * Limit how many Ensembles to delete.
     */
    limit?: number
  }

  /**
   * Ensemble.members
   */
  export type Ensemble$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    where?: EnsembleMemberWhereInput
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    cursor?: EnsembleMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnsembleMemberScalarFieldEnum | EnsembleMemberScalarFieldEnum[]
  }

  /**
   * Ensemble.albums
   */
  export type Ensemble$albumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Ensemble without action
   */
  export type EnsembleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
  }


  /**
   * Model EnsembleMember
   */

  export type AggregateEnsembleMember = {
    _count: EnsembleMemberCountAggregateOutputType | null
    _avg: EnsembleMemberAvgAggregateOutputType | null
    _sum: EnsembleMemberSumAggregateOutputType | null
    _min: EnsembleMemberMinAggregateOutputType | null
    _max: EnsembleMemberMaxAggregateOutputType | null
  }

  export type EnsembleMemberAvgAggregateOutputType = {
    id: number | null
    ensembleId: number | null
    musicianId: number | null
  }

  export type EnsembleMemberSumAggregateOutputType = {
    id: number | null
    ensembleId: number | null
    musicianId: number | null
  }

  export type EnsembleMemberMinAggregateOutputType = {
    id: number | null
    ensembleId: number | null
    musicianId: number | null
    role: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type EnsembleMemberMaxAggregateOutputType = {
    id: number | null
    ensembleId: number | null
    musicianId: number | null
    role: string | null
    startDate: Date | null
    endDate: Date | null
  }

  export type EnsembleMemberCountAggregateOutputType = {
    id: number
    ensembleId: number
    musicianId: number
    role: number
    startDate: number
    endDate: number
    _all: number
  }


  export type EnsembleMemberAvgAggregateInputType = {
    id?: true
    ensembleId?: true
    musicianId?: true
  }

  export type EnsembleMemberSumAggregateInputType = {
    id?: true
    ensembleId?: true
    musicianId?: true
  }

  export type EnsembleMemberMinAggregateInputType = {
    id?: true
    ensembleId?: true
    musicianId?: true
    role?: true
    startDate?: true
    endDate?: true
  }

  export type EnsembleMemberMaxAggregateInputType = {
    id?: true
    ensembleId?: true
    musicianId?: true
    role?: true
    startDate?: true
    endDate?: true
  }

  export type EnsembleMemberCountAggregateInputType = {
    id?: true
    ensembleId?: true
    musicianId?: true
    role?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type EnsembleMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnsembleMember to aggregate.
     */
    where?: EnsembleMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsembleMembers to fetch.
     */
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnsembleMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsembleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsembleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EnsembleMembers
    **/
    _count?: true | EnsembleMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnsembleMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnsembleMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnsembleMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnsembleMemberMaxAggregateInputType
  }

  export type GetEnsembleMemberAggregateType<T extends EnsembleMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateEnsembleMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnsembleMember[P]>
      : GetScalarType<T[P], AggregateEnsembleMember[P]>
  }




  export type EnsembleMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnsembleMemberWhereInput
    orderBy?: EnsembleMemberOrderByWithAggregationInput | EnsembleMemberOrderByWithAggregationInput[]
    by: EnsembleMemberScalarFieldEnum[] | EnsembleMemberScalarFieldEnum
    having?: EnsembleMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnsembleMemberCountAggregateInputType | true
    _avg?: EnsembleMemberAvgAggregateInputType
    _sum?: EnsembleMemberSumAggregateInputType
    _min?: EnsembleMemberMinAggregateInputType
    _max?: EnsembleMemberMaxAggregateInputType
  }

  export type EnsembleMemberGroupByOutputType = {
    id: number
    ensembleId: number
    musicianId: number
    role: string
    startDate: Date
    endDate: Date | null
    _count: EnsembleMemberCountAggregateOutputType | null
    _avg: EnsembleMemberAvgAggregateOutputType | null
    _sum: EnsembleMemberSumAggregateOutputType | null
    _min: EnsembleMemberMinAggregateOutputType | null
    _max: EnsembleMemberMaxAggregateOutputType | null
  }

  type GetEnsembleMemberGroupByPayload<T extends EnsembleMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnsembleMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnsembleMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnsembleMemberGroupByOutputType[P]>
            : GetScalarType<T[P], EnsembleMemberGroupByOutputType[P]>
        }
      >
    >


  export type EnsembleMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ensembleId?: boolean
    musicianId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ensembleMember"]>

  export type EnsembleMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ensembleId?: boolean
    musicianId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ensembleMember"]>

  export type EnsembleMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ensembleId?: boolean
    musicianId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ensembleMember"]>

  export type EnsembleMemberSelectScalar = {
    id?: boolean
    ensembleId?: boolean
    musicianId?: boolean
    role?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type EnsembleMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ensembleId" | "musicianId" | "role" | "startDate" | "endDate", ExtArgs["result"]["ensembleMember"]>
  export type EnsembleMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }
  export type EnsembleMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }
  export type EnsembleMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ensemble?: boolean | EnsembleDefaultArgs<ExtArgs>
    musician?: boolean | MusicianDefaultArgs<ExtArgs>
  }

  export type $EnsembleMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EnsembleMember"
    objects: {
      ensemble: Prisma.$EnsemblePayload<ExtArgs>
      musician: Prisma.$MusicianPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ensembleId: number
      musicianId: number
      role: string
      startDate: Date
      endDate: Date | null
    }, ExtArgs["result"]["ensembleMember"]>
    composites: {}
  }

  type EnsembleMemberGetPayload<S extends boolean | null | undefined | EnsembleMemberDefaultArgs> = $Result.GetResult<Prisma.$EnsembleMemberPayload, S>

  type EnsembleMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EnsembleMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EnsembleMemberCountAggregateInputType | true
    }

  export interface EnsembleMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnsembleMember'], meta: { name: 'EnsembleMember' } }
    /**
     * Find zero or one EnsembleMember that matches the filter.
     * @param {EnsembleMemberFindUniqueArgs} args - Arguments to find a EnsembleMember
     * @example
     * // Get one EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnsembleMemberFindUniqueArgs>(args: SelectSubset<T, EnsembleMemberFindUniqueArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EnsembleMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EnsembleMemberFindUniqueOrThrowArgs} args - Arguments to find a EnsembleMember
     * @example
     * // Get one EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnsembleMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, EnsembleMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EnsembleMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberFindFirstArgs} args - Arguments to find a EnsembleMember
     * @example
     * // Get one EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnsembleMemberFindFirstArgs>(args?: SelectSubset<T, EnsembleMemberFindFirstArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EnsembleMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberFindFirstOrThrowArgs} args - Arguments to find a EnsembleMember
     * @example
     * // Get one EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnsembleMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, EnsembleMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EnsembleMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EnsembleMembers
     * const ensembleMembers = await prisma.ensembleMember.findMany()
     * 
     * // Get first 10 EnsembleMembers
     * const ensembleMembers = await prisma.ensembleMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ensembleMemberWithIdOnly = await prisma.ensembleMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnsembleMemberFindManyArgs>(args?: SelectSubset<T, EnsembleMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EnsembleMember.
     * @param {EnsembleMemberCreateArgs} args - Arguments to create a EnsembleMember.
     * @example
     * // Create one EnsembleMember
     * const EnsembleMember = await prisma.ensembleMember.create({
     *   data: {
     *     // ... data to create a EnsembleMember
     *   }
     * })
     * 
     */
    create<T extends EnsembleMemberCreateArgs>(args: SelectSubset<T, EnsembleMemberCreateArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EnsembleMembers.
     * @param {EnsembleMemberCreateManyArgs} args - Arguments to create many EnsembleMembers.
     * @example
     * // Create many EnsembleMembers
     * const ensembleMember = await prisma.ensembleMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnsembleMemberCreateManyArgs>(args?: SelectSubset<T, EnsembleMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EnsembleMembers and returns the data saved in the database.
     * @param {EnsembleMemberCreateManyAndReturnArgs} args - Arguments to create many EnsembleMembers.
     * @example
     * // Create many EnsembleMembers
     * const ensembleMember = await prisma.ensembleMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EnsembleMembers and only return the `id`
     * const ensembleMemberWithIdOnly = await prisma.ensembleMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnsembleMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, EnsembleMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EnsembleMember.
     * @param {EnsembleMemberDeleteArgs} args - Arguments to delete one EnsembleMember.
     * @example
     * // Delete one EnsembleMember
     * const EnsembleMember = await prisma.ensembleMember.delete({
     *   where: {
     *     // ... filter to delete one EnsembleMember
     *   }
     * })
     * 
     */
    delete<T extends EnsembleMemberDeleteArgs>(args: SelectSubset<T, EnsembleMemberDeleteArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EnsembleMember.
     * @param {EnsembleMemberUpdateArgs} args - Arguments to update one EnsembleMember.
     * @example
     * // Update one EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnsembleMemberUpdateArgs>(args: SelectSubset<T, EnsembleMemberUpdateArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EnsembleMembers.
     * @param {EnsembleMemberDeleteManyArgs} args - Arguments to filter EnsembleMembers to delete.
     * @example
     * // Delete a few EnsembleMembers
     * const { count } = await prisma.ensembleMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnsembleMemberDeleteManyArgs>(args?: SelectSubset<T, EnsembleMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnsembleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EnsembleMembers
     * const ensembleMember = await prisma.ensembleMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnsembleMemberUpdateManyArgs>(args: SelectSubset<T, EnsembleMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnsembleMembers and returns the data updated in the database.
     * @param {EnsembleMemberUpdateManyAndReturnArgs} args - Arguments to update many EnsembleMembers.
     * @example
     * // Update many EnsembleMembers
     * const ensembleMember = await prisma.ensembleMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EnsembleMembers and only return the `id`
     * const ensembleMemberWithIdOnly = await prisma.ensembleMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EnsembleMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, EnsembleMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EnsembleMember.
     * @param {EnsembleMemberUpsertArgs} args - Arguments to update or create a EnsembleMember.
     * @example
     * // Update or create a EnsembleMember
     * const ensembleMember = await prisma.ensembleMember.upsert({
     *   create: {
     *     // ... data to create a EnsembleMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EnsembleMember we want to update
     *   }
     * })
     */
    upsert<T extends EnsembleMemberUpsertArgs>(args: SelectSubset<T, EnsembleMemberUpsertArgs<ExtArgs>>): Prisma__EnsembleMemberClient<$Result.GetResult<Prisma.$EnsembleMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EnsembleMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberCountArgs} args - Arguments to filter EnsembleMembers to count.
     * @example
     * // Count the number of EnsembleMembers
     * const count = await prisma.ensembleMember.count({
     *   where: {
     *     // ... the filter for the EnsembleMembers we want to count
     *   }
     * })
    **/
    count<T extends EnsembleMemberCountArgs>(
      args?: Subset<T, EnsembleMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnsembleMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EnsembleMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnsembleMemberAggregateArgs>(args: Subset<T, EnsembleMemberAggregateArgs>): Prisma.PrismaPromise<GetEnsembleMemberAggregateType<T>>

    /**
     * Group by EnsembleMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnsembleMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnsembleMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnsembleMemberGroupByArgs['orderBy'] }
        : { orderBy?: EnsembleMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnsembleMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnsembleMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EnsembleMember model
   */
  readonly fields: EnsembleMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EnsembleMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnsembleMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ensemble<T extends EnsembleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EnsembleDefaultArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    musician<T extends MusicianDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MusicianDefaultArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EnsembleMember model
   */
  interface EnsembleMemberFieldRefs {
    readonly id: FieldRef<"EnsembleMember", 'Int'>
    readonly ensembleId: FieldRef<"EnsembleMember", 'Int'>
    readonly musicianId: FieldRef<"EnsembleMember", 'Int'>
    readonly role: FieldRef<"EnsembleMember", 'String'>
    readonly startDate: FieldRef<"EnsembleMember", 'DateTime'>
    readonly endDate: FieldRef<"EnsembleMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EnsembleMember findUnique
   */
  export type EnsembleMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter, which EnsembleMember to fetch.
     */
    where: EnsembleMemberWhereUniqueInput
  }

  /**
   * EnsembleMember findUniqueOrThrow
   */
  export type EnsembleMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter, which EnsembleMember to fetch.
     */
    where: EnsembleMemberWhereUniqueInput
  }

  /**
   * EnsembleMember findFirst
   */
  export type EnsembleMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter, which EnsembleMember to fetch.
     */
    where?: EnsembleMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsembleMembers to fetch.
     */
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnsembleMembers.
     */
    cursor?: EnsembleMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsembleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsembleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnsembleMembers.
     */
    distinct?: EnsembleMemberScalarFieldEnum | EnsembleMemberScalarFieldEnum[]
  }

  /**
   * EnsembleMember findFirstOrThrow
   */
  export type EnsembleMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter, which EnsembleMember to fetch.
     */
    where?: EnsembleMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsembleMembers to fetch.
     */
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnsembleMembers.
     */
    cursor?: EnsembleMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsembleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsembleMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnsembleMembers.
     */
    distinct?: EnsembleMemberScalarFieldEnum | EnsembleMemberScalarFieldEnum[]
  }

  /**
   * EnsembleMember findMany
   */
  export type EnsembleMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter, which EnsembleMembers to fetch.
     */
    where?: EnsembleMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnsembleMembers to fetch.
     */
    orderBy?: EnsembleMemberOrderByWithRelationInput | EnsembleMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EnsembleMembers.
     */
    cursor?: EnsembleMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnsembleMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnsembleMembers.
     */
    skip?: number
    distinct?: EnsembleMemberScalarFieldEnum | EnsembleMemberScalarFieldEnum[]
  }

  /**
   * EnsembleMember create
   */
  export type EnsembleMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a EnsembleMember.
     */
    data: XOR<EnsembleMemberCreateInput, EnsembleMemberUncheckedCreateInput>
  }

  /**
   * EnsembleMember createMany
   */
  export type EnsembleMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EnsembleMembers.
     */
    data: EnsembleMemberCreateManyInput | EnsembleMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EnsembleMember createManyAndReturn
   */
  export type EnsembleMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * The data used to create many EnsembleMembers.
     */
    data: EnsembleMemberCreateManyInput | EnsembleMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EnsembleMember update
   */
  export type EnsembleMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a EnsembleMember.
     */
    data: XOR<EnsembleMemberUpdateInput, EnsembleMemberUncheckedUpdateInput>
    /**
     * Choose, which EnsembleMember to update.
     */
    where: EnsembleMemberWhereUniqueInput
  }

  /**
   * EnsembleMember updateMany
   */
  export type EnsembleMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EnsembleMembers.
     */
    data: XOR<EnsembleMemberUpdateManyMutationInput, EnsembleMemberUncheckedUpdateManyInput>
    /**
     * Filter which EnsembleMembers to update
     */
    where?: EnsembleMemberWhereInput
    /**
     * Limit how many EnsembleMembers to update.
     */
    limit?: number
  }

  /**
   * EnsembleMember updateManyAndReturn
   */
  export type EnsembleMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * The data used to update EnsembleMembers.
     */
    data: XOR<EnsembleMemberUpdateManyMutationInput, EnsembleMemberUncheckedUpdateManyInput>
    /**
     * Filter which EnsembleMembers to update
     */
    where?: EnsembleMemberWhereInput
    /**
     * Limit how many EnsembleMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EnsembleMember upsert
   */
  export type EnsembleMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the EnsembleMember to update in case it exists.
     */
    where: EnsembleMemberWhereUniqueInput
    /**
     * In case the EnsembleMember found by the `where` argument doesn't exist, create a new EnsembleMember with this data.
     */
    create: XOR<EnsembleMemberCreateInput, EnsembleMemberUncheckedCreateInput>
    /**
     * In case the EnsembleMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnsembleMemberUpdateInput, EnsembleMemberUncheckedUpdateInput>
  }

  /**
   * EnsembleMember delete
   */
  export type EnsembleMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
    /**
     * Filter which EnsembleMember to delete.
     */
    where: EnsembleMemberWhereUniqueInput
  }

  /**
   * EnsembleMember deleteMany
   */
  export type EnsembleMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnsembleMembers to delete
     */
    where?: EnsembleMemberWhereInput
    /**
     * Limit how many EnsembleMembers to delete.
     */
    limit?: number
  }

  /**
   * EnsembleMember without action
   */
  export type EnsembleMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnsembleMember
     */
    select?: EnsembleMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EnsembleMember
     */
    omit?: EnsembleMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleMemberInclude<ExtArgs> | null
  }


  /**
   * Model Composition
   */

  export type AggregateComposition = {
    _count: CompositionCountAggregateOutputType | null
    _avg: CompositionAvgAggregateOutputType | null
    _sum: CompositionSumAggregateOutputType | null
    _min: CompositionMinAggregateOutputType | null
    _max: CompositionMaxAggregateOutputType | null
  }

  export type CompositionAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    creationYear: number | null
  }

  export type CompositionSumAggregateOutputType = {
    id: number | null
    duration: number | null
    creationYear: number | null
  }

  export type CompositionMinAggregateOutputType = {
    id: number | null
    title: string | null
    duration: number | null
    creationYear: number | null
    genre: string | null
  }

  export type CompositionMaxAggregateOutputType = {
    id: number | null
    title: string | null
    duration: number | null
    creationYear: number | null
    genre: string | null
  }

  export type CompositionCountAggregateOutputType = {
    id: number
    title: number
    duration: number
    creationYear: number
    genre: number
    _all: number
  }


  export type CompositionAvgAggregateInputType = {
    id?: true
    duration?: true
    creationYear?: true
  }

  export type CompositionSumAggregateInputType = {
    id?: true
    duration?: true
    creationYear?: true
  }

  export type CompositionMinAggregateInputType = {
    id?: true
    title?: true
    duration?: true
    creationYear?: true
    genre?: true
  }

  export type CompositionMaxAggregateInputType = {
    id?: true
    title?: true
    duration?: true
    creationYear?: true
    genre?: true
  }

  export type CompositionCountAggregateInputType = {
    id?: true
    title?: true
    duration?: true
    creationYear?: true
    genre?: true
    _all?: true
  }

  export type CompositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Composition to aggregate.
     */
    where?: CompositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compositions to fetch.
     */
    orderBy?: CompositionOrderByWithRelationInput | CompositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compositions
    **/
    _count?: true | CompositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompositionMaxAggregateInputType
  }

  export type GetCompositionAggregateType<T extends CompositionAggregateArgs> = {
        [P in keyof T & keyof AggregateComposition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComposition[P]>
      : GetScalarType<T[P], AggregateComposition[P]>
  }




  export type CompositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompositionWhereInput
    orderBy?: CompositionOrderByWithAggregationInput | CompositionOrderByWithAggregationInput[]
    by: CompositionScalarFieldEnum[] | CompositionScalarFieldEnum
    having?: CompositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompositionCountAggregateInputType | true
    _avg?: CompositionAvgAggregateInputType
    _sum?: CompositionSumAggregateInputType
    _min?: CompositionMinAggregateInputType
    _max?: CompositionMaxAggregateInputType
  }

  export type CompositionGroupByOutputType = {
    id: number
    title: string
    duration: number
    creationYear: number
    genre: string
    _count: CompositionCountAggregateOutputType | null
    _avg: CompositionAvgAggregateOutputType | null
    _sum: CompositionSumAggregateOutputType | null
    _min: CompositionMinAggregateOutputType | null
    _max: CompositionMaxAggregateOutputType | null
  }

  type GetCompositionGroupByPayload<T extends CompositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompositionGroupByOutputType[P]>
            : GetScalarType<T[P], CompositionGroupByOutputType[P]>
        }
      >
    >


  export type CompositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    duration?: boolean
    creationYear?: boolean
    genre?: boolean
    recordings?: boolean | Composition$recordingsArgs<ExtArgs>
    _count?: boolean | CompositionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["composition"]>

  export type CompositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    duration?: boolean
    creationYear?: boolean
    genre?: boolean
  }, ExtArgs["result"]["composition"]>

  export type CompositionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    duration?: boolean
    creationYear?: boolean
    genre?: boolean
  }, ExtArgs["result"]["composition"]>

  export type CompositionSelectScalar = {
    id?: boolean
    title?: boolean
    duration?: boolean
    creationYear?: boolean
    genre?: boolean
  }

  export type CompositionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "duration" | "creationYear" | "genre", ExtArgs["result"]["composition"]>
  export type CompositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recordings?: boolean | Composition$recordingsArgs<ExtArgs>
    _count?: boolean | CompositionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompositionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Composition"
    objects: {
      recordings: Prisma.$RecordingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      duration: number
      creationYear: number
      genre: string
    }, ExtArgs["result"]["composition"]>
    composites: {}
  }

  type CompositionGetPayload<S extends boolean | null | undefined | CompositionDefaultArgs> = $Result.GetResult<Prisma.$CompositionPayload, S>

  type CompositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompositionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompositionCountAggregateInputType | true
    }

  export interface CompositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Composition'], meta: { name: 'Composition' } }
    /**
     * Find zero or one Composition that matches the filter.
     * @param {CompositionFindUniqueArgs} args - Arguments to find a Composition
     * @example
     * // Get one Composition
     * const composition = await prisma.composition.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompositionFindUniqueArgs>(args: SelectSubset<T, CompositionFindUniqueArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Composition that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompositionFindUniqueOrThrowArgs} args - Arguments to find a Composition
     * @example
     * // Get one Composition
     * const composition = await prisma.composition.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompositionFindUniqueOrThrowArgs>(args: SelectSubset<T, CompositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Composition that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionFindFirstArgs} args - Arguments to find a Composition
     * @example
     * // Get one Composition
     * const composition = await prisma.composition.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompositionFindFirstArgs>(args?: SelectSubset<T, CompositionFindFirstArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Composition that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionFindFirstOrThrowArgs} args - Arguments to find a Composition
     * @example
     * // Get one Composition
     * const composition = await prisma.composition.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompositionFindFirstOrThrowArgs>(args?: SelectSubset<T, CompositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Compositions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compositions
     * const compositions = await prisma.composition.findMany()
     * 
     * // Get first 10 Compositions
     * const compositions = await prisma.composition.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compositionWithIdOnly = await prisma.composition.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompositionFindManyArgs>(args?: SelectSubset<T, CompositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Composition.
     * @param {CompositionCreateArgs} args - Arguments to create a Composition.
     * @example
     * // Create one Composition
     * const Composition = await prisma.composition.create({
     *   data: {
     *     // ... data to create a Composition
     *   }
     * })
     * 
     */
    create<T extends CompositionCreateArgs>(args: SelectSubset<T, CompositionCreateArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Compositions.
     * @param {CompositionCreateManyArgs} args - Arguments to create many Compositions.
     * @example
     * // Create many Compositions
     * const composition = await prisma.composition.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompositionCreateManyArgs>(args?: SelectSubset<T, CompositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Compositions and returns the data saved in the database.
     * @param {CompositionCreateManyAndReturnArgs} args - Arguments to create many Compositions.
     * @example
     * // Create many Compositions
     * const composition = await prisma.composition.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Compositions and only return the `id`
     * const compositionWithIdOnly = await prisma.composition.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompositionCreateManyAndReturnArgs>(args?: SelectSubset<T, CompositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Composition.
     * @param {CompositionDeleteArgs} args - Arguments to delete one Composition.
     * @example
     * // Delete one Composition
     * const Composition = await prisma.composition.delete({
     *   where: {
     *     // ... filter to delete one Composition
     *   }
     * })
     * 
     */
    delete<T extends CompositionDeleteArgs>(args: SelectSubset<T, CompositionDeleteArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Composition.
     * @param {CompositionUpdateArgs} args - Arguments to update one Composition.
     * @example
     * // Update one Composition
     * const composition = await prisma.composition.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompositionUpdateArgs>(args: SelectSubset<T, CompositionUpdateArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Compositions.
     * @param {CompositionDeleteManyArgs} args - Arguments to filter Compositions to delete.
     * @example
     * // Delete a few Compositions
     * const { count } = await prisma.composition.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompositionDeleteManyArgs>(args?: SelectSubset<T, CompositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compositions
     * const composition = await prisma.composition.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompositionUpdateManyArgs>(args: SelectSubset<T, CompositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compositions and returns the data updated in the database.
     * @param {CompositionUpdateManyAndReturnArgs} args - Arguments to update many Compositions.
     * @example
     * // Update many Compositions
     * const composition = await prisma.composition.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Compositions and only return the `id`
     * const compositionWithIdOnly = await prisma.composition.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompositionUpdateManyAndReturnArgs>(args: SelectSubset<T, CompositionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Composition.
     * @param {CompositionUpsertArgs} args - Arguments to update or create a Composition.
     * @example
     * // Update or create a Composition
     * const composition = await prisma.composition.upsert({
     *   create: {
     *     // ... data to create a Composition
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Composition we want to update
     *   }
     * })
     */
    upsert<T extends CompositionUpsertArgs>(args: SelectSubset<T, CompositionUpsertArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Compositions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionCountArgs} args - Arguments to filter Compositions to count.
     * @example
     * // Count the number of Compositions
     * const count = await prisma.composition.count({
     *   where: {
     *     // ... the filter for the Compositions we want to count
     *   }
     * })
    **/
    count<T extends CompositionCountArgs>(
      args?: Subset<T, CompositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Composition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompositionAggregateArgs>(args: Subset<T, CompositionAggregateArgs>): Prisma.PrismaPromise<GetCompositionAggregateType<T>>

    /**
     * Group by Composition.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompositionGroupByArgs['orderBy'] }
        : { orderBy?: CompositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Composition model
   */
  readonly fields: CompositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Composition.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recordings<T extends Composition$recordingsArgs<ExtArgs> = {}>(args?: Subset<T, Composition$recordingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Composition model
   */
  interface CompositionFieldRefs {
    readonly id: FieldRef<"Composition", 'Int'>
    readonly title: FieldRef<"Composition", 'String'>
    readonly duration: FieldRef<"Composition", 'Int'>
    readonly creationYear: FieldRef<"Composition", 'Int'>
    readonly genre: FieldRef<"Composition", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Composition findUnique
   */
  export type CompositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter, which Composition to fetch.
     */
    where: CompositionWhereUniqueInput
  }

  /**
   * Composition findUniqueOrThrow
   */
  export type CompositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter, which Composition to fetch.
     */
    where: CompositionWhereUniqueInput
  }

  /**
   * Composition findFirst
   */
  export type CompositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter, which Composition to fetch.
     */
    where?: CompositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compositions to fetch.
     */
    orderBy?: CompositionOrderByWithRelationInput | CompositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compositions.
     */
    cursor?: CompositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compositions.
     */
    distinct?: CompositionScalarFieldEnum | CompositionScalarFieldEnum[]
  }

  /**
   * Composition findFirstOrThrow
   */
  export type CompositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter, which Composition to fetch.
     */
    where?: CompositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compositions to fetch.
     */
    orderBy?: CompositionOrderByWithRelationInput | CompositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compositions.
     */
    cursor?: CompositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compositions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compositions.
     */
    distinct?: CompositionScalarFieldEnum | CompositionScalarFieldEnum[]
  }

  /**
   * Composition findMany
   */
  export type CompositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter, which Compositions to fetch.
     */
    where?: CompositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compositions to fetch.
     */
    orderBy?: CompositionOrderByWithRelationInput | CompositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compositions.
     */
    cursor?: CompositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compositions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compositions.
     */
    skip?: number
    distinct?: CompositionScalarFieldEnum | CompositionScalarFieldEnum[]
  }

  /**
   * Composition create
   */
  export type CompositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Composition.
     */
    data: XOR<CompositionCreateInput, CompositionUncheckedCreateInput>
  }

  /**
   * Composition createMany
   */
  export type CompositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compositions.
     */
    data: CompositionCreateManyInput | CompositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Composition createManyAndReturn
   */
  export type CompositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * The data used to create many Compositions.
     */
    data: CompositionCreateManyInput | CompositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Composition update
   */
  export type CompositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Composition.
     */
    data: XOR<CompositionUpdateInput, CompositionUncheckedUpdateInput>
    /**
     * Choose, which Composition to update.
     */
    where: CompositionWhereUniqueInput
  }

  /**
   * Composition updateMany
   */
  export type CompositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compositions.
     */
    data: XOR<CompositionUpdateManyMutationInput, CompositionUncheckedUpdateManyInput>
    /**
     * Filter which Compositions to update
     */
    where?: CompositionWhereInput
    /**
     * Limit how many Compositions to update.
     */
    limit?: number
  }

  /**
   * Composition updateManyAndReturn
   */
  export type CompositionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * The data used to update Compositions.
     */
    data: XOR<CompositionUpdateManyMutationInput, CompositionUncheckedUpdateManyInput>
    /**
     * Filter which Compositions to update
     */
    where?: CompositionWhereInput
    /**
     * Limit how many Compositions to update.
     */
    limit?: number
  }

  /**
   * Composition upsert
   */
  export type CompositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Composition to update in case it exists.
     */
    where: CompositionWhereUniqueInput
    /**
     * In case the Composition found by the `where` argument doesn't exist, create a new Composition with this data.
     */
    create: XOR<CompositionCreateInput, CompositionUncheckedCreateInput>
    /**
     * In case the Composition was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompositionUpdateInput, CompositionUncheckedUpdateInput>
  }

  /**
   * Composition delete
   */
  export type CompositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
    /**
     * Filter which Composition to delete.
     */
    where: CompositionWhereUniqueInput
  }

  /**
   * Composition deleteMany
   */
  export type CompositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compositions to delete
     */
    where?: CompositionWhereInput
    /**
     * Limit how many Compositions to delete.
     */
    limit?: number
  }

  /**
   * Composition.recordings
   */
  export type Composition$recordingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    where?: RecordingWhereInput
    orderBy?: RecordingOrderByWithRelationInput | RecordingOrderByWithRelationInput[]
    cursor?: RecordingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecordingScalarFieldEnum | RecordingScalarFieldEnum[]
  }

  /**
   * Composition without action
   */
  export type CompositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Composition
     */
    select?: CompositionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Composition
     */
    omit?: CompositionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompositionInclude<ExtArgs> | null
  }


  /**
   * Model Recording
   */

  export type AggregateRecording = {
    _count: RecordingCountAggregateOutputType | null
    _avg: RecordingAvgAggregateOutputType | null
    _sum: RecordingSumAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  export type RecordingAvgAggregateOutputType = {
    id: number | null
    compositionId: number | null
  }

  export type RecordingSumAggregateOutputType = {
    id: number | null
    compositionId: number | null
  }

  export type RecordingMinAggregateOutputType = {
    id: number | null
    compositionId: number | null
    recordingDate: Date | null
    studio: string | null
  }

  export type RecordingMaxAggregateOutputType = {
    id: number | null
    compositionId: number | null
    recordingDate: Date | null
    studio: string | null
  }

  export type RecordingCountAggregateOutputType = {
    id: number
    compositionId: number
    recordingDate: number
    studio: number
    _all: number
  }


  export type RecordingAvgAggregateInputType = {
    id?: true
    compositionId?: true
  }

  export type RecordingSumAggregateInputType = {
    id?: true
    compositionId?: true
  }

  export type RecordingMinAggregateInputType = {
    id?: true
    compositionId?: true
    recordingDate?: true
    studio?: true
  }

  export type RecordingMaxAggregateInputType = {
    id?: true
    compositionId?: true
    recordingDate?: true
    studio?: true
  }

  export type RecordingCountAggregateInputType = {
    id?: true
    compositionId?: true
    recordingDate?: true
    studio?: true
    _all?: true
  }

  export type RecordingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recording to aggregate.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: RecordingOrderByWithRelationInput | RecordingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recordings
    **/
    _count?: true | RecordingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecordingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecordingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecordingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecordingMaxAggregateInputType
  }

  export type GetRecordingAggregateType<T extends RecordingAggregateArgs> = {
        [P in keyof T & keyof AggregateRecording]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecording[P]>
      : GetScalarType<T[P], AggregateRecording[P]>
  }




  export type RecordingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecordingWhereInput
    orderBy?: RecordingOrderByWithAggregationInput | RecordingOrderByWithAggregationInput[]
    by: RecordingScalarFieldEnum[] | RecordingScalarFieldEnum
    having?: RecordingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecordingCountAggregateInputType | true
    _avg?: RecordingAvgAggregateInputType
    _sum?: RecordingSumAggregateInputType
    _min?: RecordingMinAggregateInputType
    _max?: RecordingMaxAggregateInputType
  }

  export type RecordingGroupByOutputType = {
    id: number
    compositionId: number
    recordingDate: Date
    studio: string | null
    _count: RecordingCountAggregateOutputType | null
    _avg: RecordingAvgAggregateOutputType | null
    _sum: RecordingSumAggregateOutputType | null
    _min: RecordingMinAggregateOutputType | null
    _max: RecordingMaxAggregateOutputType | null
  }

  type GetRecordingGroupByPayload<T extends RecordingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecordingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecordingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecordingGroupByOutputType[P]>
            : GetScalarType<T[P], RecordingGroupByOutputType[P]>
        }
      >
    >


  export type RecordingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compositionId?: boolean
    recordingDate?: boolean
    studio?: boolean
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
    albums?: boolean | Recording$albumsArgs<ExtArgs>
    _count?: boolean | RecordingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recording"]>

  export type RecordingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compositionId?: boolean
    recordingDate?: boolean
    studio?: boolean
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recording"]>

  export type RecordingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    compositionId?: boolean
    recordingDate?: boolean
    studio?: boolean
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recording"]>

  export type RecordingSelectScalar = {
    id?: boolean
    compositionId?: boolean
    recordingDate?: boolean
    studio?: boolean
  }

  export type RecordingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "compositionId" | "recordingDate" | "studio", ExtArgs["result"]["recording"]>
  export type RecordingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
    albums?: boolean | Recording$albumsArgs<ExtArgs>
    _count?: boolean | RecordingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RecordingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
  }
  export type RecordingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    composition?: boolean | CompositionDefaultArgs<ExtArgs>
  }

  export type $RecordingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recording"
    objects: {
      composition: Prisma.$CompositionPayload<ExtArgs>
      albums: Prisma.$TrackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      compositionId: number
      recordingDate: Date
      studio: string | null
    }, ExtArgs["result"]["recording"]>
    composites: {}
  }

  type RecordingGetPayload<S extends boolean | null | undefined | RecordingDefaultArgs> = $Result.GetResult<Prisma.$RecordingPayload, S>

  type RecordingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecordingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecordingCountAggregateInputType | true
    }

  export interface RecordingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recording'], meta: { name: 'Recording' } }
    /**
     * Find zero or one Recording that matches the filter.
     * @param {RecordingFindUniqueArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecordingFindUniqueArgs>(args: SelectSubset<T, RecordingFindUniqueArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recording that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecordingFindUniqueOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecordingFindUniqueOrThrowArgs>(args: SelectSubset<T, RecordingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recording that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecordingFindFirstArgs>(args?: SelectSubset<T, RecordingFindFirstArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recording that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindFirstOrThrowArgs} args - Arguments to find a Recording
     * @example
     * // Get one Recording
     * const recording = await prisma.recording.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecordingFindFirstOrThrowArgs>(args?: SelectSubset<T, RecordingFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recordings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recordings
     * const recordings = await prisma.recording.findMany()
     * 
     * // Get first 10 Recordings
     * const recordings = await prisma.recording.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recordingWithIdOnly = await prisma.recording.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecordingFindManyArgs>(args?: SelectSubset<T, RecordingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recording.
     * @param {RecordingCreateArgs} args - Arguments to create a Recording.
     * @example
     * // Create one Recording
     * const Recording = await prisma.recording.create({
     *   data: {
     *     // ... data to create a Recording
     *   }
     * })
     * 
     */
    create<T extends RecordingCreateArgs>(args: SelectSubset<T, RecordingCreateArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recordings.
     * @param {RecordingCreateManyArgs} args - Arguments to create many Recordings.
     * @example
     * // Create many Recordings
     * const recording = await prisma.recording.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecordingCreateManyArgs>(args?: SelectSubset<T, RecordingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recordings and returns the data saved in the database.
     * @param {RecordingCreateManyAndReturnArgs} args - Arguments to create many Recordings.
     * @example
     * // Create many Recordings
     * const recording = await prisma.recording.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recordings and only return the `id`
     * const recordingWithIdOnly = await prisma.recording.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecordingCreateManyAndReturnArgs>(args?: SelectSubset<T, RecordingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recording.
     * @param {RecordingDeleteArgs} args - Arguments to delete one Recording.
     * @example
     * // Delete one Recording
     * const Recording = await prisma.recording.delete({
     *   where: {
     *     // ... filter to delete one Recording
     *   }
     * })
     * 
     */
    delete<T extends RecordingDeleteArgs>(args: SelectSubset<T, RecordingDeleteArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recording.
     * @param {RecordingUpdateArgs} args - Arguments to update one Recording.
     * @example
     * // Update one Recording
     * const recording = await prisma.recording.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecordingUpdateArgs>(args: SelectSubset<T, RecordingUpdateArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recordings.
     * @param {RecordingDeleteManyArgs} args - Arguments to filter Recordings to delete.
     * @example
     * // Delete a few Recordings
     * const { count } = await prisma.recording.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecordingDeleteManyArgs>(args?: SelectSubset<T, RecordingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recordings
     * const recording = await prisma.recording.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecordingUpdateManyArgs>(args: SelectSubset<T, RecordingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recordings and returns the data updated in the database.
     * @param {RecordingUpdateManyAndReturnArgs} args - Arguments to update many Recordings.
     * @example
     * // Update many Recordings
     * const recording = await prisma.recording.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recordings and only return the `id`
     * const recordingWithIdOnly = await prisma.recording.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecordingUpdateManyAndReturnArgs>(args: SelectSubset<T, RecordingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recording.
     * @param {RecordingUpsertArgs} args - Arguments to update or create a Recording.
     * @example
     * // Update or create a Recording
     * const recording = await prisma.recording.upsert({
     *   create: {
     *     // ... data to create a Recording
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recording we want to update
     *   }
     * })
     */
    upsert<T extends RecordingUpsertArgs>(args: SelectSubset<T, RecordingUpsertArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recordings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingCountArgs} args - Arguments to filter Recordings to count.
     * @example
     * // Count the number of Recordings
     * const count = await prisma.recording.count({
     *   where: {
     *     // ... the filter for the Recordings we want to count
     *   }
     * })
    **/
    count<T extends RecordingCountArgs>(
      args?: Subset<T, RecordingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecordingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecordingAggregateArgs>(args: Subset<T, RecordingAggregateArgs>): Prisma.PrismaPromise<GetRecordingAggregateType<T>>

    /**
     * Group by Recording.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecordingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecordingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecordingGroupByArgs['orderBy'] }
        : { orderBy?: RecordingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecordingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecordingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recording model
   */
  readonly fields: RecordingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recording.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecordingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    composition<T extends CompositionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompositionDefaultArgs<ExtArgs>>): Prisma__CompositionClient<$Result.GetResult<Prisma.$CompositionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    albums<T extends Recording$albumsArgs<ExtArgs> = {}>(args?: Subset<T, Recording$albumsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recording model
   */
  interface RecordingFieldRefs {
    readonly id: FieldRef<"Recording", 'Int'>
    readonly compositionId: FieldRef<"Recording", 'Int'>
    readonly recordingDate: FieldRef<"Recording", 'DateTime'>
    readonly studio: FieldRef<"Recording", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Recording findUnique
   */
  export type RecordingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording findUniqueOrThrow
   */
  export type RecordingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording findFirst
   */
  export type RecordingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: RecordingOrderByWithRelationInput | RecordingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: RecordingScalarFieldEnum | RecordingScalarFieldEnum[]
  }

  /**
   * Recording findFirstOrThrow
   */
  export type RecordingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recording to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: RecordingOrderByWithRelationInput | RecordingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recordings.
     */
    distinct?: RecordingScalarFieldEnum | RecordingScalarFieldEnum[]
  }

  /**
   * Recording findMany
   */
  export type RecordingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter, which Recordings to fetch.
     */
    where?: RecordingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recordings to fetch.
     */
    orderBy?: RecordingOrderByWithRelationInput | RecordingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recordings.
     */
    cursor?: RecordingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recordings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recordings.
     */
    skip?: number
    distinct?: RecordingScalarFieldEnum | RecordingScalarFieldEnum[]
  }

  /**
   * Recording create
   */
  export type RecordingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The data needed to create a Recording.
     */
    data: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
  }

  /**
   * Recording createMany
   */
  export type RecordingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recordings.
     */
    data: RecordingCreateManyInput | RecordingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recording createManyAndReturn
   */
  export type RecordingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * The data used to create many Recordings.
     */
    data: RecordingCreateManyInput | RecordingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recording update
   */
  export type RecordingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The data needed to update a Recording.
     */
    data: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
    /**
     * Choose, which Recording to update.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording updateMany
   */
  export type RecordingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recordings.
     */
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyInput>
    /**
     * Filter which Recordings to update
     */
    where?: RecordingWhereInput
    /**
     * Limit how many Recordings to update.
     */
    limit?: number
  }

  /**
   * Recording updateManyAndReturn
   */
  export type RecordingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * The data used to update Recordings.
     */
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyInput>
    /**
     * Filter which Recordings to update
     */
    where?: RecordingWhereInput
    /**
     * Limit how many Recordings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recording upsert
   */
  export type RecordingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * The filter to search for the Recording to update in case it exists.
     */
    where: RecordingWhereUniqueInput
    /**
     * In case the Recording found by the `where` argument doesn't exist, create a new Recording with this data.
     */
    create: XOR<RecordingCreateInput, RecordingUncheckedCreateInput>
    /**
     * In case the Recording was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecordingUpdateInput, RecordingUncheckedUpdateInput>
  }

  /**
   * Recording delete
   */
  export type RecordingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
    /**
     * Filter which Recording to delete.
     */
    where: RecordingWhereUniqueInput
  }

  /**
   * Recording deleteMany
   */
  export type RecordingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recordings to delete
     */
    where?: RecordingWhereInput
    /**
     * Limit how many Recordings to delete.
     */
    limit?: number
  }

  /**
   * Recording.albums
   */
  export type Recording$albumsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    cursor?: TrackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Recording without action
   */
  export type RecordingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recording
     */
    select?: RecordingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recording
     */
    omit?: RecordingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecordingInclude<ExtArgs> | null
  }


  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumAvgAggregateOutputType = {
    id: number | null
    musicianId: number | null
    ensembleId: number | null
  }

  export type AlbumSumAggregateOutputType = {
    id: number | null
    musicianId: number | null
    ensembleId: number | null
  }

  export type AlbumMinAggregateOutputType = {
    id: number | null
    catalogNumber: string | null
    title: string | null
    releaseDate: Date | null
    musicianId: number | null
    ensembleId: number | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: number | null
    catalogNumber: string | null
    title: string | null
    releaseDate: Date | null
    musicianId: number | null
    ensembleId: number | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    catalogNumber: number
    title: number
    releaseDate: number
    musicianId: number
    ensembleId: number
    _all: number
  }


  export type AlbumAvgAggregateInputType = {
    id?: true
    musicianId?: true
    ensembleId?: true
  }

  export type AlbumSumAggregateInputType = {
    id?: true
    musicianId?: true
    ensembleId?: true
  }

  export type AlbumMinAggregateInputType = {
    id?: true
    catalogNumber?: true
    title?: true
    releaseDate?: true
    musicianId?: true
    ensembleId?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    catalogNumber?: true
    title?: true
    releaseDate?: true
    musicianId?: true
    ensembleId?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    catalogNumber?: true
    title?: true
    releaseDate?: true
    musicianId?: true
    ensembleId?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _avg?: AlbumAvgAggregateInputType
    _sum?: AlbumSumAggregateInputType
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: number
    catalogNumber: string
    title: string
    releaseDate: Date
    musicianId: number | null
    ensembleId: number | null
    _count: AlbumCountAggregateOutputType | null
    _avg: AlbumAvgAggregateOutputType | null
    _sum: AlbumSumAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    catalogNumber?: boolean
    title?: boolean
    releaseDate?: boolean
    musicianId?: boolean
    ensembleId?: boolean
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
    tracks?: boolean | Album$tracksArgs<ExtArgs>
    inventories?: boolean | Album$inventoriesArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    catalogNumber?: boolean
    title?: boolean
    releaseDate?: boolean
    musicianId?: boolean
    ensembleId?: boolean
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    catalogNumber?: boolean
    title?: boolean
    releaseDate?: boolean
    musicianId?: boolean
    ensembleId?: boolean
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    catalogNumber?: boolean
    title?: boolean
    releaseDate?: boolean
    musicianId?: boolean
    ensembleId?: boolean
  }

  export type AlbumOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "catalogNumber" | "title" | "releaseDate" | "musicianId" | "ensembleId", ExtArgs["result"]["album"]>
  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
    tracks?: boolean | Album$tracksArgs<ExtArgs>
    inventories?: boolean | Album$inventoriesArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
  }
  export type AlbumIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    musician?: boolean | Album$musicianArgs<ExtArgs>
    ensemble?: boolean | Album$ensembleArgs<ExtArgs>
  }

  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      musician: Prisma.$MusicianPayload<ExtArgs> | null
      ensemble: Prisma.$EnsemblePayload<ExtArgs> | null
      tracks: Prisma.$TrackPayload<ExtArgs>[]
      inventories: Prisma.$InventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      catalogNumber: string
      title: string
      releaseDate: Date
      musicianId: number | null
      ensembleId: number | null
    }, ExtArgs["result"]["album"]>
    composites: {}
  }

  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumFindUniqueArgs>(args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Album that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumFindFirstArgs>(args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumFindManyArgs>(args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
     */
    create<T extends AlbumCreateArgs>(args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Albums.
     * @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumCreateManyArgs>(args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Albums and returns the data saved in the database.
     * @param {AlbumCreateManyAndReturnArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
     */
    delete<T extends AlbumDeleteArgs>(args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumUpdateArgs>(args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumDeleteManyArgs>(args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumUpdateManyArgs>(args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums and returns the data updated in the database.
     * @param {AlbumUpdateManyAndReturnArgs} args - Arguments to update many Albums.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlbumUpdateManyAndReturnArgs>(args: SelectSubset<T, AlbumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
     */
    upsert<T extends AlbumUpsertArgs>(args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    musician<T extends Album$musicianArgs<ExtArgs> = {}>(args?: Subset<T, Album$musicianArgs<ExtArgs>>): Prisma__MusicianClient<$Result.GetResult<Prisma.$MusicianPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    ensemble<T extends Album$ensembleArgs<ExtArgs> = {}>(args?: Subset<T, Album$ensembleArgs<ExtArgs>>): Prisma__EnsembleClient<$Result.GetResult<Prisma.$EnsemblePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tracks<T extends Album$tracksArgs<ExtArgs> = {}>(args?: Subset<T, Album$tracksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inventories<T extends Album$inventoriesArgs<ExtArgs> = {}>(args?: Subset<T, Album$inventoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Album model
   */
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'Int'>
    readonly catalogNumber: FieldRef<"Album", 'String'>
    readonly title: FieldRef<"Album", 'String'>
    readonly releaseDate: FieldRef<"Album", 'DateTime'>
    readonly musicianId: FieldRef<"Album", 'Int'>
    readonly ensembleId: FieldRef<"Album", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }

  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Album createManyAndReturn
   */
  export type AlbumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
  }

  /**
   * Album updateManyAndReturn
   */
  export type AlbumUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }

  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to delete.
     */
    limit?: number
  }

  /**
   * Album.musician
   */
  export type Album$musicianArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Musician
     */
    select?: MusicianSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Musician
     */
    omit?: MusicianOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MusicianInclude<ExtArgs> | null
    where?: MusicianWhereInput
  }

  /**
   * Album.ensemble
   */
  export type Album$ensembleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ensemble
     */
    select?: EnsembleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ensemble
     */
    omit?: EnsembleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnsembleInclude<ExtArgs> | null
    where?: EnsembleWhereInput
  }

  /**
   * Album.tracks
   */
  export type Album$tracksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    cursor?: TrackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Album.inventories
   */
  export type Album$inventoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    cursor?: InventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
  }


  /**
   * Model Track
   */

  export type AggregateTrack = {
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  export type TrackAvgAggregateOutputType = {
    id: number | null
    albumId: number | null
    recordingId: number | null
    position: number | null
  }

  export type TrackSumAggregateOutputType = {
    id: number | null
    albumId: number | null
    recordingId: number | null
    position: number | null
  }

  export type TrackMinAggregateOutputType = {
    id: number | null
    albumId: number | null
    recordingId: number | null
    position: number | null
  }

  export type TrackMaxAggregateOutputType = {
    id: number | null
    albumId: number | null
    recordingId: number | null
    position: number | null
  }

  export type TrackCountAggregateOutputType = {
    id: number
    albumId: number
    recordingId: number
    position: number
    _all: number
  }


  export type TrackAvgAggregateInputType = {
    id?: true
    albumId?: true
    recordingId?: true
    position?: true
  }

  export type TrackSumAggregateInputType = {
    id?: true
    albumId?: true
    recordingId?: true
    position?: true
  }

  export type TrackMinAggregateInputType = {
    id?: true
    albumId?: true
    recordingId?: true
    position?: true
  }

  export type TrackMaxAggregateInputType = {
    id?: true
    albumId?: true
    recordingId?: true
    position?: true
  }

  export type TrackCountAggregateInputType = {
    id?: true
    albumId?: true
    recordingId?: true
    position?: true
    _all?: true
  }

  export type TrackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Track to aggregate.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tracks
    **/
    _count?: true | TrackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrackMaxAggregateInputType
  }

  export type GetTrackAggregateType<T extends TrackAggregateArgs> = {
        [P in keyof T & keyof AggregateTrack]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrack[P]>
      : GetScalarType<T[P], AggregateTrack[P]>
  }




  export type TrackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrackWhereInput
    orderBy?: TrackOrderByWithAggregationInput | TrackOrderByWithAggregationInput[]
    by: TrackScalarFieldEnum[] | TrackScalarFieldEnum
    having?: TrackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrackCountAggregateInputType | true
    _avg?: TrackAvgAggregateInputType
    _sum?: TrackSumAggregateInputType
    _min?: TrackMinAggregateInputType
    _max?: TrackMaxAggregateInputType
  }

  export type TrackGroupByOutputType = {
    id: number
    albumId: number
    recordingId: number
    position: number
    _count: TrackCountAggregateOutputType | null
    _avg: TrackAvgAggregateOutputType | null
    _sum: TrackSumAggregateOutputType | null
    _min: TrackMinAggregateOutputType | null
    _max: TrackMaxAggregateOutputType | null
  }

  type GetTrackGroupByPayload<T extends TrackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrackGroupByOutputType[P]>
            : GetScalarType<T[P], TrackGroupByOutputType[P]>
        }
      >
    >


  export type TrackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    recordingId?: boolean
    position?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    recordingId?: boolean
    position?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    recordingId?: boolean
    position?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["track"]>

  export type TrackSelectScalar = {
    id?: boolean
    albumId?: boolean
    recordingId?: boolean
    position?: boolean
  }

  export type TrackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "albumId" | "recordingId" | "position", ExtArgs["result"]["track"]>
  export type TrackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }
  export type TrackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }
  export type TrackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    recording?: boolean | RecordingDefaultArgs<ExtArgs>
  }

  export type $TrackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Track"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      recording: Prisma.$RecordingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      albumId: number
      recordingId: number
      position: number
    }, ExtArgs["result"]["track"]>
    composites: {}
  }

  type TrackGetPayload<S extends boolean | null | undefined | TrackDefaultArgs> = $Result.GetResult<Prisma.$TrackPayload, S>

  type TrackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrackCountAggregateInputType | true
    }

  export interface TrackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Track'], meta: { name: 'Track' } }
    /**
     * Find zero or one Track that matches the filter.
     * @param {TrackFindUniqueArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrackFindUniqueArgs>(args: SelectSubset<T, TrackFindUniqueArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Track that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrackFindUniqueOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrackFindUniqueOrThrowArgs>(args: SelectSubset<T, TrackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Track that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrackFindFirstArgs>(args?: SelectSubset<T, TrackFindFirstArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Track that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindFirstOrThrowArgs} args - Arguments to find a Track
     * @example
     * // Get one Track
     * const track = await prisma.track.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrackFindFirstOrThrowArgs>(args?: SelectSubset<T, TrackFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tracks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tracks
     * const tracks = await prisma.track.findMany()
     * 
     * // Get first 10 Tracks
     * const tracks = await prisma.track.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trackWithIdOnly = await prisma.track.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrackFindManyArgs>(args?: SelectSubset<T, TrackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Track.
     * @param {TrackCreateArgs} args - Arguments to create a Track.
     * @example
     * // Create one Track
     * const Track = await prisma.track.create({
     *   data: {
     *     // ... data to create a Track
     *   }
     * })
     * 
     */
    create<T extends TrackCreateArgs>(args: SelectSubset<T, TrackCreateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tracks.
     * @param {TrackCreateManyArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrackCreateManyArgs>(args?: SelectSubset<T, TrackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tracks and returns the data saved in the database.
     * @param {TrackCreateManyAndReturnArgs} args - Arguments to create many Tracks.
     * @example
     * // Create many Tracks
     * const track = await prisma.track.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tracks and only return the `id`
     * const trackWithIdOnly = await prisma.track.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrackCreateManyAndReturnArgs>(args?: SelectSubset<T, TrackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Track.
     * @param {TrackDeleteArgs} args - Arguments to delete one Track.
     * @example
     * // Delete one Track
     * const Track = await prisma.track.delete({
     *   where: {
     *     // ... filter to delete one Track
     *   }
     * })
     * 
     */
    delete<T extends TrackDeleteArgs>(args: SelectSubset<T, TrackDeleteArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Track.
     * @param {TrackUpdateArgs} args - Arguments to update one Track.
     * @example
     * // Update one Track
     * const track = await prisma.track.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrackUpdateArgs>(args: SelectSubset<T, TrackUpdateArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tracks.
     * @param {TrackDeleteManyArgs} args - Arguments to filter Tracks to delete.
     * @example
     * // Delete a few Tracks
     * const { count } = await prisma.track.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrackDeleteManyArgs>(args?: SelectSubset<T, TrackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tracks
     * const track = await prisma.track.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrackUpdateManyArgs>(args: SelectSubset<T, TrackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tracks and returns the data updated in the database.
     * @param {TrackUpdateManyAndReturnArgs} args - Arguments to update many Tracks.
     * @example
     * // Update many Tracks
     * const track = await prisma.track.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tracks and only return the `id`
     * const trackWithIdOnly = await prisma.track.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrackUpdateManyAndReturnArgs>(args: SelectSubset<T, TrackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Track.
     * @param {TrackUpsertArgs} args - Arguments to update or create a Track.
     * @example
     * // Update or create a Track
     * const track = await prisma.track.upsert({
     *   create: {
     *     // ... data to create a Track
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Track we want to update
     *   }
     * })
     */
    upsert<T extends TrackUpsertArgs>(args: SelectSubset<T, TrackUpsertArgs<ExtArgs>>): Prisma__TrackClient<$Result.GetResult<Prisma.$TrackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tracks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackCountArgs} args - Arguments to filter Tracks to count.
     * @example
     * // Count the number of Tracks
     * const count = await prisma.track.count({
     *   where: {
     *     // ... the filter for the Tracks we want to count
     *   }
     * })
    **/
    count<T extends TrackCountArgs>(
      args?: Subset<T, TrackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrackAggregateArgs>(args: Subset<T, TrackAggregateArgs>): Prisma.PrismaPromise<GetTrackAggregateType<T>>

    /**
     * Group by Track.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrackGroupByArgs['orderBy'] }
        : { orderBy?: TrackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Track model
   */
  readonly fields: TrackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Track.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recording<T extends RecordingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RecordingDefaultArgs<ExtArgs>>): Prisma__RecordingClient<$Result.GetResult<Prisma.$RecordingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Track model
   */
  interface TrackFieldRefs {
    readonly id: FieldRef<"Track", 'Int'>
    readonly albumId: FieldRef<"Track", 'Int'>
    readonly recordingId: FieldRef<"Track", 'Int'>
    readonly position: FieldRef<"Track", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Track findUnique
   */
  export type TrackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findUniqueOrThrow
   */
  export type TrackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track findFirst
   */
  export type TrackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findFirstOrThrow
   */
  export type TrackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Track to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tracks.
     */
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track findMany
   */
  export type TrackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter, which Tracks to fetch.
     */
    where?: TrackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tracks to fetch.
     */
    orderBy?: TrackOrderByWithRelationInput | TrackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tracks.
     */
    cursor?: TrackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tracks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tracks.
     */
    skip?: number
    distinct?: TrackScalarFieldEnum | TrackScalarFieldEnum[]
  }

  /**
   * Track create
   */
  export type TrackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to create a Track.
     */
    data: XOR<TrackCreateInput, TrackUncheckedCreateInput>
  }

  /**
   * Track createMany
   */
  export type TrackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Track createManyAndReturn
   */
  export type TrackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * The data used to create many Tracks.
     */
    data: TrackCreateManyInput | TrackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Track update
   */
  export type TrackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The data needed to update a Track.
     */
    data: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
    /**
     * Choose, which Track to update.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track updateMany
   */
  export type TrackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tracks.
     */
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyInput>
    /**
     * Filter which Tracks to update
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to update.
     */
    limit?: number
  }

  /**
   * Track updateManyAndReturn
   */
  export type TrackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * The data used to update Tracks.
     */
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyInput>
    /**
     * Filter which Tracks to update
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Track upsert
   */
  export type TrackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * The filter to search for the Track to update in case it exists.
     */
    where: TrackWhereUniqueInput
    /**
     * In case the Track found by the `where` argument doesn't exist, create a new Track with this data.
     */
    create: XOR<TrackCreateInput, TrackUncheckedCreateInput>
    /**
     * In case the Track was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrackUpdateInput, TrackUncheckedUpdateInput>
  }

  /**
   * Track delete
   */
  export type TrackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
    /**
     * Filter which Track to delete.
     */
    where: TrackWhereUniqueInput
  }

  /**
   * Track deleteMany
   */
  export type TrackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tracks to delete
     */
    where?: TrackWhereInput
    /**
     * Limit how many Tracks to delete.
     */
    limit?: number
  }

  /**
   * Track without action
   */
  export type TrackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Track
     */
    select?: TrackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Track
     */
    omit?: TrackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TrackInclude<ExtArgs> | null
  }


  /**
   * Model Inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    id: number | null
    albumId: number | null
    wholesalePrice: number | null
    retailPrice: number | null
    lastYearSales: number | null
    currentYearSales: number | null
    unsold: number | null
  }

  export type InventorySumAggregateOutputType = {
    id: number | null
    albumId: number | null
    wholesalePrice: number | null
    retailPrice: number | null
    lastYearSales: number | null
    currentYearSales: number | null
    unsold: number | null
  }

  export type InventoryMinAggregateOutputType = {
    id: number | null
    albumId: number | null
    wholesalePrice: number | null
    retailPrice: number | null
    lastYearSales: number | null
    currentYearSales: number | null
    unsold: number | null
  }

  export type InventoryMaxAggregateOutputType = {
    id: number | null
    albumId: number | null
    wholesalePrice: number | null
    retailPrice: number | null
    lastYearSales: number | null
    currentYearSales: number | null
    unsold: number | null
  }

  export type InventoryCountAggregateOutputType = {
    id: number
    albumId: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales: number
    currentYearSales: number
    unsold: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    id?: true
    albumId?: true
    wholesalePrice?: true
    retailPrice?: true
    lastYearSales?: true
    currentYearSales?: true
    unsold?: true
  }

  export type InventorySumAggregateInputType = {
    id?: true
    albumId?: true
    wholesalePrice?: true
    retailPrice?: true
    lastYearSales?: true
    currentYearSales?: true
    unsold?: true
  }

  export type InventoryMinAggregateInputType = {
    id?: true
    albumId?: true
    wholesalePrice?: true
    retailPrice?: true
    lastYearSales?: true
    currentYearSales?: true
    unsold?: true
  }

  export type InventoryMaxAggregateInputType = {
    id?: true
    albumId?: true
    wholesalePrice?: true
    retailPrice?: true
    lastYearSales?: true
    currentYearSales?: true
    unsold?: true
  }

  export type InventoryCountAggregateInputType = {
    id?: true
    albumId?: true
    wholesalePrice?: true
    retailPrice?: true
    lastYearSales?: true
    currentYearSales?: true
    unsold?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventory to aggregate.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type InventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryWhereInput
    orderBy?: InventoryOrderByWithAggregationInput | InventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: InventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    id: number
    albumId: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales: number
    currentYearSales: number
    unsold: number
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type InventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    wholesalePrice?: boolean
    retailPrice?: boolean
    lastYearSales?: boolean
    currentYearSales?: boolean
    unsold?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    sales?: boolean | Inventory$salesArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    wholesalePrice?: boolean
    retailPrice?: boolean
    lastYearSales?: boolean
    currentYearSales?: boolean
    unsold?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    albumId?: boolean
    wholesalePrice?: boolean
    retailPrice?: boolean
    lastYearSales?: boolean
    currentYearSales?: boolean
    unsold?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type InventorySelectScalar = {
    id?: boolean
    albumId?: boolean
    wholesalePrice?: boolean
    retailPrice?: boolean
    lastYearSales?: boolean
    currentYearSales?: boolean
    unsold?: boolean
  }

  export type InventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "albumId" | "wholesalePrice" | "retailPrice" | "lastYearSales" | "currentYearSales" | "unsold", ExtArgs["result"]["inventory"]>
  export type InventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    sales?: boolean | Inventory$salesArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }
  export type InventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }

  export type $InventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Inventory"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      sales: Prisma.$SalePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      albumId: number
      wholesalePrice: number
      retailPrice: number
      lastYearSales: number
      currentYearSales: number
      unsold: number
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = $Result.GetResult<Prisma.$InventoryPayload, S>

  type InventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface InventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryFindUniqueArgs>(args: SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryFindFirstArgs>(args?: SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryFindManyArgs>(args?: SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inventory.
     * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends InventoryCreateArgs>(args: SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inventories.
     * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryCreateManyArgs>(args?: SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Inventory.
     * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends InventoryDeleteArgs>(args: SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inventory.
     * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryUpdateArgs>(args: SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inventories.
     * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDeleteManyArgs>(args?: SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryUpdateManyArgs>(args: SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories and returns the data updated in the database.
     * @param {InventoryUpdateManyAndReturnArgs} args - Arguments to update many Inventories.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inventories and only return the `id`
     * const inventoryWithIdOnly = await prisma.inventory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, InventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Inventory.
     * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends InventoryUpsertArgs>(args: SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends InventoryCountArgs>(
      args?: Subset<T, InventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryGroupByArgs['orderBy'] }
        : { orderBy?: InventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Inventory model
   */
  readonly fields: InventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sales<T extends Inventory$salesArgs<ExtArgs> = {}>(args?: Subset<T, Inventory$salesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Inventory model
   */
  interface InventoryFieldRefs {
    readonly id: FieldRef<"Inventory", 'Int'>
    readonly albumId: FieldRef<"Inventory", 'Int'>
    readonly wholesalePrice: FieldRef<"Inventory", 'Float'>
    readonly retailPrice: FieldRef<"Inventory", 'Float'>
    readonly lastYearSales: FieldRef<"Inventory", 'Int'>
    readonly currentYearSales: FieldRef<"Inventory", 'Int'>
    readonly unsold: FieldRef<"Inventory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Inventory findUnique
   */
  export type InventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findUniqueOrThrow
   */
  export type InventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory findFirst
   */
  export type InventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findFirstOrThrow
   */
  export type InventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventory to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory findMany
   */
  export type InventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter, which Inventories to fetch.
     */
    where?: InventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Inventories to fetch.
     */
    orderBy?: InventoryOrderByWithRelationInput | InventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Inventories.
     */
    cursor?: InventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * Inventory create
   */
  export type InventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Inventory.
     */
    data: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
  }

  /**
   * Inventory createMany
   */
  export type InventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Inventory createManyAndReturn
   */
  export type InventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * The data used to create many Inventories.
     */
    data: InventoryCreateManyInput | InventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory update
   */
  export type InventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Inventory.
     */
    data: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
    /**
     * Choose, which Inventory to update.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory updateMany
   */
  export type InventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to update.
     */
    limit?: number
  }

  /**
   * Inventory updateManyAndReturn
   */
  export type InventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * The data used to update Inventories.
     */
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyInput>
    /**
     * Filter which Inventories to update
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Inventory upsert
   */
  export type InventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Inventory to update in case it exists.
     */
    where: InventoryWhereUniqueInput
    /**
     * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
     */
    create: XOR<InventoryCreateInput, InventoryUncheckedCreateInput>
    /**
     * In case the Inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryUpdateInput, InventoryUncheckedUpdateInput>
  }

  /**
   * Inventory delete
   */
  export type InventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
    /**
     * Filter which Inventory to delete.
     */
    where: InventoryWhereUniqueInput
  }

  /**
   * Inventory deleteMany
   */
  export type InventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Inventories to delete
     */
    where?: InventoryWhereInput
    /**
     * Limit how many Inventories to delete.
     */
    limit?: number
  }

  /**
   * Inventory.sales
   */
  export type Inventory$salesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    cursor?: SaleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Inventory without action
   */
  export type InventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Inventory
     */
    select?: InventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Inventory
     */
    omit?: InventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryInclude<ExtArgs> | null
  }


  /**
   * Model Sale
   */

  export type AggregateSale = {
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  export type SaleAvgAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    quantity: number | null
  }

  export type SaleSumAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    quantity: number | null
  }

  export type SaleMinAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    saleDate: Date | null
    quantity: number | null
  }

  export type SaleMaxAggregateOutputType = {
    id: number | null
    inventoryId: number | null
    saleDate: Date | null
    quantity: number | null
  }

  export type SaleCountAggregateOutputType = {
    id: number
    inventoryId: number
    saleDate: number
    quantity: number
    _all: number
  }


  export type SaleAvgAggregateInputType = {
    id?: true
    inventoryId?: true
    quantity?: true
  }

  export type SaleSumAggregateInputType = {
    id?: true
    inventoryId?: true
    quantity?: true
  }

  export type SaleMinAggregateInputType = {
    id?: true
    inventoryId?: true
    saleDate?: true
    quantity?: true
  }

  export type SaleMaxAggregateInputType = {
    id?: true
    inventoryId?: true
    saleDate?: true
    quantity?: true
  }

  export type SaleCountAggregateInputType = {
    id?: true
    inventoryId?: true
    saleDate?: true
    quantity?: true
    _all?: true
  }

  export type SaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sale to aggregate.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sales
    **/
    _count?: true | SaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SaleMaxAggregateInputType
  }

  export type GetSaleAggregateType<T extends SaleAggregateArgs> = {
        [P in keyof T & keyof AggregateSale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSale[P]>
      : GetScalarType<T[P], AggregateSale[P]>
  }




  export type SaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SaleWhereInput
    orderBy?: SaleOrderByWithAggregationInput | SaleOrderByWithAggregationInput[]
    by: SaleScalarFieldEnum[] | SaleScalarFieldEnum
    having?: SaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SaleCountAggregateInputType | true
    _avg?: SaleAvgAggregateInputType
    _sum?: SaleSumAggregateInputType
    _min?: SaleMinAggregateInputType
    _max?: SaleMaxAggregateInputType
  }

  export type SaleGroupByOutputType = {
    id: number
    inventoryId: number
    saleDate: Date
    quantity: number
    _count: SaleCountAggregateOutputType | null
    _avg: SaleAvgAggregateOutputType | null
    _sum: SaleSumAggregateOutputType | null
    _min: SaleMinAggregateOutputType | null
    _max: SaleMaxAggregateOutputType | null
  }

  type GetSaleGroupByPayload<T extends SaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SaleGroupByOutputType[P]>
            : GetScalarType<T[P], SaleGroupByOutputType[P]>
        }
      >
    >


  export type SaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    saleDate?: boolean
    quantity?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    saleDate?: boolean
    quantity?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    inventoryId?: boolean
    saleDate?: boolean
    quantity?: boolean
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sale"]>

  export type SaleSelectScalar = {
    id?: boolean
    inventoryId?: boolean
    saleDate?: boolean
    quantity?: boolean
  }

  export type SaleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "inventoryId" | "saleDate" | "quantity", ExtArgs["result"]["sale"]>
  export type SaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type SaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }
  export type SaleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inventory?: boolean | InventoryDefaultArgs<ExtArgs>
  }

  export type $SalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sale"
    objects: {
      inventory: Prisma.$InventoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      inventoryId: number
      saleDate: Date
      quantity: number
    }, ExtArgs["result"]["sale"]>
    composites: {}
  }

  type SaleGetPayload<S extends boolean | null | undefined | SaleDefaultArgs> = $Result.GetResult<Prisma.$SalePayload, S>

  type SaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SaleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SaleCountAggregateInputType | true
    }

  export interface SaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sale'], meta: { name: 'Sale' } }
    /**
     * Find zero or one Sale that matches the filter.
     * @param {SaleFindUniqueArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SaleFindUniqueArgs>(args: SelectSubset<T, SaleFindUniqueArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sale that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SaleFindUniqueOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SaleFindUniqueOrThrowArgs>(args: SelectSubset<T, SaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SaleFindFirstArgs>(args?: SelectSubset<T, SaleFindFirstArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindFirstOrThrowArgs} args - Arguments to find a Sale
     * @example
     * // Get one Sale
     * const sale = await prisma.sale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SaleFindFirstOrThrowArgs>(args?: SelectSubset<T, SaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sales
     * const sales = await prisma.sale.findMany()
     * 
     * // Get first 10 Sales
     * const sales = await prisma.sale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const saleWithIdOnly = await prisma.sale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SaleFindManyArgs>(args?: SelectSubset<T, SaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sale.
     * @param {SaleCreateArgs} args - Arguments to create a Sale.
     * @example
     * // Create one Sale
     * const Sale = await prisma.sale.create({
     *   data: {
     *     // ... data to create a Sale
     *   }
     * })
     * 
     */
    create<T extends SaleCreateArgs>(args: SelectSubset<T, SaleCreateArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sales.
     * @param {SaleCreateManyArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SaleCreateManyArgs>(args?: SelectSubset<T, SaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sales and returns the data saved in the database.
     * @param {SaleCreateManyAndReturnArgs} args - Arguments to create many Sales.
     * @example
     * // Create many Sales
     * const sale = await prisma.sale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sales and only return the `id`
     * const saleWithIdOnly = await prisma.sale.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SaleCreateManyAndReturnArgs>(args?: SelectSubset<T, SaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Sale.
     * @param {SaleDeleteArgs} args - Arguments to delete one Sale.
     * @example
     * // Delete one Sale
     * const Sale = await prisma.sale.delete({
     *   where: {
     *     // ... filter to delete one Sale
     *   }
     * })
     * 
     */
    delete<T extends SaleDeleteArgs>(args: SelectSubset<T, SaleDeleteArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sale.
     * @param {SaleUpdateArgs} args - Arguments to update one Sale.
     * @example
     * // Update one Sale
     * const sale = await prisma.sale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SaleUpdateArgs>(args: SelectSubset<T, SaleUpdateArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sales.
     * @param {SaleDeleteManyArgs} args - Arguments to filter Sales to delete.
     * @example
     * // Delete a few Sales
     * const { count } = await prisma.sale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SaleDeleteManyArgs>(args?: SelectSubset<T, SaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SaleUpdateManyArgs>(args: SelectSubset<T, SaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sales and returns the data updated in the database.
     * @param {SaleUpdateManyAndReturnArgs} args - Arguments to update many Sales.
     * @example
     * // Update many Sales
     * const sale = await prisma.sale.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sales and only return the `id`
     * const saleWithIdOnly = await prisma.sale.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SaleUpdateManyAndReturnArgs>(args: SelectSubset<T, SaleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Sale.
     * @param {SaleUpsertArgs} args - Arguments to update or create a Sale.
     * @example
     * // Update or create a Sale
     * const sale = await prisma.sale.upsert({
     *   create: {
     *     // ... data to create a Sale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sale we want to update
     *   }
     * })
     */
    upsert<T extends SaleUpsertArgs>(args: SelectSubset<T, SaleUpsertArgs<ExtArgs>>): Prisma__SaleClient<$Result.GetResult<Prisma.$SalePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleCountArgs} args - Arguments to filter Sales to count.
     * @example
     * // Count the number of Sales
     * const count = await prisma.sale.count({
     *   where: {
     *     // ... the filter for the Sales we want to count
     *   }
     * })
    **/
    count<T extends SaleCountArgs>(
      args?: Subset<T, SaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SaleAggregateArgs>(args: Subset<T, SaleAggregateArgs>): Prisma.PrismaPromise<GetSaleAggregateType<T>>

    /**
     * Group by Sale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SaleGroupByArgs['orderBy'] }
        : { orderBy?: SaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sale model
   */
  readonly fields: SaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inventory<T extends InventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDefaultArgs<ExtArgs>>): Prisma__InventoryClient<$Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sale model
   */
  interface SaleFieldRefs {
    readonly id: FieldRef<"Sale", 'Int'>
    readonly inventoryId: FieldRef<"Sale", 'Int'>
    readonly saleDate: FieldRef<"Sale", 'DateTime'>
    readonly quantity: FieldRef<"Sale", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sale findUnique
   */
  export type SaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findUniqueOrThrow
   */
  export type SaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale findFirst
   */
  export type SaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findFirstOrThrow
   */
  export type SaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sale to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sales.
     */
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale findMany
   */
  export type SaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter, which Sales to fetch.
     */
    where?: SaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sales to fetch.
     */
    orderBy?: SaleOrderByWithRelationInput | SaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sales.
     */
    cursor?: SaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sales.
     */
    skip?: number
    distinct?: SaleScalarFieldEnum | SaleScalarFieldEnum[]
  }

  /**
   * Sale create
   */
  export type SaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to create a Sale.
     */
    data: XOR<SaleCreateInput, SaleUncheckedCreateInput>
  }

  /**
   * Sale createMany
   */
  export type SaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sale createManyAndReturn
   */
  export type SaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * The data used to create many Sales.
     */
    data: SaleCreateManyInput | SaleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sale update
   */
  export type SaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The data needed to update a Sale.
     */
    data: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
    /**
     * Choose, which Sale to update.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale updateMany
   */
  export type SaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
  }

  /**
   * Sale updateManyAndReturn
   */
  export type SaleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * The data used to update Sales.
     */
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyInput>
    /**
     * Filter which Sales to update
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sale upsert
   */
  export type SaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * The filter to search for the Sale to update in case it exists.
     */
    where: SaleWhereUniqueInput
    /**
     * In case the Sale found by the `where` argument doesn't exist, create a new Sale with this data.
     */
    create: XOR<SaleCreateInput, SaleUncheckedCreateInput>
    /**
     * In case the Sale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SaleUpdateInput, SaleUncheckedUpdateInput>
  }

  /**
   * Sale delete
   */
  export type SaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
    /**
     * Filter which Sale to delete.
     */
    where: SaleWhereUniqueInput
  }

  /**
   * Sale deleteMany
   */
  export type SaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sales to delete
     */
    where?: SaleWhereInput
    /**
     * Limit how many Sales to delete.
     */
    limit?: number
  }

  /**
   * Sale without action
   */
  export type SaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sale
     */
    select?: SaleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sale
     */
    omit?: SaleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SaleInclude<ExtArgs> | null
  }


  /**
   * Model PrismaMigrations
   */

  export type AggregatePrismaMigrations = {
    _count: PrismaMigrationsCountAggregateOutputType | null
    _min: PrismaMigrationsMinAggregateOutputType | null
    _max: PrismaMigrationsMaxAggregateOutputType | null
  }

  export type PrismaMigrationsMinAggregateOutputType = {
    id: string | null
    checksum: string | null
    finished_at: Date | null
    migration_name: string | null
    logs: string | null
    rolled_back_at: Date | null
    started_at: Date | null
  }

  export type PrismaMigrationsMaxAggregateOutputType = {
    id: string | null
    checksum: string | null
    finished_at: Date | null
    migration_name: string | null
    logs: string | null
    rolled_back_at: Date | null
    started_at: Date | null
  }

  export type PrismaMigrationsCountAggregateOutputType = {
    id: number
    checksum: number
    finished_at: number
    migration_name: number
    logs: number
    rolled_back_at: number
    started_at: number
    _all: number
  }


  export type PrismaMigrationsMinAggregateInputType = {
    id?: true
    checksum?: true
    finished_at?: true
    migration_name?: true
    logs?: true
    rolled_back_at?: true
    started_at?: true
  }

  export type PrismaMigrationsMaxAggregateInputType = {
    id?: true
    checksum?: true
    finished_at?: true
    migration_name?: true
    logs?: true
    rolled_back_at?: true
    started_at?: true
  }

  export type PrismaMigrationsCountAggregateInputType = {
    id?: true
    checksum?: true
    finished_at?: true
    migration_name?: true
    logs?: true
    rolled_back_at?: true
    started_at?: true
    _all?: true
  }

  export type PrismaMigrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaMigrations to aggregate.
     */
    where?: PrismaMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaMigrations to fetch.
     */
    orderBy?: PrismaMigrationsOrderByWithRelationInput | PrismaMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrismaMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrismaMigrations
    **/
    _count?: true | PrismaMigrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrismaMigrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrismaMigrationsMaxAggregateInputType
  }

  export type GetPrismaMigrationsAggregateType<T extends PrismaMigrationsAggregateArgs> = {
        [P in keyof T & keyof AggregatePrismaMigrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrismaMigrations[P]>
      : GetScalarType<T[P], AggregatePrismaMigrations[P]>
  }




  export type PrismaMigrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrismaMigrationsWhereInput
    orderBy?: PrismaMigrationsOrderByWithAggregationInput | PrismaMigrationsOrderByWithAggregationInput[]
    by: PrismaMigrationsScalarFieldEnum[] | PrismaMigrationsScalarFieldEnum
    having?: PrismaMigrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrismaMigrationsCountAggregateInputType | true
    _min?: PrismaMigrationsMinAggregateInputType
    _max?: PrismaMigrationsMaxAggregateInputType
  }

  export type PrismaMigrationsGroupByOutputType = {
    id: string
    checksum: string
    finished_at: Date | null
    migration_name: string
    logs: string | null
    rolled_back_at: Date | null
    started_at: Date
    _count: PrismaMigrationsCountAggregateOutputType | null
    _min: PrismaMigrationsMinAggregateOutputType | null
    _max: PrismaMigrationsMaxAggregateOutputType | null
  }

  type GetPrismaMigrationsGroupByPayload<T extends PrismaMigrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrismaMigrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrismaMigrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrismaMigrationsGroupByOutputType[P]>
            : GetScalarType<T[P], PrismaMigrationsGroupByOutputType[P]>
        }
      >
    >


  export type PrismaMigrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checksum?: boolean
    finished_at?: boolean
    migration_name?: boolean
    logs?: boolean
    rolled_back_at?: boolean
    started_at?: boolean
  }, ExtArgs["result"]["prismaMigrations"]>

  export type PrismaMigrationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checksum?: boolean
    finished_at?: boolean
    migration_name?: boolean
    logs?: boolean
    rolled_back_at?: boolean
    started_at?: boolean
  }, ExtArgs["result"]["prismaMigrations"]>

  export type PrismaMigrationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    checksum?: boolean
    finished_at?: boolean
    migration_name?: boolean
    logs?: boolean
    rolled_back_at?: boolean
    started_at?: boolean
  }, ExtArgs["result"]["prismaMigrations"]>

  export type PrismaMigrationsSelectScalar = {
    id?: boolean
    checksum?: boolean
    finished_at?: boolean
    migration_name?: boolean
    logs?: boolean
    rolled_back_at?: boolean
    started_at?: boolean
  }

  export type PrismaMigrationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "checksum" | "finished_at" | "migration_name" | "logs" | "rolled_back_at" | "started_at", ExtArgs["result"]["prismaMigrations"]>

  export type $PrismaMigrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrismaMigrations"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      checksum: string
      finished_at: Date | null
      migration_name: string
      logs: string | null
      rolled_back_at: Date | null
      started_at: Date
    }, ExtArgs["result"]["prismaMigrations"]>
    composites: {}
  }

  type PrismaMigrationsGetPayload<S extends boolean | null | undefined | PrismaMigrationsDefaultArgs> = $Result.GetResult<Prisma.$PrismaMigrationsPayload, S>

  type PrismaMigrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrismaMigrationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrismaMigrationsCountAggregateInputType | true
    }

  export interface PrismaMigrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrismaMigrations'], meta: { name: 'PrismaMigrations' } }
    /**
     * Find zero or one PrismaMigrations that matches the filter.
     * @param {PrismaMigrationsFindUniqueArgs} args - Arguments to find a PrismaMigrations
     * @example
     * // Get one PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrismaMigrationsFindUniqueArgs>(args: SelectSubset<T, PrismaMigrationsFindUniqueArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrismaMigrations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrismaMigrationsFindUniqueOrThrowArgs} args - Arguments to find a PrismaMigrations
     * @example
     * // Get one PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrismaMigrationsFindUniqueOrThrowArgs>(args: SelectSubset<T, PrismaMigrationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrismaMigrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsFindFirstArgs} args - Arguments to find a PrismaMigrations
     * @example
     * // Get one PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrismaMigrationsFindFirstArgs>(args?: SelectSubset<T, PrismaMigrationsFindFirstArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrismaMigrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsFindFirstOrThrowArgs} args - Arguments to find a PrismaMigrations
     * @example
     * // Get one PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrismaMigrationsFindFirstOrThrowArgs>(args?: SelectSubset<T, PrismaMigrationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrismaMigrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findMany()
     * 
     * // Get first 10 PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const prismaMigrationsWithIdOnly = await prisma.prismaMigrations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrismaMigrationsFindManyArgs>(args?: SelectSubset<T, PrismaMigrationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrismaMigrations.
     * @param {PrismaMigrationsCreateArgs} args - Arguments to create a PrismaMigrations.
     * @example
     * // Create one PrismaMigrations
     * const PrismaMigrations = await prisma.prismaMigrations.create({
     *   data: {
     *     // ... data to create a PrismaMigrations
     *   }
     * })
     * 
     */
    create<T extends PrismaMigrationsCreateArgs>(args: SelectSubset<T, PrismaMigrationsCreateArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrismaMigrations.
     * @param {PrismaMigrationsCreateManyArgs} args - Arguments to create many PrismaMigrations.
     * @example
     * // Create many PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrismaMigrationsCreateManyArgs>(args?: SelectSubset<T, PrismaMigrationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrismaMigrations and returns the data saved in the database.
     * @param {PrismaMigrationsCreateManyAndReturnArgs} args - Arguments to create many PrismaMigrations.
     * @example
     * // Create many PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrismaMigrations and only return the `id`
     * const prismaMigrationsWithIdOnly = await prisma.prismaMigrations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrismaMigrationsCreateManyAndReturnArgs>(args?: SelectSubset<T, PrismaMigrationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrismaMigrations.
     * @param {PrismaMigrationsDeleteArgs} args - Arguments to delete one PrismaMigrations.
     * @example
     * // Delete one PrismaMigrations
     * const PrismaMigrations = await prisma.prismaMigrations.delete({
     *   where: {
     *     // ... filter to delete one PrismaMigrations
     *   }
     * })
     * 
     */
    delete<T extends PrismaMigrationsDeleteArgs>(args: SelectSubset<T, PrismaMigrationsDeleteArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrismaMigrations.
     * @param {PrismaMigrationsUpdateArgs} args - Arguments to update one PrismaMigrations.
     * @example
     * // Update one PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrismaMigrationsUpdateArgs>(args: SelectSubset<T, PrismaMigrationsUpdateArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrismaMigrations.
     * @param {PrismaMigrationsDeleteManyArgs} args - Arguments to filter PrismaMigrations to delete.
     * @example
     * // Delete a few PrismaMigrations
     * const { count } = await prisma.prismaMigrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrismaMigrationsDeleteManyArgs>(args?: SelectSubset<T, PrismaMigrationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrismaMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrismaMigrationsUpdateManyArgs>(args: SelectSubset<T, PrismaMigrationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrismaMigrations and returns the data updated in the database.
     * @param {PrismaMigrationsUpdateManyAndReturnArgs} args - Arguments to update many PrismaMigrations.
     * @example
     * // Update many PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrismaMigrations and only return the `id`
     * const prismaMigrationsWithIdOnly = await prisma.prismaMigrations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrismaMigrationsUpdateManyAndReturnArgs>(args: SelectSubset<T, PrismaMigrationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrismaMigrations.
     * @param {PrismaMigrationsUpsertArgs} args - Arguments to update or create a PrismaMigrations.
     * @example
     * // Update or create a PrismaMigrations
     * const prismaMigrations = await prisma.prismaMigrations.upsert({
     *   create: {
     *     // ... data to create a PrismaMigrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrismaMigrations we want to update
     *   }
     * })
     */
    upsert<T extends PrismaMigrationsUpsertArgs>(args: SelectSubset<T, PrismaMigrationsUpsertArgs<ExtArgs>>): Prisma__PrismaMigrationsClient<$Result.GetResult<Prisma.$PrismaMigrationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrismaMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsCountArgs} args - Arguments to filter PrismaMigrations to count.
     * @example
     * // Count the number of PrismaMigrations
     * const count = await prisma.prismaMigrations.count({
     *   where: {
     *     // ... the filter for the PrismaMigrations we want to count
     *   }
     * })
    **/
    count<T extends PrismaMigrationsCountArgs>(
      args?: Subset<T, PrismaMigrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrismaMigrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrismaMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrismaMigrationsAggregateArgs>(args: Subset<T, PrismaMigrationsAggregateArgs>): Prisma.PrismaPromise<GetPrismaMigrationsAggregateType<T>>

    /**
     * Group by PrismaMigrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrismaMigrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrismaMigrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrismaMigrationsGroupByArgs['orderBy'] }
        : { orderBy?: PrismaMigrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrismaMigrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrismaMigrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrismaMigrations model
   */
  readonly fields: PrismaMigrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrismaMigrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrismaMigrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrismaMigrations model
   */
  interface PrismaMigrationsFieldRefs {
    readonly id: FieldRef<"PrismaMigrations", 'String'>
    readonly checksum: FieldRef<"PrismaMigrations", 'String'>
    readonly finished_at: FieldRef<"PrismaMigrations", 'DateTime'>
    readonly migration_name: FieldRef<"PrismaMigrations", 'String'>
    readonly logs: FieldRef<"PrismaMigrations", 'String'>
    readonly rolled_back_at: FieldRef<"PrismaMigrations", 'DateTime'>
    readonly started_at: FieldRef<"PrismaMigrations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PrismaMigrations findUnique
   */
  export type PrismaMigrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which PrismaMigrations to fetch.
     */
    where: PrismaMigrationsWhereUniqueInput
  }

  /**
   * PrismaMigrations findUniqueOrThrow
   */
  export type PrismaMigrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which PrismaMigrations to fetch.
     */
    where: PrismaMigrationsWhereUniqueInput
  }

  /**
   * PrismaMigrations findFirst
   */
  export type PrismaMigrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which PrismaMigrations to fetch.
     */
    where?: PrismaMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaMigrations to fetch.
     */
    orderBy?: PrismaMigrationsOrderByWithRelationInput | PrismaMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaMigrations.
     */
    cursor?: PrismaMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaMigrations.
     */
    distinct?: PrismaMigrationsScalarFieldEnum | PrismaMigrationsScalarFieldEnum[]
  }

  /**
   * PrismaMigrations findFirstOrThrow
   */
  export type PrismaMigrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which PrismaMigrations to fetch.
     */
    where?: PrismaMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaMigrations to fetch.
     */
    orderBy?: PrismaMigrationsOrderByWithRelationInput | PrismaMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrismaMigrations.
     */
    cursor?: PrismaMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaMigrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrismaMigrations.
     */
    distinct?: PrismaMigrationsScalarFieldEnum | PrismaMigrationsScalarFieldEnum[]
  }

  /**
   * PrismaMigrations findMany
   */
  export type PrismaMigrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter, which PrismaMigrations to fetch.
     */
    where?: PrismaMigrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrismaMigrations to fetch.
     */
    orderBy?: PrismaMigrationsOrderByWithRelationInput | PrismaMigrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrismaMigrations.
     */
    cursor?: PrismaMigrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrismaMigrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrismaMigrations.
     */
    skip?: number
    distinct?: PrismaMigrationsScalarFieldEnum | PrismaMigrationsScalarFieldEnum[]
  }

  /**
   * PrismaMigrations create
   */
  export type PrismaMigrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * The data needed to create a PrismaMigrations.
     */
    data: XOR<PrismaMigrationsCreateInput, PrismaMigrationsUncheckedCreateInput>
  }

  /**
   * PrismaMigrations createMany
   */
  export type PrismaMigrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrismaMigrations.
     */
    data: PrismaMigrationsCreateManyInput | PrismaMigrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrismaMigrations createManyAndReturn
   */
  export type PrismaMigrationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * The data used to create many PrismaMigrations.
     */
    data: PrismaMigrationsCreateManyInput | PrismaMigrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrismaMigrations update
   */
  export type PrismaMigrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * The data needed to update a PrismaMigrations.
     */
    data: XOR<PrismaMigrationsUpdateInput, PrismaMigrationsUncheckedUpdateInput>
    /**
     * Choose, which PrismaMigrations to update.
     */
    where: PrismaMigrationsWhereUniqueInput
  }

  /**
   * PrismaMigrations updateMany
   */
  export type PrismaMigrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrismaMigrations.
     */
    data: XOR<PrismaMigrationsUpdateManyMutationInput, PrismaMigrationsUncheckedUpdateManyInput>
    /**
     * Filter which PrismaMigrations to update
     */
    where?: PrismaMigrationsWhereInput
    /**
     * Limit how many PrismaMigrations to update.
     */
    limit?: number
  }

  /**
   * PrismaMigrations updateManyAndReturn
   */
  export type PrismaMigrationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * The data used to update PrismaMigrations.
     */
    data: XOR<PrismaMigrationsUpdateManyMutationInput, PrismaMigrationsUncheckedUpdateManyInput>
    /**
     * Filter which PrismaMigrations to update
     */
    where?: PrismaMigrationsWhereInput
    /**
     * Limit how many PrismaMigrations to update.
     */
    limit?: number
  }

  /**
   * PrismaMigrations upsert
   */
  export type PrismaMigrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * The filter to search for the PrismaMigrations to update in case it exists.
     */
    where: PrismaMigrationsWhereUniqueInput
    /**
     * In case the PrismaMigrations found by the `where` argument doesn't exist, create a new PrismaMigrations with this data.
     */
    create: XOR<PrismaMigrationsCreateInput, PrismaMigrationsUncheckedCreateInput>
    /**
     * In case the PrismaMigrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrismaMigrationsUpdateInput, PrismaMigrationsUncheckedUpdateInput>
  }

  /**
   * PrismaMigrations delete
   */
  export type PrismaMigrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
    /**
     * Filter which PrismaMigrations to delete.
     */
    where: PrismaMigrationsWhereUniqueInput
  }

  /**
   * PrismaMigrations deleteMany
   */
  export type PrismaMigrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrismaMigrations to delete
     */
    where?: PrismaMigrationsWhereInput
    /**
     * Limit how many PrismaMigrations to delete.
     */
    limit?: number
  }

  /**
   * PrismaMigrations without action
   */
  export type PrismaMigrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrismaMigrations
     */
    select?: PrismaMigrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrismaMigrations
     */
    omit?: PrismaMigrationsOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MusicianScalarFieldEnum: {
    id: 'id',
    name: 'name',
    birthDate: 'birthDate',
    country: 'country',
    bio: 'bio',
    roles: 'roles'
  };

  export type MusicianScalarFieldEnum = (typeof MusicianScalarFieldEnum)[keyof typeof MusicianScalarFieldEnum]


  export const EnsembleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    formationDate: 'formationDate',
    dissolutionDate: 'dissolutionDate',
    type: 'type'
  };

  export type EnsembleScalarFieldEnum = (typeof EnsembleScalarFieldEnum)[keyof typeof EnsembleScalarFieldEnum]


  export const EnsembleMemberScalarFieldEnum: {
    id: 'id',
    ensembleId: 'ensembleId',
    musicianId: 'musicianId',
    role: 'role',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type EnsembleMemberScalarFieldEnum = (typeof EnsembleMemberScalarFieldEnum)[keyof typeof EnsembleMemberScalarFieldEnum]


  export const CompositionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    duration: 'duration',
    creationYear: 'creationYear',
    genre: 'genre'
  };

  export type CompositionScalarFieldEnum = (typeof CompositionScalarFieldEnum)[keyof typeof CompositionScalarFieldEnum]


  export const RecordingScalarFieldEnum: {
    id: 'id',
    compositionId: 'compositionId',
    recordingDate: 'recordingDate',
    studio: 'studio'
  };

  export type RecordingScalarFieldEnum = (typeof RecordingScalarFieldEnum)[keyof typeof RecordingScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    catalogNumber: 'catalogNumber',
    title: 'title',
    releaseDate: 'releaseDate',
    musicianId: 'musicianId',
    ensembleId: 'ensembleId'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const TrackScalarFieldEnum: {
    id: 'id',
    albumId: 'albumId',
    recordingId: 'recordingId',
    position: 'position'
  };

  export type TrackScalarFieldEnum = (typeof TrackScalarFieldEnum)[keyof typeof TrackScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    id: 'id',
    albumId: 'albumId',
    wholesalePrice: 'wholesalePrice',
    retailPrice: 'retailPrice',
    lastYearSales: 'lastYearSales',
    currentYearSales: 'currentYearSales',
    unsold: 'unsold'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const SaleScalarFieldEnum: {
    id: 'id',
    inventoryId: 'inventoryId',
    saleDate: 'saleDate',
    quantity: 'quantity'
  };

  export type SaleScalarFieldEnum = (typeof SaleScalarFieldEnum)[keyof typeof SaleScalarFieldEnum]


  export const PrismaMigrationsScalarFieldEnum: {
    id: 'id',
    checksum: 'checksum',
    finished_at: 'finished_at',
    migration_name: 'migration_name',
    logs: 'logs',
    rolled_back_at: 'rolled_back_at',
    started_at: 'started_at'
  };

  export type PrismaMigrationsScalarFieldEnum = (typeof PrismaMigrationsScalarFieldEnum)[keyof typeof PrismaMigrationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MusicianWhereInput = {
    AND?: MusicianWhereInput | MusicianWhereInput[]
    OR?: MusicianWhereInput[]
    NOT?: MusicianWhereInput | MusicianWhereInput[]
    id?: IntFilter<"Musician"> | number
    name?: StringFilter<"Musician"> | string
    birthDate?: DateTimeNullableFilter<"Musician"> | Date | string | null
    country?: StringNullableFilter<"Musician"> | string | null
    bio?: StringNullableFilter<"Musician"> | string | null
    roles?: EnumRoleNullableListFilter<"Musician">
    ensembles?: EnsembleMemberListRelationFilter
    soloAlbums?: AlbumListRelationFilter
  }

  export type MusicianOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    roles?: SortOrder
    ensembles?: EnsembleMemberOrderByRelationAggregateInput
    soloAlbums?: AlbumOrderByRelationAggregateInput
  }

  export type MusicianWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: MusicianWhereInput | MusicianWhereInput[]
    OR?: MusicianWhereInput[]
    NOT?: MusicianWhereInput | MusicianWhereInput[]
    birthDate?: DateTimeNullableFilter<"Musician"> | Date | string | null
    country?: StringNullableFilter<"Musician"> | string | null
    bio?: StringNullableFilter<"Musician"> | string | null
    roles?: EnumRoleNullableListFilter<"Musician">
    ensembles?: EnsembleMemberListRelationFilter
    soloAlbums?: AlbumListRelationFilter
  }, "id" | "name">

  export type MusicianOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    roles?: SortOrder
    _count?: MusicianCountOrderByAggregateInput
    _avg?: MusicianAvgOrderByAggregateInput
    _max?: MusicianMaxOrderByAggregateInput
    _min?: MusicianMinOrderByAggregateInput
    _sum?: MusicianSumOrderByAggregateInput
  }

  export type MusicianScalarWhereWithAggregatesInput = {
    AND?: MusicianScalarWhereWithAggregatesInput | MusicianScalarWhereWithAggregatesInput[]
    OR?: MusicianScalarWhereWithAggregatesInput[]
    NOT?: MusicianScalarWhereWithAggregatesInput | MusicianScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Musician"> | number
    name?: StringWithAggregatesFilter<"Musician"> | string
    birthDate?: DateTimeNullableWithAggregatesFilter<"Musician"> | Date | string | null
    country?: StringNullableWithAggregatesFilter<"Musician"> | string | null
    bio?: StringNullableWithAggregatesFilter<"Musician"> | string | null
    roles?: EnumRoleNullableListFilter<"Musician">
  }

  export type EnsembleWhereInput = {
    AND?: EnsembleWhereInput | EnsembleWhereInput[]
    OR?: EnsembleWhereInput[]
    NOT?: EnsembleWhereInput | EnsembleWhereInput[]
    id?: IntFilter<"Ensemble"> | number
    name?: StringFilter<"Ensemble"> | string
    formationDate?: DateTimeFilter<"Ensemble"> | Date | string
    dissolutionDate?: DateTimeNullableFilter<"Ensemble"> | Date | string | null
    type?: StringFilter<"Ensemble"> | string
    members?: EnsembleMemberListRelationFilter
    albums?: AlbumListRelationFilter
  }

  export type EnsembleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    formationDate?: SortOrder
    dissolutionDate?: SortOrderInput | SortOrder
    type?: SortOrder
    members?: EnsembleMemberOrderByRelationAggregateInput
    albums?: AlbumOrderByRelationAggregateInput
  }

  export type EnsembleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: EnsembleWhereInput | EnsembleWhereInput[]
    OR?: EnsembleWhereInput[]
    NOT?: EnsembleWhereInput | EnsembleWhereInput[]
    formationDate?: DateTimeFilter<"Ensemble"> | Date | string
    dissolutionDate?: DateTimeNullableFilter<"Ensemble"> | Date | string | null
    type?: StringFilter<"Ensemble"> | string
    members?: EnsembleMemberListRelationFilter
    albums?: AlbumListRelationFilter
  }, "id" | "name">

  export type EnsembleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    formationDate?: SortOrder
    dissolutionDate?: SortOrderInput | SortOrder
    type?: SortOrder
    _count?: EnsembleCountOrderByAggregateInput
    _avg?: EnsembleAvgOrderByAggregateInput
    _max?: EnsembleMaxOrderByAggregateInput
    _min?: EnsembleMinOrderByAggregateInput
    _sum?: EnsembleSumOrderByAggregateInput
  }

  export type EnsembleScalarWhereWithAggregatesInput = {
    AND?: EnsembleScalarWhereWithAggregatesInput | EnsembleScalarWhereWithAggregatesInput[]
    OR?: EnsembleScalarWhereWithAggregatesInput[]
    NOT?: EnsembleScalarWhereWithAggregatesInput | EnsembleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ensemble"> | number
    name?: StringWithAggregatesFilter<"Ensemble"> | string
    formationDate?: DateTimeWithAggregatesFilter<"Ensemble"> | Date | string
    dissolutionDate?: DateTimeNullableWithAggregatesFilter<"Ensemble"> | Date | string | null
    type?: StringWithAggregatesFilter<"Ensemble"> | string
  }

  export type EnsembleMemberWhereInput = {
    AND?: EnsembleMemberWhereInput | EnsembleMemberWhereInput[]
    OR?: EnsembleMemberWhereInput[]
    NOT?: EnsembleMemberWhereInput | EnsembleMemberWhereInput[]
    id?: IntFilter<"EnsembleMember"> | number
    ensembleId?: IntFilter<"EnsembleMember"> | number
    musicianId?: IntFilter<"EnsembleMember"> | number
    role?: StringFilter<"EnsembleMember"> | string
    startDate?: DateTimeFilter<"EnsembleMember"> | Date | string
    endDate?: DateTimeNullableFilter<"EnsembleMember"> | Date | string | null
    ensemble?: XOR<EnsembleScalarRelationFilter, EnsembleWhereInput>
    musician?: XOR<MusicianScalarRelationFilter, MusicianWhereInput>
  }

  export type EnsembleMemberOrderByWithRelationInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    ensemble?: EnsembleOrderByWithRelationInput
    musician?: MusicianOrderByWithRelationInput
  }

  export type EnsembleMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EnsembleMemberWhereInput | EnsembleMemberWhereInput[]
    OR?: EnsembleMemberWhereInput[]
    NOT?: EnsembleMemberWhereInput | EnsembleMemberWhereInput[]
    ensembleId?: IntFilter<"EnsembleMember"> | number
    musicianId?: IntFilter<"EnsembleMember"> | number
    role?: StringFilter<"EnsembleMember"> | string
    startDate?: DateTimeFilter<"EnsembleMember"> | Date | string
    endDate?: DateTimeNullableFilter<"EnsembleMember"> | Date | string | null
    ensemble?: XOR<EnsembleScalarRelationFilter, EnsembleWhereInput>
    musician?: XOR<MusicianScalarRelationFilter, MusicianWhereInput>
  }, "id">

  export type EnsembleMemberOrderByWithAggregationInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    _count?: EnsembleMemberCountOrderByAggregateInput
    _avg?: EnsembleMemberAvgOrderByAggregateInput
    _max?: EnsembleMemberMaxOrderByAggregateInput
    _min?: EnsembleMemberMinOrderByAggregateInput
    _sum?: EnsembleMemberSumOrderByAggregateInput
  }

  export type EnsembleMemberScalarWhereWithAggregatesInput = {
    AND?: EnsembleMemberScalarWhereWithAggregatesInput | EnsembleMemberScalarWhereWithAggregatesInput[]
    OR?: EnsembleMemberScalarWhereWithAggregatesInput[]
    NOT?: EnsembleMemberScalarWhereWithAggregatesInput | EnsembleMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EnsembleMember"> | number
    ensembleId?: IntWithAggregatesFilter<"EnsembleMember"> | number
    musicianId?: IntWithAggregatesFilter<"EnsembleMember"> | number
    role?: StringWithAggregatesFilter<"EnsembleMember"> | string
    startDate?: DateTimeWithAggregatesFilter<"EnsembleMember"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"EnsembleMember"> | Date | string | null
  }

  export type CompositionWhereInput = {
    AND?: CompositionWhereInput | CompositionWhereInput[]
    OR?: CompositionWhereInput[]
    NOT?: CompositionWhereInput | CompositionWhereInput[]
    id?: IntFilter<"Composition"> | number
    title?: StringFilter<"Composition"> | string
    duration?: IntFilter<"Composition"> | number
    creationYear?: IntFilter<"Composition"> | number
    genre?: StringFilter<"Composition"> | string
    recordings?: RecordingListRelationFilter
  }

  export type CompositionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
    genre?: SortOrder
    recordings?: RecordingOrderByRelationAggregateInput
  }

  export type CompositionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompositionWhereInput | CompositionWhereInput[]
    OR?: CompositionWhereInput[]
    NOT?: CompositionWhereInput | CompositionWhereInput[]
    title?: StringFilter<"Composition"> | string
    duration?: IntFilter<"Composition"> | number
    creationYear?: IntFilter<"Composition"> | number
    genre?: StringFilter<"Composition"> | string
    recordings?: RecordingListRelationFilter
  }, "id">

  export type CompositionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
    genre?: SortOrder
    _count?: CompositionCountOrderByAggregateInput
    _avg?: CompositionAvgOrderByAggregateInput
    _max?: CompositionMaxOrderByAggregateInput
    _min?: CompositionMinOrderByAggregateInput
    _sum?: CompositionSumOrderByAggregateInput
  }

  export type CompositionScalarWhereWithAggregatesInput = {
    AND?: CompositionScalarWhereWithAggregatesInput | CompositionScalarWhereWithAggregatesInput[]
    OR?: CompositionScalarWhereWithAggregatesInput[]
    NOT?: CompositionScalarWhereWithAggregatesInput | CompositionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Composition"> | number
    title?: StringWithAggregatesFilter<"Composition"> | string
    duration?: IntWithAggregatesFilter<"Composition"> | number
    creationYear?: IntWithAggregatesFilter<"Composition"> | number
    genre?: StringWithAggregatesFilter<"Composition"> | string
  }

  export type RecordingWhereInput = {
    AND?: RecordingWhereInput | RecordingWhereInput[]
    OR?: RecordingWhereInput[]
    NOT?: RecordingWhereInput | RecordingWhereInput[]
    id?: IntFilter<"Recording"> | number
    compositionId?: IntFilter<"Recording"> | number
    recordingDate?: DateTimeFilter<"Recording"> | Date | string
    studio?: StringNullableFilter<"Recording"> | string | null
    composition?: XOR<CompositionScalarRelationFilter, CompositionWhereInput>
    albums?: TrackListRelationFilter
  }

  export type RecordingOrderByWithRelationInput = {
    id?: SortOrder
    compositionId?: SortOrder
    recordingDate?: SortOrder
    studio?: SortOrderInput | SortOrder
    composition?: CompositionOrderByWithRelationInput
    albums?: TrackOrderByRelationAggregateInput
  }

  export type RecordingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RecordingWhereInput | RecordingWhereInput[]
    OR?: RecordingWhereInput[]
    NOT?: RecordingWhereInput | RecordingWhereInput[]
    compositionId?: IntFilter<"Recording"> | number
    recordingDate?: DateTimeFilter<"Recording"> | Date | string
    studio?: StringNullableFilter<"Recording"> | string | null
    composition?: XOR<CompositionScalarRelationFilter, CompositionWhereInput>
    albums?: TrackListRelationFilter
  }, "id">

  export type RecordingOrderByWithAggregationInput = {
    id?: SortOrder
    compositionId?: SortOrder
    recordingDate?: SortOrder
    studio?: SortOrderInput | SortOrder
    _count?: RecordingCountOrderByAggregateInput
    _avg?: RecordingAvgOrderByAggregateInput
    _max?: RecordingMaxOrderByAggregateInput
    _min?: RecordingMinOrderByAggregateInput
    _sum?: RecordingSumOrderByAggregateInput
  }

  export type RecordingScalarWhereWithAggregatesInput = {
    AND?: RecordingScalarWhereWithAggregatesInput | RecordingScalarWhereWithAggregatesInput[]
    OR?: RecordingScalarWhereWithAggregatesInput[]
    NOT?: RecordingScalarWhereWithAggregatesInput | RecordingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Recording"> | number
    compositionId?: IntWithAggregatesFilter<"Recording"> | number
    recordingDate?: DateTimeWithAggregatesFilter<"Recording"> | Date | string
    studio?: StringNullableWithAggregatesFilter<"Recording"> | string | null
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: IntFilter<"Album"> | number
    catalogNumber?: StringFilter<"Album"> | string
    title?: StringFilter<"Album"> | string
    releaseDate?: DateTimeFilter<"Album"> | Date | string
    musicianId?: IntNullableFilter<"Album"> | number | null
    ensembleId?: IntNullableFilter<"Album"> | number | null
    musician?: XOR<MusicianNullableScalarRelationFilter, MusicianWhereInput> | null
    ensemble?: XOR<EnsembleNullableScalarRelationFilter, EnsembleWhereInput> | null
    tracks?: TrackListRelationFilter
    inventories?: InventoryListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    catalogNumber?: SortOrder
    title?: SortOrder
    releaseDate?: SortOrder
    musicianId?: SortOrderInput | SortOrder
    ensembleId?: SortOrderInput | SortOrder
    musician?: MusicianOrderByWithRelationInput
    ensemble?: EnsembleOrderByWithRelationInput
    tracks?: TrackOrderByRelationAggregateInput
    inventories?: InventoryOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    catalogNumber?: string
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    title?: StringFilter<"Album"> | string
    releaseDate?: DateTimeFilter<"Album"> | Date | string
    musicianId?: IntNullableFilter<"Album"> | number | null
    ensembleId?: IntNullableFilter<"Album"> | number | null
    musician?: XOR<MusicianNullableScalarRelationFilter, MusicianWhereInput> | null
    ensemble?: XOR<EnsembleNullableScalarRelationFilter, EnsembleWhereInput> | null
    tracks?: TrackListRelationFilter
    inventories?: InventoryListRelationFilter
  }, "id" | "catalogNumber">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    catalogNumber?: SortOrder
    title?: SortOrder
    releaseDate?: SortOrder
    musicianId?: SortOrderInput | SortOrder
    ensembleId?: SortOrderInput | SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _avg?: AlbumAvgOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
    _sum?: AlbumSumOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Album"> | number
    catalogNumber?: StringWithAggregatesFilter<"Album"> | string
    title?: StringWithAggregatesFilter<"Album"> | string
    releaseDate?: DateTimeWithAggregatesFilter<"Album"> | Date | string
    musicianId?: IntNullableWithAggregatesFilter<"Album"> | number | null
    ensembleId?: IntNullableWithAggregatesFilter<"Album"> | number | null
  }

  export type TrackWhereInput = {
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    id?: IntFilter<"Track"> | number
    albumId?: IntFilter<"Track"> | number
    recordingId?: IntFilter<"Track"> | number
    position?: IntFilter<"Track"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    recording?: XOR<RecordingScalarRelationFilter, RecordingWhereInput>
  }

  export type TrackOrderByWithRelationInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
    album?: AlbumOrderByWithRelationInput
    recording?: RecordingOrderByWithRelationInput
  }

  export type TrackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TrackWhereInput | TrackWhereInput[]
    OR?: TrackWhereInput[]
    NOT?: TrackWhereInput | TrackWhereInput[]
    albumId?: IntFilter<"Track"> | number
    recordingId?: IntFilter<"Track"> | number
    position?: IntFilter<"Track"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    recording?: XOR<RecordingScalarRelationFilter, RecordingWhereInput>
  }, "id">

  export type TrackOrderByWithAggregationInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
    _count?: TrackCountOrderByAggregateInput
    _avg?: TrackAvgOrderByAggregateInput
    _max?: TrackMaxOrderByAggregateInput
    _min?: TrackMinOrderByAggregateInput
    _sum?: TrackSumOrderByAggregateInput
  }

  export type TrackScalarWhereWithAggregatesInput = {
    AND?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    OR?: TrackScalarWhereWithAggregatesInput[]
    NOT?: TrackScalarWhereWithAggregatesInput | TrackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Track"> | number
    albumId?: IntWithAggregatesFilter<"Track"> | number
    recordingId?: IntWithAggregatesFilter<"Track"> | number
    position?: IntWithAggregatesFilter<"Track"> | number
  }

  export type InventoryWhereInput = {
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    id?: IntFilter<"Inventory"> | number
    albumId?: IntFilter<"Inventory"> | number
    wholesalePrice?: FloatFilter<"Inventory"> | number
    retailPrice?: FloatFilter<"Inventory"> | number
    lastYearSales?: IntFilter<"Inventory"> | number
    currentYearSales?: IntFilter<"Inventory"> | number
    unsold?: IntFilter<"Inventory"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    sales?: SaleListRelationFilter
  }

  export type InventoryOrderByWithRelationInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
    album?: AlbumOrderByWithRelationInput
    sales?: SaleOrderByRelationAggregateInput
  }

  export type InventoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InventoryWhereInput | InventoryWhereInput[]
    OR?: InventoryWhereInput[]
    NOT?: InventoryWhereInput | InventoryWhereInput[]
    albumId?: IntFilter<"Inventory"> | number
    wholesalePrice?: FloatFilter<"Inventory"> | number
    retailPrice?: FloatFilter<"Inventory"> | number
    lastYearSales?: IntFilter<"Inventory"> | number
    currentYearSales?: IntFilter<"Inventory"> | number
    unsold?: IntFilter<"Inventory"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    sales?: SaleListRelationFilter
  }, "id">

  export type InventoryOrderByWithAggregationInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
    _count?: InventoryCountOrderByAggregateInput
    _avg?: InventoryAvgOrderByAggregateInput
    _max?: InventoryMaxOrderByAggregateInput
    _min?: InventoryMinOrderByAggregateInput
    _sum?: InventorySumOrderByAggregateInput
  }

  export type InventoryScalarWhereWithAggregatesInput = {
    AND?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    OR?: InventoryScalarWhereWithAggregatesInput[]
    NOT?: InventoryScalarWhereWithAggregatesInput | InventoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Inventory"> | number
    albumId?: IntWithAggregatesFilter<"Inventory"> | number
    wholesalePrice?: FloatWithAggregatesFilter<"Inventory"> | number
    retailPrice?: FloatWithAggregatesFilter<"Inventory"> | number
    lastYearSales?: IntWithAggregatesFilter<"Inventory"> | number
    currentYearSales?: IntWithAggregatesFilter<"Inventory"> | number
    unsold?: IntWithAggregatesFilter<"Inventory"> | number
  }

  export type SaleWhereInput = {
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    id?: IntFilter<"Sale"> | number
    inventoryId?: IntFilter<"Sale"> | number
    saleDate?: DateTimeFilter<"Sale"> | Date | string
    quantity?: IntFilter<"Sale"> | number
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }

  export type SaleOrderByWithRelationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    saleDate?: SortOrder
    quantity?: SortOrder
    inventory?: InventoryOrderByWithRelationInput
  }

  export type SaleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SaleWhereInput | SaleWhereInput[]
    OR?: SaleWhereInput[]
    NOT?: SaleWhereInput | SaleWhereInput[]
    inventoryId?: IntFilter<"Sale"> | number
    saleDate?: DateTimeFilter<"Sale"> | Date | string
    quantity?: IntFilter<"Sale"> | number
    inventory?: XOR<InventoryScalarRelationFilter, InventoryWhereInput>
  }, "id">

  export type SaleOrderByWithAggregationInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    saleDate?: SortOrder
    quantity?: SortOrder
    _count?: SaleCountOrderByAggregateInput
    _avg?: SaleAvgOrderByAggregateInput
    _max?: SaleMaxOrderByAggregateInput
    _min?: SaleMinOrderByAggregateInput
    _sum?: SaleSumOrderByAggregateInput
  }

  export type SaleScalarWhereWithAggregatesInput = {
    AND?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    OR?: SaleScalarWhereWithAggregatesInput[]
    NOT?: SaleScalarWhereWithAggregatesInput | SaleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sale"> | number
    inventoryId?: IntWithAggregatesFilter<"Sale"> | number
    saleDate?: DateTimeWithAggregatesFilter<"Sale"> | Date | string
    quantity?: IntWithAggregatesFilter<"Sale"> | number
  }

  export type PrismaMigrationsWhereInput = {
    AND?: PrismaMigrationsWhereInput | PrismaMigrationsWhereInput[]
    OR?: PrismaMigrationsWhereInput[]
    NOT?: PrismaMigrationsWhereInput | PrismaMigrationsWhereInput[]
    id?: StringFilter<"PrismaMigrations"> | string
    checksum?: StringFilter<"PrismaMigrations"> | string
    finished_at?: DateTimeNullableFilter<"PrismaMigrations"> | Date | string | null
    migration_name?: StringFilter<"PrismaMigrations"> | string
    logs?: StringNullableFilter<"PrismaMigrations"> | string | null
    rolled_back_at?: DateTimeNullableFilter<"PrismaMigrations"> | Date | string | null
    started_at?: DateTimeFilter<"PrismaMigrations"> | Date | string
  }

  export type PrismaMigrationsOrderByWithRelationInput = {
    id?: SortOrder
    checksum?: SortOrder
    finished_at?: SortOrderInput | SortOrder
    migration_name?: SortOrder
    logs?: SortOrderInput | SortOrder
    rolled_back_at?: SortOrderInput | SortOrder
    started_at?: SortOrder
  }

  export type PrismaMigrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PrismaMigrationsWhereInput | PrismaMigrationsWhereInput[]
    OR?: PrismaMigrationsWhereInput[]
    NOT?: PrismaMigrationsWhereInput | PrismaMigrationsWhereInput[]
    checksum?: StringFilter<"PrismaMigrations"> | string
    finished_at?: DateTimeNullableFilter<"PrismaMigrations"> | Date | string | null
    migration_name?: StringFilter<"PrismaMigrations"> | string
    logs?: StringNullableFilter<"PrismaMigrations"> | string | null
    rolled_back_at?: DateTimeNullableFilter<"PrismaMigrations"> | Date | string | null
    started_at?: DateTimeFilter<"PrismaMigrations"> | Date | string
  }, "id">

  export type PrismaMigrationsOrderByWithAggregationInput = {
    id?: SortOrder
    checksum?: SortOrder
    finished_at?: SortOrderInput | SortOrder
    migration_name?: SortOrder
    logs?: SortOrderInput | SortOrder
    rolled_back_at?: SortOrderInput | SortOrder
    started_at?: SortOrder
    _count?: PrismaMigrationsCountOrderByAggregateInput
    _max?: PrismaMigrationsMaxOrderByAggregateInput
    _min?: PrismaMigrationsMinOrderByAggregateInput
  }

  export type PrismaMigrationsScalarWhereWithAggregatesInput = {
    AND?: PrismaMigrationsScalarWhereWithAggregatesInput | PrismaMigrationsScalarWhereWithAggregatesInput[]
    OR?: PrismaMigrationsScalarWhereWithAggregatesInput[]
    NOT?: PrismaMigrationsScalarWhereWithAggregatesInput | PrismaMigrationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PrismaMigrations"> | string
    checksum?: StringWithAggregatesFilter<"PrismaMigrations"> | string
    finished_at?: DateTimeNullableWithAggregatesFilter<"PrismaMigrations"> | Date | string | null
    migration_name?: StringWithAggregatesFilter<"PrismaMigrations"> | string
    logs?: StringNullableWithAggregatesFilter<"PrismaMigrations"> | string | null
    rolled_back_at?: DateTimeNullableWithAggregatesFilter<"PrismaMigrations"> | Date | string | null
    started_at?: DateTimeWithAggregatesFilter<"PrismaMigrations"> | Date | string
  }

  export type MusicianCreateInput = {
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberCreateNestedManyWithoutMusicianInput
    soloAlbums?: AlbumCreateNestedManyWithoutMusicianInput
  }

  export type MusicianUncheckedCreateInput = {
    id?: number
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUncheckedCreateNestedManyWithoutMusicianInput
    soloAlbums?: AlbumUncheckedCreateNestedManyWithoutMusicianInput
  }

  export type MusicianUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUpdateManyWithoutMusicianNestedInput
    soloAlbums?: AlbumUpdateManyWithoutMusicianNestedInput
  }

  export type MusicianUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUncheckedUpdateManyWithoutMusicianNestedInput
    soloAlbums?: AlbumUncheckedUpdateManyWithoutMusicianNestedInput
  }

  export type MusicianCreateManyInput = {
    id?: number
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
  }

  export type MusicianUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
  }

  export type MusicianUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
  }

  export type EnsembleCreateInput = {
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    members?: EnsembleMemberCreateNestedManyWithoutEnsembleInput
    albums?: AlbumCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleUncheckedCreateInput = {
    id?: number
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    members?: EnsembleMemberUncheckedCreateNestedManyWithoutEnsembleInput
    albums?: AlbumUncheckedCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    members?: EnsembleMemberUpdateManyWithoutEnsembleNestedInput
    albums?: AlbumUpdateManyWithoutEnsembleNestedInput
  }

  export type EnsembleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    members?: EnsembleMemberUncheckedUpdateManyWithoutEnsembleNestedInput
    albums?: AlbumUncheckedUpdateManyWithoutEnsembleNestedInput
  }

  export type EnsembleCreateManyInput = {
    id?: number
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
  }

  export type EnsembleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EnsembleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EnsembleMemberCreateInput = {
    role: string
    startDate: Date | string
    endDate?: Date | string | null
    ensemble: EnsembleCreateNestedOneWithoutMembersInput
    musician: MusicianCreateNestedOneWithoutEnsemblesInput
  }

  export type EnsembleMemberUncheckedCreateInput = {
    id?: number
    ensembleId: number
    musicianId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EnsembleMemberUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ensemble?: EnsembleUpdateOneRequiredWithoutMembersNestedInput
    musician?: MusicianUpdateOneRequiredWithoutEnsemblesNestedInput
  }

  export type EnsembleMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ensembleId?: IntFieldUpdateOperationsInput | number
    musicianId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnsembleMemberCreateManyInput = {
    id?: number
    ensembleId: number
    musicianId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EnsembleMemberUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnsembleMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ensembleId?: IntFieldUpdateOperationsInput | number
    musicianId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompositionCreateInput = {
    title: string
    duration: number
    creationYear: number
    genre: string
    recordings?: RecordingCreateNestedManyWithoutCompositionInput
  }

  export type CompositionUncheckedCreateInput = {
    id?: number
    title: string
    duration: number
    creationYear: number
    genre: string
    recordings?: RecordingUncheckedCreateNestedManyWithoutCompositionInput
  }

  export type CompositionUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUpdateManyWithoutCompositionNestedInput
  }

  export type CompositionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
    recordings?: RecordingUncheckedUpdateManyWithoutCompositionNestedInput
  }

  export type CompositionCreateManyInput = {
    id?: number
    title: string
    duration: number
    creationYear: number
    genre: string
  }

  export type CompositionUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type CompositionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type RecordingCreateInput = {
    recordingDate: Date | string
    studio?: string | null
    composition: CompositionCreateNestedOneWithoutRecordingsInput
    albums?: TrackCreateNestedManyWithoutRecordingInput
  }

  export type RecordingUncheckedCreateInput = {
    id?: number
    compositionId: number
    recordingDate: Date | string
    studio?: string | null
    albums?: TrackUncheckedCreateNestedManyWithoutRecordingInput
  }

  export type RecordingUpdateInput = {
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: CompositionUpdateOneRequiredWithoutRecordingsNestedInput
    albums?: TrackUpdateManyWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    compositionId?: IntFieldUpdateOperationsInput | number
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
    albums?: TrackUncheckedUpdateManyWithoutRecordingNestedInput
  }

  export type RecordingCreateManyInput = {
    id?: number
    compositionId: number
    recordingDate: Date | string
    studio?: string | null
  }

  export type RecordingUpdateManyMutationInput = {
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RecordingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    compositionId?: IntFieldUpdateOperationsInput | number
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumCreateInput = {
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musician?: MusicianCreateNestedOneWithoutSoloAlbumsInput
    ensemble?: EnsembleCreateNestedOneWithoutAlbumsInput
    tracks?: TrackCreateNestedManyWithoutAlbumInput
    inventories?: InventoryCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
    ensembleId?: number | null
    tracks?: TrackUncheckedCreateNestedManyWithoutAlbumInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musician?: MusicianUpdateOneWithoutSoloAlbumsNestedInput
    ensemble?: EnsembleUpdateOneWithoutAlbumsNestedInput
    tracks?: TrackUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
    tracks?: TrackUncheckedUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
    ensembleId?: number | null
  }

  export type AlbumUpdateManyMutationInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TrackCreateInput = {
    position: number
    album: AlbumCreateNestedOneWithoutTracksInput
    recording: RecordingCreateNestedOneWithoutAlbumsInput
  }

  export type TrackUncheckedCreateInput = {
    id?: number
    albumId: number
    recordingId: number
    position: number
  }

  export type TrackUpdateInput = {
    position?: IntFieldUpdateOperationsInput | number
    album?: AlbumUpdateOneRequiredWithoutTracksNestedInput
    recording?: RecordingUpdateOneRequiredWithoutAlbumsNestedInput
  }

  export type TrackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    recordingId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TrackCreateManyInput = {
    id?: number
    albumId: number
    recordingId: number
    position: number
  }

  export type TrackUpdateManyMutationInput = {
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TrackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    recordingId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryCreateInput = {
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
    album: AlbumCreateNestedOneWithoutInventoriesInput
    sales?: SaleCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateInput = {
    id?: number
    albumId: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
    sales?: SaleUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUpdateInput = {
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
    album?: AlbumUpdateOneRequiredWithoutInventoriesNestedInput
    sales?: SaleUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
    sales?: SaleUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryCreateManyInput = {
    id?: number
    albumId: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
  }

  export type InventoryUpdateManyMutationInput = {
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
  }

  export type SaleCreateInput = {
    saleDate?: Date | string
    quantity: number
    inventory: InventoryCreateNestedOneWithoutSalesInput
  }

  export type SaleUncheckedCreateInput = {
    id?: number
    inventoryId: number
    saleDate?: Date | string
    quantity: number
  }

  export type SaleUpdateInput = {
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
    inventory?: InventoryUpdateOneRequiredWithoutSalesNestedInput
  }

  export type SaleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SaleCreateManyInput = {
    id?: number
    inventoryId: number
    saleDate?: Date | string
    quantity: number
  }

  export type SaleUpdateManyMutationInput = {
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SaleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    inventoryId?: IntFieldUpdateOperationsInput | number
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type PrismaMigrationsCreateInput = {
    id: string
    checksum: string
    finished_at?: Date | string | null
    migration_name: string
    logs?: string | null
    rolled_back_at?: Date | string | null
    started_at?: Date | string
  }

  export type PrismaMigrationsUncheckedCreateInput = {
    id: string
    checksum: string
    finished_at?: Date | string | null
    migration_name: string
    logs?: string | null
    rolled_back_at?: Date | string | null
    started_at?: Date | string
  }

  export type PrismaMigrationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checksum?: StringFieldUpdateOperationsInput | string
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    migration_name?: StringFieldUpdateOperationsInput | string
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    rolled_back_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaMigrationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    checksum?: StringFieldUpdateOperationsInput | string
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    migration_name?: StringFieldUpdateOperationsInput | string
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    rolled_back_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaMigrationsCreateManyInput = {
    id: string
    checksum: string
    finished_at?: Date | string | null
    migration_name: string
    logs?: string | null
    rolled_back_at?: Date | string | null
    started_at?: Date | string
  }

  export type PrismaMigrationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    checksum?: StringFieldUpdateOperationsInput | string
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    migration_name?: StringFieldUpdateOperationsInput | string
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    rolled_back_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PrismaMigrationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    checksum?: StringFieldUpdateOperationsInput | string
    finished_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    migration_name?: StringFieldUpdateOperationsInput | string
    logs?: NullableStringFieldUpdateOperationsInput | string | null
    rolled_back_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    started_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnsembleMemberListRelationFilter = {
    every?: EnsembleMemberWhereInput
    some?: EnsembleMemberWhereInput
    none?: EnsembleMemberWhereInput
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnsembleMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MusicianCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    country?: SortOrder
    bio?: SortOrder
    roles?: SortOrder
  }

  export type MusicianAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MusicianMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    country?: SortOrder
    bio?: SortOrder
  }

  export type MusicianMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthDate?: SortOrder
    country?: SortOrder
    bio?: SortOrder
  }

  export type MusicianSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnsembleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    formationDate?: SortOrder
    dissolutionDate?: SortOrder
    type?: SortOrder
  }

  export type EnsembleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnsembleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    formationDate?: SortOrder
    dissolutionDate?: SortOrder
    type?: SortOrder
  }

  export type EnsembleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    formationDate?: SortOrder
    dissolutionDate?: SortOrder
    type?: SortOrder
  }

  export type EnsembleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnsembleScalarRelationFilter = {
    is?: EnsembleWhereInput
    isNot?: EnsembleWhereInput
  }

  export type MusicianScalarRelationFilter = {
    is?: MusicianWhereInput
    isNot?: MusicianWhereInput
  }

  export type EnsembleMemberCountOrderByAggregateInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EnsembleMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
  }

  export type EnsembleMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EnsembleMemberMinOrderByAggregateInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
    role?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type EnsembleMemberSumOrderByAggregateInput = {
    id?: SortOrder
    ensembleId?: SortOrder
    musicianId?: SortOrder
  }

  export type RecordingListRelationFilter = {
    every?: RecordingWhereInput
    some?: RecordingWhereInput
    none?: RecordingWhereInput
  }

  export type RecordingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompositionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
    genre?: SortOrder
  }

  export type CompositionAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
  }

  export type CompositionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
    genre?: SortOrder
  }

  export type CompositionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
    genre?: SortOrder
  }

  export type CompositionSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    creationYear?: SortOrder
  }

  export type CompositionScalarRelationFilter = {
    is?: CompositionWhereInput
    isNot?: CompositionWhereInput
  }

  export type TrackListRelationFilter = {
    every?: TrackWhereInput
    some?: TrackWhereInput
    none?: TrackWhereInput
  }

  export type TrackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecordingCountOrderByAggregateInput = {
    id?: SortOrder
    compositionId?: SortOrder
    recordingDate?: SortOrder
    studio?: SortOrder
  }

  export type RecordingAvgOrderByAggregateInput = {
    id?: SortOrder
    compositionId?: SortOrder
  }

  export type RecordingMaxOrderByAggregateInput = {
    id?: SortOrder
    compositionId?: SortOrder
    recordingDate?: SortOrder
    studio?: SortOrder
  }

  export type RecordingMinOrderByAggregateInput = {
    id?: SortOrder
    compositionId?: SortOrder
    recordingDate?: SortOrder
    studio?: SortOrder
  }

  export type RecordingSumOrderByAggregateInput = {
    id?: SortOrder
    compositionId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MusicianNullableScalarRelationFilter = {
    is?: MusicianWhereInput | null
    isNot?: MusicianWhereInput | null
  }

  export type EnsembleNullableScalarRelationFilter = {
    is?: EnsembleWhereInput | null
    isNot?: EnsembleWhereInput | null
  }

  export type InventoryListRelationFilter = {
    every?: InventoryWhereInput
    some?: InventoryWhereInput
    none?: InventoryWhereInput
  }

  export type InventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    catalogNumber?: SortOrder
    title?: SortOrder
    releaseDate?: SortOrder
    musicianId?: SortOrder
    ensembleId?: SortOrder
  }

  export type AlbumAvgOrderByAggregateInput = {
    id?: SortOrder
    musicianId?: SortOrder
    ensembleId?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    catalogNumber?: SortOrder
    title?: SortOrder
    releaseDate?: SortOrder
    musicianId?: SortOrder
    ensembleId?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    catalogNumber?: SortOrder
    title?: SortOrder
    releaseDate?: SortOrder
    musicianId?: SortOrder
    ensembleId?: SortOrder
  }

  export type AlbumSumOrderByAggregateInput = {
    id?: SortOrder
    musicianId?: SortOrder
    ensembleId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AlbumScalarRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type RecordingScalarRelationFilter = {
    is?: RecordingWhereInput
    isNot?: RecordingWhereInput
  }

  export type TrackCountOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
  }

  export type TrackAvgOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
  }

  export type TrackMaxOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
  }

  export type TrackMinOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
  }

  export type TrackSumOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    recordingId?: SortOrder
    position?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SaleListRelationFilter = {
    every?: SaleWhereInput
    some?: SaleWhereInput
    none?: SaleWhereInput
  }

  export type SaleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryCountOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
  }

  export type InventoryAvgOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
  }

  export type InventoryMaxOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
  }

  export type InventoryMinOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
  }

  export type InventorySumOrderByAggregateInput = {
    id?: SortOrder
    albumId?: SortOrder
    wholesalePrice?: SortOrder
    retailPrice?: SortOrder
    lastYearSales?: SortOrder
    currentYearSales?: SortOrder
    unsold?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InventoryScalarRelationFilter = {
    is?: InventoryWhereInput
    isNot?: InventoryWhereInput
  }

  export type SaleCountOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    saleDate?: SortOrder
    quantity?: SortOrder
  }

  export type SaleAvgOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    quantity?: SortOrder
  }

  export type SaleMaxOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    saleDate?: SortOrder
    quantity?: SortOrder
  }

  export type SaleMinOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    saleDate?: SortOrder
    quantity?: SortOrder
  }

  export type SaleSumOrderByAggregateInput = {
    id?: SortOrder
    inventoryId?: SortOrder
    quantity?: SortOrder
  }

  export type PrismaMigrationsCountOrderByAggregateInput = {
    id?: SortOrder
    checksum?: SortOrder
    finished_at?: SortOrder
    migration_name?: SortOrder
    logs?: SortOrder
    rolled_back_at?: SortOrder
    started_at?: SortOrder
  }

  export type PrismaMigrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    checksum?: SortOrder
    finished_at?: SortOrder
    migration_name?: SortOrder
    logs?: SortOrder
    rolled_back_at?: SortOrder
    started_at?: SortOrder
  }

  export type PrismaMigrationsMinOrderByAggregateInput = {
    id?: SortOrder
    checksum?: SortOrder
    finished_at?: SortOrder
    migration_name?: SortOrder
    logs?: SortOrder
    rolled_back_at?: SortOrder
    started_at?: SortOrder
  }

  export type MusicianCreaterolesInput = {
    set: $Enums.Role[]
  }

  export type EnsembleMemberCreateNestedManyWithoutMusicianInput = {
    create?: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput> | EnsembleMemberCreateWithoutMusicianInput[] | EnsembleMemberUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutMusicianInput | EnsembleMemberCreateOrConnectWithoutMusicianInput[]
    createMany?: EnsembleMemberCreateManyMusicianInputEnvelope
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
  }

  export type AlbumCreateNestedManyWithoutMusicianInput = {
    create?: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput> | AlbumCreateWithoutMusicianInput[] | AlbumUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicianInput | AlbumCreateOrConnectWithoutMusicianInput[]
    createMany?: AlbumCreateManyMusicianInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type EnsembleMemberUncheckedCreateNestedManyWithoutMusicianInput = {
    create?: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput> | EnsembleMemberCreateWithoutMusicianInput[] | EnsembleMemberUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutMusicianInput | EnsembleMemberCreateOrConnectWithoutMusicianInput[]
    createMany?: EnsembleMemberCreateManyMusicianInputEnvelope
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
  }

  export type AlbumUncheckedCreateNestedManyWithoutMusicianInput = {
    create?: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput> | AlbumCreateWithoutMusicianInput[] | AlbumUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicianInput | AlbumCreateOrConnectWithoutMusicianInput[]
    createMany?: AlbumCreateManyMusicianInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MusicianUpdaterolesInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type EnsembleMemberUpdateManyWithoutMusicianNestedInput = {
    create?: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput> | EnsembleMemberCreateWithoutMusicianInput[] | EnsembleMemberUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutMusicianInput | EnsembleMemberCreateOrConnectWithoutMusicianInput[]
    upsert?: EnsembleMemberUpsertWithWhereUniqueWithoutMusicianInput | EnsembleMemberUpsertWithWhereUniqueWithoutMusicianInput[]
    createMany?: EnsembleMemberCreateManyMusicianInputEnvelope
    set?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    disconnect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    delete?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    update?: EnsembleMemberUpdateWithWhereUniqueWithoutMusicianInput | EnsembleMemberUpdateWithWhereUniqueWithoutMusicianInput[]
    updateMany?: EnsembleMemberUpdateManyWithWhereWithoutMusicianInput | EnsembleMemberUpdateManyWithWhereWithoutMusicianInput[]
    deleteMany?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
  }

  export type AlbumUpdateManyWithoutMusicianNestedInput = {
    create?: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput> | AlbumCreateWithoutMusicianInput[] | AlbumUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicianInput | AlbumCreateOrConnectWithoutMusicianInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutMusicianInput | AlbumUpsertWithWhereUniqueWithoutMusicianInput[]
    createMany?: AlbumCreateManyMusicianInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutMusicianInput | AlbumUpdateWithWhereUniqueWithoutMusicianInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutMusicianInput | AlbumUpdateManyWithWhereWithoutMusicianInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnsembleMemberUncheckedUpdateManyWithoutMusicianNestedInput = {
    create?: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput> | EnsembleMemberCreateWithoutMusicianInput[] | EnsembleMemberUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutMusicianInput | EnsembleMemberCreateOrConnectWithoutMusicianInput[]
    upsert?: EnsembleMemberUpsertWithWhereUniqueWithoutMusicianInput | EnsembleMemberUpsertWithWhereUniqueWithoutMusicianInput[]
    createMany?: EnsembleMemberCreateManyMusicianInputEnvelope
    set?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    disconnect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    delete?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    update?: EnsembleMemberUpdateWithWhereUniqueWithoutMusicianInput | EnsembleMemberUpdateWithWhereUniqueWithoutMusicianInput[]
    updateMany?: EnsembleMemberUpdateManyWithWhereWithoutMusicianInput | EnsembleMemberUpdateManyWithWhereWithoutMusicianInput[]
    deleteMany?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
  }

  export type AlbumUncheckedUpdateManyWithoutMusicianNestedInput = {
    create?: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput> | AlbumCreateWithoutMusicianInput[] | AlbumUncheckedCreateWithoutMusicianInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutMusicianInput | AlbumCreateOrConnectWithoutMusicianInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutMusicianInput | AlbumUpsertWithWhereUniqueWithoutMusicianInput[]
    createMany?: AlbumCreateManyMusicianInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutMusicianInput | AlbumUpdateWithWhereUniqueWithoutMusicianInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutMusicianInput | AlbumUpdateManyWithWhereWithoutMusicianInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type EnsembleMemberCreateNestedManyWithoutEnsembleInput = {
    create?: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput> | EnsembleMemberCreateWithoutEnsembleInput[] | EnsembleMemberUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutEnsembleInput | EnsembleMemberCreateOrConnectWithoutEnsembleInput[]
    createMany?: EnsembleMemberCreateManyEnsembleInputEnvelope
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
  }

  export type AlbumCreateNestedManyWithoutEnsembleInput = {
    create?: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput> | AlbumCreateWithoutEnsembleInput[] | AlbumUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutEnsembleInput | AlbumCreateOrConnectWithoutEnsembleInput[]
    createMany?: AlbumCreateManyEnsembleInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type EnsembleMemberUncheckedCreateNestedManyWithoutEnsembleInput = {
    create?: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput> | EnsembleMemberCreateWithoutEnsembleInput[] | EnsembleMemberUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutEnsembleInput | EnsembleMemberCreateOrConnectWithoutEnsembleInput[]
    createMany?: EnsembleMemberCreateManyEnsembleInputEnvelope
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
  }

  export type AlbumUncheckedCreateNestedManyWithoutEnsembleInput = {
    create?: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput> | AlbumCreateWithoutEnsembleInput[] | AlbumUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutEnsembleInput | AlbumCreateOrConnectWithoutEnsembleInput[]
    createMany?: AlbumCreateManyEnsembleInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnsembleMemberUpdateManyWithoutEnsembleNestedInput = {
    create?: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput> | EnsembleMemberCreateWithoutEnsembleInput[] | EnsembleMemberUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutEnsembleInput | EnsembleMemberCreateOrConnectWithoutEnsembleInput[]
    upsert?: EnsembleMemberUpsertWithWhereUniqueWithoutEnsembleInput | EnsembleMemberUpsertWithWhereUniqueWithoutEnsembleInput[]
    createMany?: EnsembleMemberCreateManyEnsembleInputEnvelope
    set?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    disconnect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    delete?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    update?: EnsembleMemberUpdateWithWhereUniqueWithoutEnsembleInput | EnsembleMemberUpdateWithWhereUniqueWithoutEnsembleInput[]
    updateMany?: EnsembleMemberUpdateManyWithWhereWithoutEnsembleInput | EnsembleMemberUpdateManyWithWhereWithoutEnsembleInput[]
    deleteMany?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
  }

  export type AlbumUpdateManyWithoutEnsembleNestedInput = {
    create?: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput> | AlbumCreateWithoutEnsembleInput[] | AlbumUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutEnsembleInput | AlbumCreateOrConnectWithoutEnsembleInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutEnsembleInput | AlbumUpsertWithWhereUniqueWithoutEnsembleInput[]
    createMany?: AlbumCreateManyEnsembleInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutEnsembleInput | AlbumUpdateWithWhereUniqueWithoutEnsembleInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutEnsembleInput | AlbumUpdateManyWithWhereWithoutEnsembleInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type EnsembleMemberUncheckedUpdateManyWithoutEnsembleNestedInput = {
    create?: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput> | EnsembleMemberCreateWithoutEnsembleInput[] | EnsembleMemberUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: EnsembleMemberCreateOrConnectWithoutEnsembleInput | EnsembleMemberCreateOrConnectWithoutEnsembleInput[]
    upsert?: EnsembleMemberUpsertWithWhereUniqueWithoutEnsembleInput | EnsembleMemberUpsertWithWhereUniqueWithoutEnsembleInput[]
    createMany?: EnsembleMemberCreateManyEnsembleInputEnvelope
    set?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    disconnect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    delete?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    connect?: EnsembleMemberWhereUniqueInput | EnsembleMemberWhereUniqueInput[]
    update?: EnsembleMemberUpdateWithWhereUniqueWithoutEnsembleInput | EnsembleMemberUpdateWithWhereUniqueWithoutEnsembleInput[]
    updateMany?: EnsembleMemberUpdateManyWithWhereWithoutEnsembleInput | EnsembleMemberUpdateManyWithWhereWithoutEnsembleInput[]
    deleteMany?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
  }

  export type AlbumUncheckedUpdateManyWithoutEnsembleNestedInput = {
    create?: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput> | AlbumCreateWithoutEnsembleInput[] | AlbumUncheckedCreateWithoutEnsembleInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutEnsembleInput | AlbumCreateOrConnectWithoutEnsembleInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutEnsembleInput | AlbumUpsertWithWhereUniqueWithoutEnsembleInput[]
    createMany?: AlbumCreateManyEnsembleInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutEnsembleInput | AlbumUpdateWithWhereUniqueWithoutEnsembleInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutEnsembleInput | AlbumUpdateManyWithWhereWithoutEnsembleInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type EnsembleCreateNestedOneWithoutMembersInput = {
    create?: XOR<EnsembleCreateWithoutMembersInput, EnsembleUncheckedCreateWithoutMembersInput>
    connectOrCreate?: EnsembleCreateOrConnectWithoutMembersInput
    connect?: EnsembleWhereUniqueInput
  }

  export type MusicianCreateNestedOneWithoutEnsemblesInput = {
    create?: XOR<MusicianCreateWithoutEnsemblesInput, MusicianUncheckedCreateWithoutEnsemblesInput>
    connectOrCreate?: MusicianCreateOrConnectWithoutEnsemblesInput
    connect?: MusicianWhereUniqueInput
  }

  export type EnsembleUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<EnsembleCreateWithoutMembersInput, EnsembleUncheckedCreateWithoutMembersInput>
    connectOrCreate?: EnsembleCreateOrConnectWithoutMembersInput
    upsert?: EnsembleUpsertWithoutMembersInput
    connect?: EnsembleWhereUniqueInput
    update?: XOR<XOR<EnsembleUpdateToOneWithWhereWithoutMembersInput, EnsembleUpdateWithoutMembersInput>, EnsembleUncheckedUpdateWithoutMembersInput>
  }

  export type MusicianUpdateOneRequiredWithoutEnsemblesNestedInput = {
    create?: XOR<MusicianCreateWithoutEnsemblesInput, MusicianUncheckedCreateWithoutEnsemblesInput>
    connectOrCreate?: MusicianCreateOrConnectWithoutEnsemblesInput
    upsert?: MusicianUpsertWithoutEnsemblesInput
    connect?: MusicianWhereUniqueInput
    update?: XOR<XOR<MusicianUpdateToOneWithWhereWithoutEnsemblesInput, MusicianUpdateWithoutEnsemblesInput>, MusicianUncheckedUpdateWithoutEnsemblesInput>
  }

  export type RecordingCreateNestedManyWithoutCompositionInput = {
    create?: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput> | RecordingCreateWithoutCompositionInput[] | RecordingUncheckedCreateWithoutCompositionInput[]
    connectOrCreate?: RecordingCreateOrConnectWithoutCompositionInput | RecordingCreateOrConnectWithoutCompositionInput[]
    createMany?: RecordingCreateManyCompositionInputEnvelope
    connect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
  }

  export type RecordingUncheckedCreateNestedManyWithoutCompositionInput = {
    create?: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput> | RecordingCreateWithoutCompositionInput[] | RecordingUncheckedCreateWithoutCompositionInput[]
    connectOrCreate?: RecordingCreateOrConnectWithoutCompositionInput | RecordingCreateOrConnectWithoutCompositionInput[]
    createMany?: RecordingCreateManyCompositionInputEnvelope
    connect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
  }

  export type RecordingUpdateManyWithoutCompositionNestedInput = {
    create?: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput> | RecordingCreateWithoutCompositionInput[] | RecordingUncheckedCreateWithoutCompositionInput[]
    connectOrCreate?: RecordingCreateOrConnectWithoutCompositionInput | RecordingCreateOrConnectWithoutCompositionInput[]
    upsert?: RecordingUpsertWithWhereUniqueWithoutCompositionInput | RecordingUpsertWithWhereUniqueWithoutCompositionInput[]
    createMany?: RecordingCreateManyCompositionInputEnvelope
    set?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    disconnect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    delete?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    connect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    update?: RecordingUpdateWithWhereUniqueWithoutCompositionInput | RecordingUpdateWithWhereUniqueWithoutCompositionInput[]
    updateMany?: RecordingUpdateManyWithWhereWithoutCompositionInput | RecordingUpdateManyWithWhereWithoutCompositionInput[]
    deleteMany?: RecordingScalarWhereInput | RecordingScalarWhereInput[]
  }

  export type RecordingUncheckedUpdateManyWithoutCompositionNestedInput = {
    create?: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput> | RecordingCreateWithoutCompositionInput[] | RecordingUncheckedCreateWithoutCompositionInput[]
    connectOrCreate?: RecordingCreateOrConnectWithoutCompositionInput | RecordingCreateOrConnectWithoutCompositionInput[]
    upsert?: RecordingUpsertWithWhereUniqueWithoutCompositionInput | RecordingUpsertWithWhereUniqueWithoutCompositionInput[]
    createMany?: RecordingCreateManyCompositionInputEnvelope
    set?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    disconnect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    delete?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    connect?: RecordingWhereUniqueInput | RecordingWhereUniqueInput[]
    update?: RecordingUpdateWithWhereUniqueWithoutCompositionInput | RecordingUpdateWithWhereUniqueWithoutCompositionInput[]
    updateMany?: RecordingUpdateManyWithWhereWithoutCompositionInput | RecordingUpdateManyWithWhereWithoutCompositionInput[]
    deleteMany?: RecordingScalarWhereInput | RecordingScalarWhereInput[]
  }

  export type CompositionCreateNestedOneWithoutRecordingsInput = {
    create?: XOR<CompositionCreateWithoutRecordingsInput, CompositionUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: CompositionCreateOrConnectWithoutRecordingsInput
    connect?: CompositionWhereUniqueInput
  }

  export type TrackCreateNestedManyWithoutRecordingInput = {
    create?: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput> | TrackCreateWithoutRecordingInput[] | TrackUncheckedCreateWithoutRecordingInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutRecordingInput | TrackCreateOrConnectWithoutRecordingInput[]
    createMany?: TrackCreateManyRecordingInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type TrackUncheckedCreateNestedManyWithoutRecordingInput = {
    create?: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput> | TrackCreateWithoutRecordingInput[] | TrackUncheckedCreateWithoutRecordingInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutRecordingInput | TrackCreateOrConnectWithoutRecordingInput[]
    createMany?: TrackCreateManyRecordingInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type CompositionUpdateOneRequiredWithoutRecordingsNestedInput = {
    create?: XOR<CompositionCreateWithoutRecordingsInput, CompositionUncheckedCreateWithoutRecordingsInput>
    connectOrCreate?: CompositionCreateOrConnectWithoutRecordingsInput
    upsert?: CompositionUpsertWithoutRecordingsInput
    connect?: CompositionWhereUniqueInput
    update?: XOR<XOR<CompositionUpdateToOneWithWhereWithoutRecordingsInput, CompositionUpdateWithoutRecordingsInput>, CompositionUncheckedUpdateWithoutRecordingsInput>
  }

  export type TrackUpdateManyWithoutRecordingNestedInput = {
    create?: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput> | TrackCreateWithoutRecordingInput[] | TrackUncheckedCreateWithoutRecordingInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutRecordingInput | TrackCreateOrConnectWithoutRecordingInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutRecordingInput | TrackUpsertWithWhereUniqueWithoutRecordingInput[]
    createMany?: TrackCreateManyRecordingInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutRecordingInput | TrackUpdateWithWhereUniqueWithoutRecordingInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutRecordingInput | TrackUpdateManyWithWhereWithoutRecordingInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type TrackUncheckedUpdateManyWithoutRecordingNestedInput = {
    create?: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput> | TrackCreateWithoutRecordingInput[] | TrackUncheckedCreateWithoutRecordingInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutRecordingInput | TrackCreateOrConnectWithoutRecordingInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutRecordingInput | TrackUpsertWithWhereUniqueWithoutRecordingInput[]
    createMany?: TrackCreateManyRecordingInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutRecordingInput | TrackUpdateWithWhereUniqueWithoutRecordingInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutRecordingInput | TrackUpdateManyWithWhereWithoutRecordingInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type MusicianCreateNestedOneWithoutSoloAlbumsInput = {
    create?: XOR<MusicianCreateWithoutSoloAlbumsInput, MusicianUncheckedCreateWithoutSoloAlbumsInput>
    connectOrCreate?: MusicianCreateOrConnectWithoutSoloAlbumsInput
    connect?: MusicianWhereUniqueInput
  }

  export type EnsembleCreateNestedOneWithoutAlbumsInput = {
    create?: XOR<EnsembleCreateWithoutAlbumsInput, EnsembleUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: EnsembleCreateOrConnectWithoutAlbumsInput
    connect?: EnsembleWhereUniqueInput
  }

  export type TrackCreateNestedManyWithoutAlbumInput = {
    create?: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput> | TrackCreateWithoutAlbumInput[] | TrackUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutAlbumInput | TrackCreateOrConnectWithoutAlbumInput[]
    createMany?: TrackCreateManyAlbumInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type InventoryCreateNestedManyWithoutAlbumInput = {
    create?: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput> | InventoryCreateWithoutAlbumInput[] | InventoryUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAlbumInput | InventoryCreateOrConnectWithoutAlbumInput[]
    createMany?: InventoryCreateManyAlbumInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type TrackUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput> | TrackCreateWithoutAlbumInput[] | TrackUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutAlbumInput | TrackCreateOrConnectWithoutAlbumInput[]
    createMany?: TrackCreateManyAlbumInputEnvelope
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
  }

  export type InventoryUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput> | InventoryCreateWithoutAlbumInput[] | InventoryUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAlbumInput | InventoryCreateOrConnectWithoutAlbumInput[]
    createMany?: InventoryCreateManyAlbumInputEnvelope
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
  }

  export type MusicianUpdateOneWithoutSoloAlbumsNestedInput = {
    create?: XOR<MusicianCreateWithoutSoloAlbumsInput, MusicianUncheckedCreateWithoutSoloAlbumsInput>
    connectOrCreate?: MusicianCreateOrConnectWithoutSoloAlbumsInput
    upsert?: MusicianUpsertWithoutSoloAlbumsInput
    disconnect?: MusicianWhereInput | boolean
    delete?: MusicianWhereInput | boolean
    connect?: MusicianWhereUniqueInput
    update?: XOR<XOR<MusicianUpdateToOneWithWhereWithoutSoloAlbumsInput, MusicianUpdateWithoutSoloAlbumsInput>, MusicianUncheckedUpdateWithoutSoloAlbumsInput>
  }

  export type EnsembleUpdateOneWithoutAlbumsNestedInput = {
    create?: XOR<EnsembleCreateWithoutAlbumsInput, EnsembleUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: EnsembleCreateOrConnectWithoutAlbumsInput
    upsert?: EnsembleUpsertWithoutAlbumsInput
    disconnect?: EnsembleWhereInput | boolean
    delete?: EnsembleWhereInput | boolean
    connect?: EnsembleWhereUniqueInput
    update?: XOR<XOR<EnsembleUpdateToOneWithWhereWithoutAlbumsInput, EnsembleUpdateWithoutAlbumsInput>, EnsembleUncheckedUpdateWithoutAlbumsInput>
  }

  export type TrackUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput> | TrackCreateWithoutAlbumInput[] | TrackUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutAlbumInput | TrackCreateOrConnectWithoutAlbumInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutAlbumInput | TrackUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: TrackCreateManyAlbumInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutAlbumInput | TrackUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutAlbumInput | TrackUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type InventoryUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput> | InventoryCreateWithoutAlbumInput[] | InventoryUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAlbumInput | InventoryCreateOrConnectWithoutAlbumInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutAlbumInput | InventoryUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: InventoryCreateManyAlbumInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutAlbumInput | InventoryUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutAlbumInput | InventoryUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TrackUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput> | TrackCreateWithoutAlbumInput[] | TrackUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: TrackCreateOrConnectWithoutAlbumInput | TrackCreateOrConnectWithoutAlbumInput[]
    upsert?: TrackUpsertWithWhereUniqueWithoutAlbumInput | TrackUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: TrackCreateManyAlbumInputEnvelope
    set?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    disconnect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    delete?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    connect?: TrackWhereUniqueInput | TrackWhereUniqueInput[]
    update?: TrackUpdateWithWhereUniqueWithoutAlbumInput | TrackUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: TrackUpdateManyWithWhereWithoutAlbumInput | TrackUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: TrackScalarWhereInput | TrackScalarWhereInput[]
  }

  export type InventoryUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput> | InventoryCreateWithoutAlbumInput[] | InventoryUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: InventoryCreateOrConnectWithoutAlbumInput | InventoryCreateOrConnectWithoutAlbumInput[]
    upsert?: InventoryUpsertWithWhereUniqueWithoutAlbumInput | InventoryUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: InventoryCreateManyAlbumInputEnvelope
    set?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    disconnect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    delete?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    connect?: InventoryWhereUniqueInput | InventoryWhereUniqueInput[]
    update?: InventoryUpdateWithWhereUniqueWithoutAlbumInput | InventoryUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: InventoryUpdateManyWithWhereWithoutAlbumInput | InventoryUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutTracksInput = {
    create?: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTracksInput
    connect?: AlbumWhereUniqueInput
  }

  export type RecordingCreateNestedOneWithoutAlbumsInput = {
    create?: XOR<RecordingCreateWithoutAlbumsInput, RecordingUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: RecordingCreateOrConnectWithoutAlbumsInput
    connect?: RecordingWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutTracksNestedInput = {
    create?: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutTracksInput
    upsert?: AlbumUpsertWithoutTracksInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutTracksInput, AlbumUpdateWithoutTracksInput>, AlbumUncheckedUpdateWithoutTracksInput>
  }

  export type RecordingUpdateOneRequiredWithoutAlbumsNestedInput = {
    create?: XOR<RecordingCreateWithoutAlbumsInput, RecordingUncheckedCreateWithoutAlbumsInput>
    connectOrCreate?: RecordingCreateOrConnectWithoutAlbumsInput
    upsert?: RecordingUpsertWithoutAlbumsInput
    connect?: RecordingWhereUniqueInput
    update?: XOR<XOR<RecordingUpdateToOneWithWhereWithoutAlbumsInput, RecordingUpdateWithoutAlbumsInput>, RecordingUncheckedUpdateWithoutAlbumsInput>
  }

  export type AlbumCreateNestedOneWithoutInventoriesInput = {
    create?: XOR<AlbumCreateWithoutInventoriesInput, AlbumUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutInventoriesInput
    connect?: AlbumWhereUniqueInput
  }

  export type SaleCreateNestedManyWithoutInventoryInput = {
    create?: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput> | SaleCreateWithoutInventoryInput[] | SaleUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInventoryInput | SaleCreateOrConnectWithoutInventoryInput[]
    createMany?: SaleCreateManyInventoryInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type SaleUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput> | SaleCreateWithoutInventoryInput[] | SaleUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInventoryInput | SaleCreateOrConnectWithoutInventoryInput[]
    createMany?: SaleCreateManyInventoryInputEnvelope
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlbumUpdateOneRequiredWithoutInventoriesNestedInput = {
    create?: XOR<AlbumCreateWithoutInventoriesInput, AlbumUncheckedCreateWithoutInventoriesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutInventoriesInput
    upsert?: AlbumUpsertWithoutInventoriesInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutInventoriesInput, AlbumUpdateWithoutInventoriesInput>, AlbumUncheckedUpdateWithoutInventoriesInput>
  }

  export type SaleUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput> | SaleCreateWithoutInventoryInput[] | SaleUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInventoryInput | SaleCreateOrConnectWithoutInventoryInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutInventoryInput | SaleUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: SaleCreateManyInventoryInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutInventoryInput | SaleUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutInventoryInput | SaleUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type SaleUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput> | SaleCreateWithoutInventoryInput[] | SaleUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: SaleCreateOrConnectWithoutInventoryInput | SaleCreateOrConnectWithoutInventoryInput[]
    upsert?: SaleUpsertWithWhereUniqueWithoutInventoryInput | SaleUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: SaleCreateManyInventoryInputEnvelope
    set?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    disconnect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    delete?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    connect?: SaleWhereUniqueInput | SaleWhereUniqueInput[]
    update?: SaleUpdateWithWhereUniqueWithoutInventoryInput | SaleUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: SaleUpdateManyWithWhereWithoutInventoryInput | SaleUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: SaleScalarWhereInput | SaleScalarWhereInput[]
  }

  export type InventoryCreateNestedOneWithoutSalesInput = {
    create?: XOR<InventoryCreateWithoutSalesInput, InventoryUncheckedCreateWithoutSalesInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSalesInput
    connect?: InventoryWhereUniqueInput
  }

  export type InventoryUpdateOneRequiredWithoutSalesNestedInput = {
    create?: XOR<InventoryCreateWithoutSalesInput, InventoryUncheckedCreateWithoutSalesInput>
    connectOrCreate?: InventoryCreateOrConnectWithoutSalesInput
    upsert?: InventoryUpsertWithoutSalesInput
    connect?: InventoryWhereUniqueInput
    update?: XOR<XOR<InventoryUpdateToOneWithWhereWithoutSalesInput, InventoryUpdateWithoutSalesInput>, InventoryUncheckedUpdateWithoutSalesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnsembleMemberCreateWithoutMusicianInput = {
    role: string
    startDate: Date | string
    endDate?: Date | string | null
    ensemble: EnsembleCreateNestedOneWithoutMembersInput
  }

  export type EnsembleMemberUncheckedCreateWithoutMusicianInput = {
    id?: number
    ensembleId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EnsembleMemberCreateOrConnectWithoutMusicianInput = {
    where: EnsembleMemberWhereUniqueInput
    create: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput>
  }

  export type EnsembleMemberCreateManyMusicianInputEnvelope = {
    data: EnsembleMemberCreateManyMusicianInput | EnsembleMemberCreateManyMusicianInput[]
    skipDuplicates?: boolean
  }

  export type AlbumCreateWithoutMusicianInput = {
    catalogNumber: string
    title: string
    releaseDate: Date | string
    ensemble?: EnsembleCreateNestedOneWithoutAlbumsInput
    tracks?: TrackCreateNestedManyWithoutAlbumInput
    inventories?: InventoryCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutMusicianInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    ensembleId?: number | null
    tracks?: TrackUncheckedCreateNestedManyWithoutAlbumInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutMusicianInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput>
  }

  export type AlbumCreateManyMusicianInputEnvelope = {
    data: AlbumCreateManyMusicianInput | AlbumCreateManyMusicianInput[]
    skipDuplicates?: boolean
  }

  export type EnsembleMemberUpsertWithWhereUniqueWithoutMusicianInput = {
    where: EnsembleMemberWhereUniqueInput
    update: XOR<EnsembleMemberUpdateWithoutMusicianInput, EnsembleMemberUncheckedUpdateWithoutMusicianInput>
    create: XOR<EnsembleMemberCreateWithoutMusicianInput, EnsembleMemberUncheckedCreateWithoutMusicianInput>
  }

  export type EnsembleMemberUpdateWithWhereUniqueWithoutMusicianInput = {
    where: EnsembleMemberWhereUniqueInput
    data: XOR<EnsembleMemberUpdateWithoutMusicianInput, EnsembleMemberUncheckedUpdateWithoutMusicianInput>
  }

  export type EnsembleMemberUpdateManyWithWhereWithoutMusicianInput = {
    where: EnsembleMemberScalarWhereInput
    data: XOR<EnsembleMemberUpdateManyMutationInput, EnsembleMemberUncheckedUpdateManyWithoutMusicianInput>
  }

  export type EnsembleMemberScalarWhereInput = {
    AND?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
    OR?: EnsembleMemberScalarWhereInput[]
    NOT?: EnsembleMemberScalarWhereInput | EnsembleMemberScalarWhereInput[]
    id?: IntFilter<"EnsembleMember"> | number
    ensembleId?: IntFilter<"EnsembleMember"> | number
    musicianId?: IntFilter<"EnsembleMember"> | number
    role?: StringFilter<"EnsembleMember"> | string
    startDate?: DateTimeFilter<"EnsembleMember"> | Date | string
    endDate?: DateTimeNullableFilter<"EnsembleMember"> | Date | string | null
  }

  export type AlbumUpsertWithWhereUniqueWithoutMusicianInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutMusicianInput, AlbumUncheckedUpdateWithoutMusicianInput>
    create: XOR<AlbumCreateWithoutMusicianInput, AlbumUncheckedCreateWithoutMusicianInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutMusicianInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutMusicianInput, AlbumUncheckedUpdateWithoutMusicianInput>
  }

  export type AlbumUpdateManyWithWhereWithoutMusicianInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutMusicianInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    OR?: AlbumScalarWhereInput[]
    NOT?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    id?: IntFilter<"Album"> | number
    catalogNumber?: StringFilter<"Album"> | string
    title?: StringFilter<"Album"> | string
    releaseDate?: DateTimeFilter<"Album"> | Date | string
    musicianId?: IntNullableFilter<"Album"> | number | null
    ensembleId?: IntNullableFilter<"Album"> | number | null
  }

  export type EnsembleMemberCreateWithoutEnsembleInput = {
    role: string
    startDate: Date | string
    endDate?: Date | string | null
    musician: MusicianCreateNestedOneWithoutEnsemblesInput
  }

  export type EnsembleMemberUncheckedCreateWithoutEnsembleInput = {
    id?: number
    musicianId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type EnsembleMemberCreateOrConnectWithoutEnsembleInput = {
    where: EnsembleMemberWhereUniqueInput
    create: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput>
  }

  export type EnsembleMemberCreateManyEnsembleInputEnvelope = {
    data: EnsembleMemberCreateManyEnsembleInput | EnsembleMemberCreateManyEnsembleInput[]
    skipDuplicates?: boolean
  }

  export type AlbumCreateWithoutEnsembleInput = {
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musician?: MusicianCreateNestedOneWithoutSoloAlbumsInput
    tracks?: TrackCreateNestedManyWithoutAlbumInput
    inventories?: InventoryCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutEnsembleInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
    tracks?: TrackUncheckedCreateNestedManyWithoutAlbumInput
    inventories?: InventoryUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutEnsembleInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput>
  }

  export type AlbumCreateManyEnsembleInputEnvelope = {
    data: AlbumCreateManyEnsembleInput | AlbumCreateManyEnsembleInput[]
    skipDuplicates?: boolean
  }

  export type EnsembleMemberUpsertWithWhereUniqueWithoutEnsembleInput = {
    where: EnsembleMemberWhereUniqueInput
    update: XOR<EnsembleMemberUpdateWithoutEnsembleInput, EnsembleMemberUncheckedUpdateWithoutEnsembleInput>
    create: XOR<EnsembleMemberCreateWithoutEnsembleInput, EnsembleMemberUncheckedCreateWithoutEnsembleInput>
  }

  export type EnsembleMemberUpdateWithWhereUniqueWithoutEnsembleInput = {
    where: EnsembleMemberWhereUniqueInput
    data: XOR<EnsembleMemberUpdateWithoutEnsembleInput, EnsembleMemberUncheckedUpdateWithoutEnsembleInput>
  }

  export type EnsembleMemberUpdateManyWithWhereWithoutEnsembleInput = {
    where: EnsembleMemberScalarWhereInput
    data: XOR<EnsembleMemberUpdateManyMutationInput, EnsembleMemberUncheckedUpdateManyWithoutEnsembleInput>
  }

  export type AlbumUpsertWithWhereUniqueWithoutEnsembleInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutEnsembleInput, AlbumUncheckedUpdateWithoutEnsembleInput>
    create: XOR<AlbumCreateWithoutEnsembleInput, AlbumUncheckedCreateWithoutEnsembleInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutEnsembleInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutEnsembleInput, AlbumUncheckedUpdateWithoutEnsembleInput>
  }

  export type AlbumUpdateManyWithWhereWithoutEnsembleInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutEnsembleInput>
  }

  export type EnsembleCreateWithoutMembersInput = {
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    albums?: AlbumCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    albums?: AlbumUncheckedCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleCreateOrConnectWithoutMembersInput = {
    where: EnsembleWhereUniqueInput
    create: XOR<EnsembleCreateWithoutMembersInput, EnsembleUncheckedCreateWithoutMembersInput>
  }

  export type MusicianCreateWithoutEnsemblesInput = {
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    soloAlbums?: AlbumCreateNestedManyWithoutMusicianInput
  }

  export type MusicianUncheckedCreateWithoutEnsemblesInput = {
    id?: number
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    soloAlbums?: AlbumUncheckedCreateNestedManyWithoutMusicianInput
  }

  export type MusicianCreateOrConnectWithoutEnsemblesInput = {
    where: MusicianWhereUniqueInput
    create: XOR<MusicianCreateWithoutEnsemblesInput, MusicianUncheckedCreateWithoutEnsemblesInput>
  }

  export type EnsembleUpsertWithoutMembersInput = {
    update: XOR<EnsembleUpdateWithoutMembersInput, EnsembleUncheckedUpdateWithoutMembersInput>
    create: XOR<EnsembleCreateWithoutMembersInput, EnsembleUncheckedCreateWithoutMembersInput>
    where?: EnsembleWhereInput
  }

  export type EnsembleUpdateToOneWithWhereWithoutMembersInput = {
    where?: EnsembleWhereInput
    data: XOR<EnsembleUpdateWithoutMembersInput, EnsembleUncheckedUpdateWithoutMembersInput>
  }

  export type EnsembleUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    albums?: AlbumUpdateManyWithoutEnsembleNestedInput
  }

  export type EnsembleUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    albums?: AlbumUncheckedUpdateManyWithoutEnsembleNestedInput
  }

  export type MusicianUpsertWithoutEnsemblesInput = {
    update: XOR<MusicianUpdateWithoutEnsemblesInput, MusicianUncheckedUpdateWithoutEnsemblesInput>
    create: XOR<MusicianCreateWithoutEnsemblesInput, MusicianUncheckedCreateWithoutEnsemblesInput>
    where?: MusicianWhereInput
  }

  export type MusicianUpdateToOneWithWhereWithoutEnsemblesInput = {
    where?: MusicianWhereInput
    data: XOR<MusicianUpdateWithoutEnsemblesInput, MusicianUncheckedUpdateWithoutEnsemblesInput>
  }

  export type MusicianUpdateWithoutEnsemblesInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    soloAlbums?: AlbumUpdateManyWithoutMusicianNestedInput
  }

  export type MusicianUncheckedUpdateWithoutEnsemblesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    soloAlbums?: AlbumUncheckedUpdateManyWithoutMusicianNestedInput
  }

  export type RecordingCreateWithoutCompositionInput = {
    recordingDate: Date | string
    studio?: string | null
    albums?: TrackCreateNestedManyWithoutRecordingInput
  }

  export type RecordingUncheckedCreateWithoutCompositionInput = {
    id?: number
    recordingDate: Date | string
    studio?: string | null
    albums?: TrackUncheckedCreateNestedManyWithoutRecordingInput
  }

  export type RecordingCreateOrConnectWithoutCompositionInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput>
  }

  export type RecordingCreateManyCompositionInputEnvelope = {
    data: RecordingCreateManyCompositionInput | RecordingCreateManyCompositionInput[]
    skipDuplicates?: boolean
  }

  export type RecordingUpsertWithWhereUniqueWithoutCompositionInput = {
    where: RecordingWhereUniqueInput
    update: XOR<RecordingUpdateWithoutCompositionInput, RecordingUncheckedUpdateWithoutCompositionInput>
    create: XOR<RecordingCreateWithoutCompositionInput, RecordingUncheckedCreateWithoutCompositionInput>
  }

  export type RecordingUpdateWithWhereUniqueWithoutCompositionInput = {
    where: RecordingWhereUniqueInput
    data: XOR<RecordingUpdateWithoutCompositionInput, RecordingUncheckedUpdateWithoutCompositionInput>
  }

  export type RecordingUpdateManyWithWhereWithoutCompositionInput = {
    where: RecordingScalarWhereInput
    data: XOR<RecordingUpdateManyMutationInput, RecordingUncheckedUpdateManyWithoutCompositionInput>
  }

  export type RecordingScalarWhereInput = {
    AND?: RecordingScalarWhereInput | RecordingScalarWhereInput[]
    OR?: RecordingScalarWhereInput[]
    NOT?: RecordingScalarWhereInput | RecordingScalarWhereInput[]
    id?: IntFilter<"Recording"> | number
    compositionId?: IntFilter<"Recording"> | number
    recordingDate?: DateTimeFilter<"Recording"> | Date | string
    studio?: StringNullableFilter<"Recording"> | string | null
  }

  export type CompositionCreateWithoutRecordingsInput = {
    title: string
    duration: number
    creationYear: number
    genre: string
  }

  export type CompositionUncheckedCreateWithoutRecordingsInput = {
    id?: number
    title: string
    duration: number
    creationYear: number
    genre: string
  }

  export type CompositionCreateOrConnectWithoutRecordingsInput = {
    where: CompositionWhereUniqueInput
    create: XOR<CompositionCreateWithoutRecordingsInput, CompositionUncheckedCreateWithoutRecordingsInput>
  }

  export type TrackCreateWithoutRecordingInput = {
    position: number
    album: AlbumCreateNestedOneWithoutTracksInput
  }

  export type TrackUncheckedCreateWithoutRecordingInput = {
    id?: number
    albumId: number
    position: number
  }

  export type TrackCreateOrConnectWithoutRecordingInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput>
  }

  export type TrackCreateManyRecordingInputEnvelope = {
    data: TrackCreateManyRecordingInput | TrackCreateManyRecordingInput[]
    skipDuplicates?: boolean
  }

  export type CompositionUpsertWithoutRecordingsInput = {
    update: XOR<CompositionUpdateWithoutRecordingsInput, CompositionUncheckedUpdateWithoutRecordingsInput>
    create: XOR<CompositionCreateWithoutRecordingsInput, CompositionUncheckedCreateWithoutRecordingsInput>
    where?: CompositionWhereInput
  }

  export type CompositionUpdateToOneWithWhereWithoutRecordingsInput = {
    where?: CompositionWhereInput
    data: XOR<CompositionUpdateWithoutRecordingsInput, CompositionUncheckedUpdateWithoutRecordingsInput>
  }

  export type CompositionUpdateWithoutRecordingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type CompositionUncheckedUpdateWithoutRecordingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    creationYear?: IntFieldUpdateOperationsInput | number
    genre?: StringFieldUpdateOperationsInput | string
  }

  export type TrackUpsertWithWhereUniqueWithoutRecordingInput = {
    where: TrackWhereUniqueInput
    update: XOR<TrackUpdateWithoutRecordingInput, TrackUncheckedUpdateWithoutRecordingInput>
    create: XOR<TrackCreateWithoutRecordingInput, TrackUncheckedCreateWithoutRecordingInput>
  }

  export type TrackUpdateWithWhereUniqueWithoutRecordingInput = {
    where: TrackWhereUniqueInput
    data: XOR<TrackUpdateWithoutRecordingInput, TrackUncheckedUpdateWithoutRecordingInput>
  }

  export type TrackUpdateManyWithWhereWithoutRecordingInput = {
    where: TrackScalarWhereInput
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyWithoutRecordingInput>
  }

  export type TrackScalarWhereInput = {
    AND?: TrackScalarWhereInput | TrackScalarWhereInput[]
    OR?: TrackScalarWhereInput[]
    NOT?: TrackScalarWhereInput | TrackScalarWhereInput[]
    id?: IntFilter<"Track"> | number
    albumId?: IntFilter<"Track"> | number
    recordingId?: IntFilter<"Track"> | number
    position?: IntFilter<"Track"> | number
  }

  export type MusicianCreateWithoutSoloAlbumsInput = {
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberCreateNestedManyWithoutMusicianInput
  }

  export type MusicianUncheckedCreateWithoutSoloAlbumsInput = {
    id?: number
    name: string
    birthDate?: Date | string | null
    country?: string | null
    bio?: string | null
    roles?: MusicianCreaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUncheckedCreateNestedManyWithoutMusicianInput
  }

  export type MusicianCreateOrConnectWithoutSoloAlbumsInput = {
    where: MusicianWhereUniqueInput
    create: XOR<MusicianCreateWithoutSoloAlbumsInput, MusicianUncheckedCreateWithoutSoloAlbumsInput>
  }

  export type EnsembleCreateWithoutAlbumsInput = {
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    members?: EnsembleMemberCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleUncheckedCreateWithoutAlbumsInput = {
    id?: number
    name: string
    formationDate: Date | string
    dissolutionDate?: Date | string | null
    type: string
    members?: EnsembleMemberUncheckedCreateNestedManyWithoutEnsembleInput
  }

  export type EnsembleCreateOrConnectWithoutAlbumsInput = {
    where: EnsembleWhereUniqueInput
    create: XOR<EnsembleCreateWithoutAlbumsInput, EnsembleUncheckedCreateWithoutAlbumsInput>
  }

  export type TrackCreateWithoutAlbumInput = {
    position: number
    recording: RecordingCreateNestedOneWithoutAlbumsInput
  }

  export type TrackUncheckedCreateWithoutAlbumInput = {
    id?: number
    recordingId: number
    position: number
  }

  export type TrackCreateOrConnectWithoutAlbumInput = {
    where: TrackWhereUniqueInput
    create: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput>
  }

  export type TrackCreateManyAlbumInputEnvelope = {
    data: TrackCreateManyAlbumInput | TrackCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type InventoryCreateWithoutAlbumInput = {
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
    sales?: SaleCreateNestedManyWithoutInventoryInput
  }

  export type InventoryUncheckedCreateWithoutAlbumInput = {
    id?: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
    sales?: SaleUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type InventoryCreateOrConnectWithoutAlbumInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput>
  }

  export type InventoryCreateManyAlbumInputEnvelope = {
    data: InventoryCreateManyAlbumInput | InventoryCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type MusicianUpsertWithoutSoloAlbumsInput = {
    update: XOR<MusicianUpdateWithoutSoloAlbumsInput, MusicianUncheckedUpdateWithoutSoloAlbumsInput>
    create: XOR<MusicianCreateWithoutSoloAlbumsInput, MusicianUncheckedCreateWithoutSoloAlbumsInput>
    where?: MusicianWhereInput
  }

  export type MusicianUpdateToOneWithWhereWithoutSoloAlbumsInput = {
    where?: MusicianWhereInput
    data: XOR<MusicianUpdateWithoutSoloAlbumsInput, MusicianUncheckedUpdateWithoutSoloAlbumsInput>
  }

  export type MusicianUpdateWithoutSoloAlbumsInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUpdateManyWithoutMusicianNestedInput
  }

  export type MusicianUncheckedUpdateWithoutSoloAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    roles?: MusicianUpdaterolesInput | $Enums.Role[]
    ensembles?: EnsembleMemberUncheckedUpdateManyWithoutMusicianNestedInput
  }

  export type EnsembleUpsertWithoutAlbumsInput = {
    update: XOR<EnsembleUpdateWithoutAlbumsInput, EnsembleUncheckedUpdateWithoutAlbumsInput>
    create: XOR<EnsembleCreateWithoutAlbumsInput, EnsembleUncheckedCreateWithoutAlbumsInput>
    where?: EnsembleWhereInput
  }

  export type EnsembleUpdateToOneWithWhereWithoutAlbumsInput = {
    where?: EnsembleWhereInput
    data: XOR<EnsembleUpdateWithoutAlbumsInput, EnsembleUncheckedUpdateWithoutAlbumsInput>
  }

  export type EnsembleUpdateWithoutAlbumsInput = {
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    members?: EnsembleMemberUpdateManyWithoutEnsembleNestedInput
  }

  export type EnsembleUncheckedUpdateWithoutAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    formationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dissolutionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StringFieldUpdateOperationsInput | string
    members?: EnsembleMemberUncheckedUpdateManyWithoutEnsembleNestedInput
  }

  export type TrackUpsertWithWhereUniqueWithoutAlbumInput = {
    where: TrackWhereUniqueInput
    update: XOR<TrackUpdateWithoutAlbumInput, TrackUncheckedUpdateWithoutAlbumInput>
    create: XOR<TrackCreateWithoutAlbumInput, TrackUncheckedCreateWithoutAlbumInput>
  }

  export type TrackUpdateWithWhereUniqueWithoutAlbumInput = {
    where: TrackWhereUniqueInput
    data: XOR<TrackUpdateWithoutAlbumInput, TrackUncheckedUpdateWithoutAlbumInput>
  }

  export type TrackUpdateManyWithWhereWithoutAlbumInput = {
    where: TrackScalarWhereInput
    data: XOR<TrackUpdateManyMutationInput, TrackUncheckedUpdateManyWithoutAlbumInput>
  }

  export type InventoryUpsertWithWhereUniqueWithoutAlbumInput = {
    where: InventoryWhereUniqueInput
    update: XOR<InventoryUpdateWithoutAlbumInput, InventoryUncheckedUpdateWithoutAlbumInput>
    create: XOR<InventoryCreateWithoutAlbumInput, InventoryUncheckedCreateWithoutAlbumInput>
  }

  export type InventoryUpdateWithWhereUniqueWithoutAlbumInput = {
    where: InventoryWhereUniqueInput
    data: XOR<InventoryUpdateWithoutAlbumInput, InventoryUncheckedUpdateWithoutAlbumInput>
  }

  export type InventoryUpdateManyWithWhereWithoutAlbumInput = {
    where: InventoryScalarWhereInput
    data: XOR<InventoryUpdateManyMutationInput, InventoryUncheckedUpdateManyWithoutAlbumInput>
  }

  export type InventoryScalarWhereInput = {
    AND?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    OR?: InventoryScalarWhereInput[]
    NOT?: InventoryScalarWhereInput | InventoryScalarWhereInput[]
    id?: IntFilter<"Inventory"> | number
    albumId?: IntFilter<"Inventory"> | number
    wholesalePrice?: FloatFilter<"Inventory"> | number
    retailPrice?: FloatFilter<"Inventory"> | number
    lastYearSales?: IntFilter<"Inventory"> | number
    currentYearSales?: IntFilter<"Inventory"> | number
    unsold?: IntFilter<"Inventory"> | number
  }

  export type AlbumCreateWithoutTracksInput = {
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musician?: MusicianCreateNestedOneWithoutSoloAlbumsInput
    ensemble?: EnsembleCreateNestedOneWithoutAlbumsInput
    inventories?: InventoryCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutTracksInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
    ensembleId?: number | null
    inventories?: InventoryUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutTracksInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
  }

  export type RecordingCreateWithoutAlbumsInput = {
    recordingDate: Date | string
    studio?: string | null
    composition: CompositionCreateNestedOneWithoutRecordingsInput
  }

  export type RecordingUncheckedCreateWithoutAlbumsInput = {
    id?: number
    compositionId: number
    recordingDate: Date | string
    studio?: string | null
  }

  export type RecordingCreateOrConnectWithoutAlbumsInput = {
    where: RecordingWhereUniqueInput
    create: XOR<RecordingCreateWithoutAlbumsInput, RecordingUncheckedCreateWithoutAlbumsInput>
  }

  export type AlbumUpsertWithoutTracksInput = {
    update: XOR<AlbumUpdateWithoutTracksInput, AlbumUncheckedUpdateWithoutTracksInput>
    create: XOR<AlbumCreateWithoutTracksInput, AlbumUncheckedCreateWithoutTracksInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutTracksInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutTracksInput, AlbumUncheckedUpdateWithoutTracksInput>
  }

  export type AlbumUpdateWithoutTracksInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musician?: MusicianUpdateOneWithoutSoloAlbumsNestedInput
    ensemble?: EnsembleUpdateOneWithoutAlbumsNestedInput
    inventories?: InventoryUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutTracksInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
    inventories?: InventoryUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type RecordingUpsertWithoutAlbumsInput = {
    update: XOR<RecordingUpdateWithoutAlbumsInput, RecordingUncheckedUpdateWithoutAlbumsInput>
    create: XOR<RecordingCreateWithoutAlbumsInput, RecordingUncheckedCreateWithoutAlbumsInput>
    where?: RecordingWhereInput
  }

  export type RecordingUpdateToOneWithWhereWithoutAlbumsInput = {
    where?: RecordingWhereInput
    data: XOR<RecordingUpdateWithoutAlbumsInput, RecordingUncheckedUpdateWithoutAlbumsInput>
  }

  export type RecordingUpdateWithoutAlbumsInput = {
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
    composition?: CompositionUpdateOneRequiredWithoutRecordingsNestedInput
  }

  export type RecordingUncheckedUpdateWithoutAlbumsInput = {
    id?: IntFieldUpdateOperationsInput | number
    compositionId?: IntFieldUpdateOperationsInput | number
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumCreateWithoutInventoriesInput = {
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musician?: MusicianCreateNestedOneWithoutSoloAlbumsInput
    ensemble?: EnsembleCreateNestedOneWithoutAlbumsInput
    tracks?: TrackCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutInventoriesInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
    ensembleId?: number | null
    tracks?: TrackUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutInventoriesInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutInventoriesInput, AlbumUncheckedCreateWithoutInventoriesInput>
  }

  export type SaleCreateWithoutInventoryInput = {
    saleDate?: Date | string
    quantity: number
  }

  export type SaleUncheckedCreateWithoutInventoryInput = {
    id?: number
    saleDate?: Date | string
    quantity: number
  }

  export type SaleCreateOrConnectWithoutInventoryInput = {
    where: SaleWhereUniqueInput
    create: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput>
  }

  export type SaleCreateManyInventoryInputEnvelope = {
    data: SaleCreateManyInventoryInput | SaleCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type AlbumUpsertWithoutInventoriesInput = {
    update: XOR<AlbumUpdateWithoutInventoriesInput, AlbumUncheckedUpdateWithoutInventoriesInput>
    create: XOR<AlbumCreateWithoutInventoriesInput, AlbumUncheckedCreateWithoutInventoriesInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutInventoriesInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutInventoriesInput, AlbumUncheckedUpdateWithoutInventoriesInput>
  }

  export type AlbumUpdateWithoutInventoriesInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musician?: MusicianUpdateOneWithoutSoloAlbumsNestedInput
    ensemble?: EnsembleUpdateOneWithoutAlbumsNestedInput
    tracks?: TrackUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutInventoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
    tracks?: TrackUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type SaleUpsertWithWhereUniqueWithoutInventoryInput = {
    where: SaleWhereUniqueInput
    update: XOR<SaleUpdateWithoutInventoryInput, SaleUncheckedUpdateWithoutInventoryInput>
    create: XOR<SaleCreateWithoutInventoryInput, SaleUncheckedCreateWithoutInventoryInput>
  }

  export type SaleUpdateWithWhereUniqueWithoutInventoryInput = {
    where: SaleWhereUniqueInput
    data: XOR<SaleUpdateWithoutInventoryInput, SaleUncheckedUpdateWithoutInventoryInput>
  }

  export type SaleUpdateManyWithWhereWithoutInventoryInput = {
    where: SaleScalarWhereInput
    data: XOR<SaleUpdateManyMutationInput, SaleUncheckedUpdateManyWithoutInventoryInput>
  }

  export type SaleScalarWhereInput = {
    AND?: SaleScalarWhereInput | SaleScalarWhereInput[]
    OR?: SaleScalarWhereInput[]
    NOT?: SaleScalarWhereInput | SaleScalarWhereInput[]
    id?: IntFilter<"Sale"> | number
    inventoryId?: IntFilter<"Sale"> | number
    saleDate?: DateTimeFilter<"Sale"> | Date | string
    quantity?: IntFilter<"Sale"> | number
  }

  export type InventoryCreateWithoutSalesInput = {
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
    album: AlbumCreateNestedOneWithoutInventoriesInput
  }

  export type InventoryUncheckedCreateWithoutSalesInput = {
    id?: number
    albumId: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
  }

  export type InventoryCreateOrConnectWithoutSalesInput = {
    where: InventoryWhereUniqueInput
    create: XOR<InventoryCreateWithoutSalesInput, InventoryUncheckedCreateWithoutSalesInput>
  }

  export type InventoryUpsertWithoutSalesInput = {
    update: XOR<InventoryUpdateWithoutSalesInput, InventoryUncheckedUpdateWithoutSalesInput>
    create: XOR<InventoryCreateWithoutSalesInput, InventoryUncheckedCreateWithoutSalesInput>
    where?: InventoryWhereInput
  }

  export type InventoryUpdateToOneWithWhereWithoutSalesInput = {
    where?: InventoryWhereInput
    data: XOR<InventoryUpdateWithoutSalesInput, InventoryUncheckedUpdateWithoutSalesInput>
  }

  export type InventoryUpdateWithoutSalesInput = {
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
    album?: AlbumUpdateOneRequiredWithoutInventoriesNestedInput
  }

  export type InventoryUncheckedUpdateWithoutSalesInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
  }

  export type EnsembleMemberCreateManyMusicianInput = {
    id?: number
    ensembleId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type AlbumCreateManyMusicianInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    ensembleId?: number | null
  }

  export type EnsembleMemberUpdateWithoutMusicianInput = {
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ensemble?: EnsembleUpdateOneRequiredWithoutMembersNestedInput
  }

  export type EnsembleMemberUncheckedUpdateWithoutMusicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    ensembleId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnsembleMemberUncheckedUpdateManyWithoutMusicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    ensembleId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlbumUpdateWithoutMusicianInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ensemble?: EnsembleUpdateOneWithoutAlbumsNestedInput
    tracks?: TrackUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutMusicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
    tracks?: TrackUncheckedUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutMusicianInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    ensembleId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type EnsembleMemberCreateManyEnsembleInput = {
    id?: number
    musicianId: number
    role: string
    startDate: Date | string
    endDate?: Date | string | null
  }

  export type AlbumCreateManyEnsembleInput = {
    id?: number
    catalogNumber: string
    title: string
    releaseDate: Date | string
    musicianId?: number | null
  }

  export type EnsembleMemberUpdateWithoutEnsembleInput = {
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    musician?: MusicianUpdateOneRequiredWithoutEnsemblesNestedInput
  }

  export type EnsembleMemberUncheckedUpdateWithoutEnsembleInput = {
    id?: IntFieldUpdateOperationsInput | number
    musicianId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EnsembleMemberUncheckedUpdateManyWithoutEnsembleInput = {
    id?: IntFieldUpdateOperationsInput | number
    musicianId?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlbumUpdateWithoutEnsembleInput = {
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musician?: MusicianUpdateOneWithoutSoloAlbumsNestedInput
    tracks?: TrackUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutEnsembleInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
    tracks?: TrackUncheckedUpdateManyWithoutAlbumNestedInput
    inventories?: InventoryUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutEnsembleInput = {
    id?: IntFieldUpdateOperationsInput | number
    catalogNumber?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    releaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    musicianId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RecordingCreateManyCompositionInput = {
    id?: number
    recordingDate: Date | string
    studio?: string | null
  }

  export type RecordingUpdateWithoutCompositionInput = {
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
    albums?: TrackUpdateManyWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateWithoutCompositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
    albums?: TrackUncheckedUpdateManyWithoutRecordingNestedInput
  }

  export type RecordingUncheckedUpdateManyWithoutCompositionInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    studio?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrackCreateManyRecordingInput = {
    id?: number
    albumId: number
    position: number
  }

  export type TrackUpdateWithoutRecordingInput = {
    position?: IntFieldUpdateOperationsInput | number
    album?: AlbumUpdateOneRequiredWithoutTracksNestedInput
  }

  export type TrackUncheckedUpdateWithoutRecordingInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TrackUncheckedUpdateManyWithoutRecordingInput = {
    id?: IntFieldUpdateOperationsInput | number
    albumId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TrackCreateManyAlbumInput = {
    id?: number
    recordingId: number
    position: number
  }

  export type InventoryCreateManyAlbumInput = {
    id?: number
    wholesalePrice: number
    retailPrice: number
    lastYearSales?: number
    currentYearSales?: number
    unsold?: number
  }

  export type TrackUpdateWithoutAlbumInput = {
    position?: IntFieldUpdateOperationsInput | number
    recording?: RecordingUpdateOneRequiredWithoutAlbumsNestedInput
  }

  export type TrackUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordingId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type TrackUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    recordingId?: IntFieldUpdateOperationsInput | number
    position?: IntFieldUpdateOperationsInput | number
  }

  export type InventoryUpdateWithoutAlbumInput = {
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
    sales?: SaleUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
    sales?: SaleUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type InventoryUncheckedUpdateManyWithoutAlbumInput = {
    id?: IntFieldUpdateOperationsInput | number
    wholesalePrice?: FloatFieldUpdateOperationsInput | number
    retailPrice?: FloatFieldUpdateOperationsInput | number
    lastYearSales?: IntFieldUpdateOperationsInput | number
    currentYearSales?: IntFieldUpdateOperationsInput | number
    unsold?: IntFieldUpdateOperationsInput | number
  }

  export type SaleCreateManyInventoryInput = {
    id?: number
    saleDate?: Date | string
    quantity: number
  }

  export type SaleUpdateWithoutInventoryInput = {
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SaleUncheckedUpdateWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type SaleUncheckedUpdateManyWithoutInventoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    saleDate?: DateTimeFieldUpdateOperationsInput | Date | string
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}